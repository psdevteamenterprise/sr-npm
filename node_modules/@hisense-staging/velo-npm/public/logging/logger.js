const { site } = require('@wix/site-site');
const { warmupData, rendering } = require('@wix/site-window');

async function createLogger({ backendLogger, browserLogger, GCPProjectId }) {
  const env = await rendering.env();
  const pageName = (await site.currentPage()).name || 'MISSING_PAGE_NAME';
  const actualLogger = env === 'backend' ? backendLogger : browserLogger;
  const debugId = await getUniqDebugID(env);
  const logMethodNames = ['log', 'warn', 'info', 'error'];
  const result = logMethodNames.reduce((acc, methodName) => {
    acc[methodName] = msg => actualLogger[methodName](`[${env}][${pageName}]: ${msg}. ${debugId}`);
    return acc;
  }, {});

  const link = `https://console.cloud.google.com/logs/query;query=resource.type%3D%22global%22%0ASEARCH%2528%22%60${debugId}%60%22%2529;duration=PT30M?inv=1&invt=AbmX2Q&project=${GCPProjectId}`;
  result.debugLink = () => result.log(link);
  return result;
}

function generateUniqDebugId() {
  const timestamp = Date.now().toString(36);
  const randomPart = Math.random().toString(36).substring(2, 10);
  return `debug-${timestamp}-${randomPart}`;
}

async function getUniqDebugID(env) {
  const debugIdKey = 'uniqDebugId';
  if (env === 'backend') {
    const result = generateUniqDebugId();
    await warmupData.set(debugIdKey, result);
    return result;
  }
  if (env === 'browser') {
    const _warmupData = await warmupData.get(debugIdKey);
    if (_warmupData) {
      return _warmupData;
    } else {
      return generateUniqDebugId();
    }
  }
}

module.exports = {
  createLogger,
};
