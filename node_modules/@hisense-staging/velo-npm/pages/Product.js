const { checkProductContent, isElementExistOnPage } = require('../public');
const { logUrlPath } = require('../public/utils.js');
function productPageOnReady(_$w) {
  //Sections connected to productDataset
  const productSectionsSelectors = {
    image1Section: '#image1Section',
    image2Section: '#image2Section',
    image3Section: '#image3Section',
    firstRichTextSection: '#firstRichTextSection',
    secondRichTextSection: '#secondRichTextSection',
    thirdRichTextSection: '#thirdRichTextSection',
    videoSection: '#videoSection',
    additionalGallerySection: '#additionalGallerySection',
  };
  //Sections connected to other datasets
  const otherSectionsSelectors = {
    firstKeyFeaturesSection: '#firstKeyFeaturesSection',
    secondKeyFeaturesSection: '#secondKeyFeaturesSection',
    additionalResourcesSection: '#additionalResourcesSection',
    awardsSection: '#awardsSection',
  };
  const productSections = Object.values(productSectionsSelectors).map(selector => ({
    selector,
    isAvailable: false,
  }));
  const allSections = [
    ...productSections,
    ...Object.values(otherSectionsSelectors).map(selector => ({
      selector,
      isAvailable: false,
    })),
  ];
  const toggleSectionsVisibility = sections => {
    sections.forEach(({ selector, isAvailable = false }) => {
      if (isElementExistOnPage(_$w(selector))) {
        // some sections doesn't exist on other sites
        isAvailable ? _$w(selector).restore() : _$w(selector).delete();
      }
    });
  };

  const toggleProductSections = productData => {
    const {
      hasImage1,
      hasImage2,
      hasImage3,
      hasFirstRichTextContent,
      hasSecondRichTextContent,
      hasThirdRichTextContent,
      hasMainVideo,
      hasGallery,
    } = checkProductContent(productData);
    const availabilityFlags = {
      image1Section: hasImage1,
      image2Section: hasImage2,
      image3Section: hasImage3,
      firstRichTextSection: hasFirstRichTextContent,
      secondRichTextSection: hasSecondRichTextContent,
      thirdRichTextSection: hasThirdRichTextContent,
      videoSection: hasMainVideo,
      additionalGallerySection: hasGallery,
    };
    const updateProductSectionsAvailability = availabilityFlags => {
      Object.keys(productSectionsSelectors).forEach(key => {
        const section = productSections.find(
          item => item.selector === productSectionsSelectors[key]
        );
        if (section) {
          section.isAvailable = availabilityFlags[key];
        }
      });
    };
    updateProductSectionsAvailability(availabilityFlags);
    toggleSectionsVisibility(productSections);
  };

  const handleRepeaterItems = (
    repeaterId,
    itemTitleSelector,
    itemSubtitleSelector,
    itemDescriptionSelector
  ) => {
    const repeater = _$w(repeaterId);
    if (!repeater || repeater.length === 0) {
      console.warn(`Repeater ${repeaterId} not found or is empty`);
      return;
    }
    console.log(`Repeater ${repeaterId} found, iterating over items`);
    _$w(repeaterId).forEachItem($item => {
      const collapseEmptyData = selector => {
        if (!$item(selector).text) {
          console.log(`${selector} data is empty, collapsing it`);
          if (typeof $item(selector).collapse === 'function') {
            $item(selector).collapse();
          } else {
            logUrlPath();
            console.error(`${selector} is not a collapsible element!!`);
          }
        }
      };

      collapseEmptyData(itemTitleSelector);
      collapseEmptyData(itemSubtitleSelector);
      collapseEmptyData(itemDescriptionSelector);
    });
  };

  const otherDatasetsOnReady = () => {
    Object.values(otherSectionsSelectors).forEach(selector => {
      const datasetSelector = selector.replace('Section', 'Dataset');
      _$w(datasetSelector).onReady(() => {
        console.log(
          `datasetSelector: ${datasetSelector} before calling getTotalCount ${JSON.stringify(_$w(datasetSelector))}`
        );
        let totalCount = 0;
        try {
          totalCount = _$w(datasetSelector)?.getTotalCount() || 0;
        } catch (e) {
          logUrlPath();
          console.warn(
            `Error getting total count for dataset ${datasetSelector}. Defaulting to 0. Error: ${e}`
          );
        }
        console.log({
          datasetSelector,
          totalCount: totalCount,
        });
        toggleSectionsVisibility([
          {
            selector,
            isAvailable: totalCount !== 0,
          },
        ]);

        if (['#firstKeyFeaturesSection', '#secondKeyFeaturesSection'].includes(selector)) {
          if (selector === '#firstKeyFeaturesSection') {
            handleRepeaterItems(
              '#firstKeyFeaturesRepeater',
              '#firstKeyFeaturesTitle',
              '#firstKeyFeaturesSubTitle',
              '#firstKeyFeaturesDescription'
            );
          }

          if (selector === '#secondKeyFeaturesSection') {
            handleRepeaterItems(
              '#secondKeyFeaturesRepeater',
              '#secondKeyFeaturesTitle',
              '#secondKeyFeaturesSubTitle',
              '#secondKeyFeaturesDescription'
            );
          }
        }
      });
    });
  };

  toggleSectionsVisibility(allSections); // initially delete all sections
  _$w('#productDataset').onReady(() => {
    _$w('#productDataset')
      .getItems(0, 1)
      .then(result => {
        const productData = result.items[0];
        console.log(`productData is : ${productData}`);
        if (productData && !productData.vimeoLink && productData.mainVideo) {
          _$w('#videoPlayer1').src = productData.mainVideo;
        }
        toggleProductSections(productData);
        return productData;
      })
      .catch(err => {
        const errMsg = err.message;
        const errCode = err.code;
        throw new Error(`Error ${errCode}: ${errMsg}`);
      });
  });
  otherDatasetsOnReady();
}

module.exports = { productPageOnReady };
