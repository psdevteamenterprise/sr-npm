const { TASK_TYPE } = require('../tasks/consts');
const { taskManager } = require('../tasks/taskManager');

const { TASKS } = require('./consts');

function onCMSProductAfterUpdate(item) {
  console.log('onCMSProductAfterUpdate ', item);
  taskManager().schedule({
    name: TASKS.CMS_PRODUCT_CHANGE.name,
    data: { storeProductId: item.storeProduct },
    type: TASK_TYPE.EVENT,
  });

  taskManager().schedule({
    name: TASKS.CMS_PRODUCT_UPDATE_SKU.name,
    data: { storeProductId: item.storeProduct, productId: item._id},
    type: TASK_TYPE.EVENT,
  });

  return item;
}

function onCMSProductAfterCreate(item) {
  //
  taskManager().schedule({
    name: TASKS.CMS_PRODUCT_CREATE.name,
    data: { storeProductId: item.storeProduct },
    type: TASK_TYPE.EVENT,
  });
  return item;
}

function onCMSProductBeforeRemove(item) {
  //item is cms _id
  console.log('onCMSProductBeforeRemove', item);
  //   const productInStores = await getProductInStoresByProductInCMS(item);
  taskManager().schedule({
    name: TASKS.CMS_PRODUCT_DELETE.name,
    data: { storeProductId: item },
    type: TASK_TYPE.EVENT,
  });
}

function onStoreProductAfterCreate(event) {
  console.log('onStoreProductAfterCreate', event);
  taskManager().schedule({
    name: TASKS.STORE_PRODUCT_CREATE.name,
    data: { storeProductId: event._id },
    type: TASK_TYPE.EVENT,
  });
}

function onStoreProductAfterUpdate(event) {
  console.log('onStoreProductAfterUpdate', event);
  taskManager().schedule({
    name: TASKS.STORE_PRODUCT_CHANGE.name,
    data: { storeProductId: event.productId },
    type: TASK_TYPE.EVENT,
  });
}

function onStoreProductBeforeRemove(event) {
  console.log('onStoreProductBeforeRemove', event);
  taskManager().schedule({
    name: TASKS.STORE_PRODUCT_DELETE.name,
    data: { storeProductId: event.productId },
    type: TASK_TYPE.EVENT,
  });
}
module.exports = {
  onCMSProductAfterUpdate,
  onCMSProductAfterCreate,
  onCMSProductBeforeRemove,
  onStoreProductAfterCreate,
  onStoreProductAfterUpdate,
  onStoreProductBeforeRemove,
};
