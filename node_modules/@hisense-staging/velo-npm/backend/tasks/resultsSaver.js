const { wixData, wixCollections } = require('../elevated-modules');

const { detectFieldType } = require('./fieldTypeDetector');
const { createCollectionIfMissing } = require('./utils');

/**
 * Creates a results collection for a specific task if it doesn't exist
 * @param {string} taskName - The name of the task
 * @returns {Promise<string>} - The collection ID
 */
function createResultsCollectionIfMissing(taskName) {
  const collectionId = `${taskName}_results`;

  const resultsFields = [
    { key: 'taskId', type: 'TEXT' },
    { key: 'taskName', type: 'TEXT' },
    { key: 'status', type: 'TEXT' },
    { key: 'result', type: 'OBJECT' },
  ];

  return createCollectionIfMissing(collectionId, resultsFields, null, 'Results');
}

/**
 * Adds fields dynamically to a results collection based on the result object structure
 * @param {string} collectionId - The collection ID
 * @param {Object} result - The result object to analyze for fields
 */
async function addDynamicFieldsToCollection(collectionId, result) {
  if (!result || typeof result !== 'object') {
    console.log(`[addDynamicFieldsToCollection] No valid result object to analyze for fields`);
    return;
  }

  try {
    const collection = await wixCollections.getDataCollection(collectionId);
    const existingFields = new Set(collection.fields.map(field => field.key));
    const newFields = [];

    Object.keys(result).forEach(key => {
      if (!existingFields.has(key)) {
        const value = result[key];
        const fieldType = detectFieldType(value);
        newFields.push({ key, type: fieldType });
      }
    });

    if (newFields.length > 0) {
      console.log(
        `[addDynamicFieldsToCollection] Adding ${newFields.length} new fields to collection ${collectionId}`
      );

      const updatedFields = [...collection.fields, ...newFields];
      await wixCollections.updateDataCollection({
        _id: collectionId,
        revision: collection.revision,
        fields: updatedFields,
      });

      console.log(
        `[addDynamicFieldsToCollection] Successfully added new fields: ${newFields.map(f => f.key).join(', ')}`
      );
    }
  } catch (error) {
    // If updating fields fails, we'll continue anyway - the result will still be saved in the 'result' OBJECT field
    console.error(
      `[addDynamicFieldsToCollection] Failed to add dynamic fields to collection ${collectionId}: ${error.message}`
    );
  }
}

/**
 * Saves task results to a dedicated collection
 * @param {Object} task - The task object
 * @param {string} status - The task status
 * @returns {Promise<string>} - The inserted result ID
 */
async function saveTaskResultToAdditionalCollection(task, status, result) {
  try {
    const { _id: taskId, name: taskName } = task;

    console.log(`[saveTaskResult] Saving result for task ${taskName}`);

    const collectionId = await createResultsCollectionIfMissing(taskName);

    await addDynamicFieldsToCollection(collectionId, result);

    const dataToInsert = {
      taskId,
      taskName,
      status,
      result,
      // Add individual fields from result for easier querying
      ...(result && typeof result === 'object' ? result : {}),
    };

    const insertedResult = await wixData.insert(collectionId, dataToInsert);

    console.log(
      `[saveTaskResult] Successfully saved result for task ${taskName} with ID ${insertedResult._id}`
    );
    return insertedResult._id;
  } catch (error) {
    const errMsg = `[saveTaskResult] Failed to save result for task ${task.name}: ${error.message}`;
    console.error(errMsg);
    throw new Error(errMsg);
  }
}

/**
 * Checks if a task configuration has results saving enabled
 * @param {Object} taskConfig - The task configuration
 * @returns {boolean} - Whether results saving is enabled
 */
function shouldSaveResultsToAdditionalCollection(taskConfig) {
  return taskConfig && taskConfig.saveResults === true;
}

module.exports = {
  createResultsCollectionIfMissing,
  addDynamicFieldsToCollection,
  saveTaskResultToAdditionalCollection,
  shouldSaveResultsToAdditionalCollection,
};
