const { insertNewTask, bulkInsertTasks } = require('../utils');

const { createChildTaskPayload } = require('./utils');

const scheduleChildren = ({
  parentTaskId,
  parentTaskData,
  expectedChildTasks,
  scheduledChildren,
}) => {
  const scheduleSingleChild = ({ taskName, taskData, parentTaskId }) => {
    const childTask = createChildTaskPayload({
      taskName,
      taskData,
      parentTaskId,
    });
    return insertNewTask(childTask);
  };

  const scheduleChildrenInBulk = ({
    parentTaskId,
    parentTaskData: { previousTaskOutput: _previousTaskOutput, ...restParentData },
    childTasks,
  }) => {
    const tasksToInsert = childTasks.map(({ name, data }) =>
      createChildTaskPayload({
        taskName: name,
        taskData: { ...restParentData, ...data },
        parentTaskId,
      })
    );
    //Host needs to keep in mind Velo limitations of bulkInsert 1000 items max and 500kb max item size
    //Ref: https://dev.wix.com/docs/velo/apis/wix-data/bulk-insert
    return bulkInsertTasks(tasksToInsert);
  };

  const getPreviousChildOutput = childIndex => {
    const isFirstChild = childIndex === 0 || !scheduledChildren?.length;
    if (isFirstChild) {
      return undefined;
    }
    const lastScheduledChild = scheduledChildren[scheduledChildren.length - 1];
    return lastScheduledChild?.data?.output;
  };

  return {
    sequentially: childIndex =>
      scheduleSingleChild({
        taskName: expectedChildTasks[childIndex].name,
        taskData: {
          ...parentTaskData,
          ...expectedChildTasks[childIndex].data,
          previousTaskOutput: getPreviousChildOutput(childIndex),
        },
        parentTaskId,
      }),
    inBulk: () =>
      scheduleChildrenInBulk({
        parentTaskId,
        parentTaskData,
        childTasks: expectedChildTasks,
      }),
  };
};

module.exports = { scheduleChildren };
