import { d as GetSecretValueRequest$1, G as GetSecretValueResponse$1, e as ListSecretInfoRequest$1, L as ListSecretInfoResponse$1, C as CreateSecretRequest$1, f as CreateSecretResponse$1, D as DeleteSecretRequest$1, g as DeleteSecretResponse$1, U as UpdateSecretRequest$1, h as UpdateSecretResponse$1 } from './velo-secrets-vault-v1-secret-secrets.universal-OhladVsK.js';

interface Secret {
    /**
     * Unique secret ID.
     * @readonly
     * @format GUID
     */
    id?: string | null;
    /**
     * A unique, human-friendly name for the secret. Use it to retrieve the secret value with Get Secret Value.
     *
     * **Note:** You can use alphanumeric characters and the following special characters: `_+=-@#$`. Spaces are not supported.
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Optional text describing the secret's purpose or any other notes about it.
     * @maxLength 200
     */
    description?: string | null;
    /**
     * The encrypted confidential value.
     * @minLength 1
     * @maxLength 3500
     */
    value?: string | null;
    /**
     * Date and time when the secret was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time when the secret was updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
interface GetSecretValueRequest {
    /** Secret name. */
    name: string;
}
interface GetSecretValueResponse {
    /** The confidential value to protect, such as an API key. */
    value?: string;
}
interface ListSecretInfoRequest {
}
interface ListSecretInfoResponse {
    /** A list of secrets with encrypted values. */
    secrets?: Secret[];
}
interface CreateSecretRequest {
    /** Details of a secret. */
    secret: Secret;
}
interface CreateSecretResponse {
    /** Unique secret ID. */
    id?: string;
}
interface DeleteSecretRequest {
    /**
     * ID of the secret to delete.
     * @format GUID
     */
    id: string;
}
interface DeleteSecretResponse {
}
interface UpdateSecretRequest {
    /**
     * ID of the secret to update.
     * @format GUID
     */
    id: string;
    /** Details of a secret. */
    secret: Secret;
}
interface UpdateSecretResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getSecretValue(): __PublicMethodMetaInfo<'GET', {
    name: string;
}, GetSecretValueRequest$1, GetSecretValueRequest, GetSecretValueResponse$1, GetSecretValueResponse>;
declare function listSecretInfo(): __PublicMethodMetaInfo<'GET', {}, ListSecretInfoRequest$1, ListSecretInfoRequest, ListSecretInfoResponse$1, ListSecretInfoResponse>;
declare function createSecret(): __PublicMethodMetaInfo<'POST', {}, CreateSecretRequest$1, CreateSecretRequest, CreateSecretResponse$1, CreateSecretResponse>;
declare function deleteSecret(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteSecretRequest$1, DeleteSecretRequest, DeleteSecretResponse$1, DeleteSecretResponse>;
declare function updateSecret(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
}, UpdateSecretRequest$1, UpdateSecretRequest, UpdateSecretResponse$1, UpdateSecretResponse>;

export { type __PublicMethodMetaInfo, createSecret, deleteSecret, getSecretValue, listSecretInfo, updateSecret };
