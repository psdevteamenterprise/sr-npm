"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  WebhookIdentityType: () => WebhookIdentityType,
  createSecret: () => createSecret4,
  deleteSecret: () => deleteSecret4,
  getSecretValue: () => getSecretValue4,
  listSecretInfo: () => listSecretInfo4,
  onSecretCreated: () => onSecretCreated2,
  onSecretDeleted: () => onSecretDeleted2,
  onSecretUpdated: () => onSecretUpdated2,
  updateSecret: () => updateSecret3
});
module.exports = __toCommonJS(index_exports);

// src/velo-secrets-vault-v1-secret-secrets.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/velo-secrets-vault-v1-secret-secrets.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/velo-secrets-vault-v1-secret-secrets.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl(opts) {
  const domainToMappings = {
    "service.wix-code.com": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "service-int.wix-code.com": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_secrets_secrets";
function getSecretValue(payload) {
  function __getSecretValue({ host }) {
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "GET",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.GetSecretValue",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets/name/{name}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getSecretValue;
}
function listSecretInfo(payload) {
  function __listSecretInfo({ host }) {
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "GET",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.ListSecretInfo",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "secrets.createdDate" },
            { path: "secrets.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listSecretInfo;
}
function createSecret(payload) {
  function __createSecret({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "secret.createdDate" }, { path: "secret.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "POST",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.CreateSecret",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __createSecret;
}
function deleteSecret(payload) {
  function __deleteSecret({ host }) {
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "DELETE",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.DeleteSecret",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteSecret;
}
function partiallyUpdateSecret(payload) {
  function __partiallyUpdateSecret({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "secret.createdDate" }, { path: "secret.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "PATCH",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.PartiallyUpdateSecret",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets/{id}",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __partiallyUpdateSecret;
}

// src/velo-secrets-vault-v1-secret-secrets.universal.ts
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getSecretValue2(name) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ name });
  const reqOpts = getSecretValue(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { name: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["name"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listSecretInfo2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = listSecretInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createSecret2(secret) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ secret });
  const reqOpts = createSecret(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?._id;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { secret: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["secret"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteSecret2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteSecret(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateSecret(_id, secret) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    secret
  });
  const reqOpts = partiallyUpdateSecret(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", secret: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "secret"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/velo-secrets-vault-v1-secret-secrets.public.ts
function getSecretValue3(httpClient) {
  return (name) => getSecretValue2(
    name,
    // @ts-ignore
    { httpClient }
  );
}
function listSecretInfo3(httpClient) {
  return () => listSecretInfo2(
    // @ts-ignore
    { httpClient }
  );
}
function createSecret3(httpClient) {
  return (secret) => createSecret2(
    secret,
    // @ts-ignore
    { httpClient }
  );
}
function deleteSecret3(httpClient) {
  return (_id) => deleteSecret2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateSecret2(httpClient) {
  return (_id, secret) => updateSecret(
    _id,
    secret,
    // @ts-ignore
    { httpClient }
  );
}
var onSecretCreated = (0, import_sdk_types.EventDefinition)(
  "wix.velo.secrets_vault.v1.secret_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onSecretDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.velo.secrets_vault.v1.secret_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onSecretUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.velo.secrets_vault.v1.secret_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/velo-secrets-vault-v1-secret-secrets.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var getSecretValue4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getSecretValue3);
var listSecretInfo4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listSecretInfo3);
var createSecret4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createSecret3);
var deleteSecret4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteSecret3);
var updateSecret3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateSecret2);
var onSecretCreated2 = (0, import_event_definition_modules.createEventModule)(onSecretCreated);
var onSecretDeleted2 = (0, import_event_definition_modules.createEventModule)(onSecretDeleted);
var onSecretUpdated2 = (0, import_event_definition_modules.createEventModule)(onSecretUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WebhookIdentityType,
  createSecret,
  deleteSecret,
  getSecretValue,
  listSecretInfo,
  onSecretCreated,
  onSecretDeleted,
  onSecretUpdated,
  updateSecret
});
//# sourceMappingURL=index.js.map