import { HttpClient, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { G as GetSecretValueResponse, L as ListSecretInfoResponse, S as Secret, a as SecretCreatedEnvelope, b as SecretDeletedEnvelope, c as SecretUpdatedEnvelope } from './velo-secrets-vault-v1-secret-secrets.universal-OhladVsK.mjs';
export { A as ActionEvent, B as BaseEventMetadata, C as CreateSecretRequest, f as CreateSecretResponse, D as DeleteSecretRequest, g as DeleteSecretResponse, i as DomainEvent, j as DomainEventBodyOneOf, E as EntityCreatedEvent, l as EntityDeletedEvent, k as EntityUpdatedEvent, n as EventMetadata, d as GetSecretValueRequest, I as IdentificationData, m as IdentificationDataIdOneOf, e as ListSecretInfoRequest, M as MessageEnvelope, R as RestoreInfo, U as UpdateSecretRequest, h as UpdateSecretResponse, W as WebhookIdentityType } from './velo-secrets-vault-v1-secret-secrets.universal-OhladVsK.mjs';

declare function getSecretValue$1(httpClient: HttpClient): GetSecretValueSignature;
interface GetSecretValueSignature {
    /**
     * Retrieves a secret value by name.
     *
     * <blockquote class="caution">
     * __Caution:__
     * Only use a secret's value in the backend code. Returning the secret value in the frontend is a security risk.
     * </blockquote>
     * @param - The name of the secret to get the value of.
     */
    (name: string): Promise<GetSecretValueResponse>;
}
declare function listSecretInfo$1(httpClient: HttpClient): ListSecretInfoSignature;
interface ListSecretInfoSignature {
    /**
     * Retrieves a list of secrets.
     *
     * > **Note:** This method doesn't return the secret's value for security reasons. To retrieve the value, call [Get Secret Value](https://dev.wix.com/docs/rest/business-management/secrets/get-secret-value).
     */
    (): Promise<ListSecretInfoResponse>;
}
declare function createSecret$1(httpClient: HttpClient): CreateSecretSignature;
interface CreateSecretSignature {
    /**
     * Creates a secret.
     * @param - Fields of a new secret.
     * @returns Unique secret ID.
     */
    (secret: Secret): Promise<string>;
}
declare function deleteSecret$1(httpClient: HttpClient): DeleteSecretSignature;
interface DeleteSecretSignature {
    /**
     * Deletes a secret.
     *
     * <blockquote class="warning">
     * <strong>Warning:</strong>
     * Deleting a secret is irreversible and will break all code using the secret.
     * </blockquote>
     * @param - The unique ID of the secret to be deleted.
     */
    (_id: string): Promise<void>;
}
declare function updateSecret$1(httpClient: HttpClient): UpdateSecretSignature;
interface UpdateSecretSignature {
    /**
     * Updates 1 or all fields of a secret.
     *
     * To get the secret ID, call [List Secret Info](https://dev.wix.com/docs/rest/business-management/secrets/list-secret-info).
     * @param - ID of the secret to update.
     * @param - Details of a secret.
     */
    (_id: string, secret: Secret): Promise<void>;
}
declare const onSecretCreated$1: EventDefinition<SecretCreatedEnvelope, "wix.velo.secrets_vault.v1.secret_created">;
declare const onSecretDeleted$1: EventDefinition<SecretDeletedEnvelope, "wix.velo.secrets_vault.v1.secret_deleted">;
declare const onSecretUpdated$1: EventDefinition<SecretUpdatedEnvelope, "wix.velo.secrets_vault.v1.secret_updated">;

declare const getSecretValue: MaybeContext<BuildRESTFunction<typeof getSecretValue$1> & typeof getSecretValue$1>;
declare const listSecretInfo: MaybeContext<BuildRESTFunction<typeof listSecretInfo$1> & typeof listSecretInfo$1>;
declare const createSecret: MaybeContext<BuildRESTFunction<typeof createSecret$1> & typeof createSecret$1>;
declare const deleteSecret: MaybeContext<BuildRESTFunction<typeof deleteSecret$1> & typeof deleteSecret$1>;
declare const updateSecret: MaybeContext<BuildRESTFunction<typeof updateSecret$1> & typeof updateSecret$1>;
/**
 * Triggered when a secret is created.
 */
declare const onSecretCreated: BuildEventDefinition<typeof onSecretCreated$1>;
/**
 * Triggered when a secret is deleted.
 */
declare const onSecretDeleted: BuildEventDefinition<typeof onSecretDeleted$1>;
/**
 * Triggered when a secret is updated.
 */
declare const onSecretUpdated: BuildEventDefinition<typeof onSecretUpdated$1>;

export { GetSecretValueResponse, ListSecretInfoResponse, Secret, SecretCreatedEnvelope, SecretDeletedEnvelope, SecretUpdatedEnvelope, createSecret, deleteSecret, getSecretValue, listSecretInfo, onSecretCreated, onSecretDeleted, onSecretUpdated, updateSecret };
