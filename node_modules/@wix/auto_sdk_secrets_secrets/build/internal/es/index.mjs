// src/velo-secrets-vault-v1-secret-secrets.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/velo-secrets-vault-v1-secret-secrets.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/velo-secrets-vault-v1-secret-secrets.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl(opts) {
  const domainToMappings = {
    "service.wix-code.com": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "service-int.wix-code.com": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/_api/cloud-secrets-vault-server",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_secrets_secrets";
function getSecretValue(payload) {
  function __getSecretValue({ host }) {
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "GET",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.GetSecretValue",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets/name/{name}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getSecretValue;
}
function listSecretInfo(payload) {
  function __listSecretInfo({ host }) {
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "GET",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.ListSecretInfo",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "secrets.createdDate" },
            { path: "secrets.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listSecretInfo;
}
function createSecret(payload) {
  function __createSecret({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "secret.createdDate" }, { path: "secret.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "POST",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.CreateSecret",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __createSecret;
}
function deleteSecret(payload) {
  function __deleteSecret({ host }) {
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "DELETE",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.DeleteSecret",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteSecret;
}
function partiallyUpdateSecret(payload) {
  function __partiallyUpdateSecret({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "secret.createdDate" }, { path: "secret.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.velo.secrets_vault.v1.secret",
      method: "PATCH",
      methodFqn: "wix.velo.secrets_vault.v1.SecretsVaultService.PartiallyUpdateSecret",
      packageName: PACKAGE_NAME,
      url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
        protoPath: "/api/v1/secrets/{id}",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __partiallyUpdateSecret;
}

// src/velo-secrets-vault-v1-secret-secrets.universal.ts
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getSecretValue2(name) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ name });
  const reqOpts = getSecretValue(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { name: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["name"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listSecretInfo2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = listSecretInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createSecret2(secret) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ secret });
  const reqOpts = createSecret(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?._id;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { secret: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["secret"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteSecret2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteSecret(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateSecret(_id, secret) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    secret
  });
  const reqOpts = partiallyUpdateSecret(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", secret: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "secret"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/velo-secrets-vault-v1-secret-secrets.public.ts
function getSecretValue3(httpClient) {
  return (name) => getSecretValue2(
    name,
    // @ts-ignore
    { httpClient }
  );
}
function listSecretInfo3(httpClient) {
  return () => listSecretInfo2(
    // @ts-ignore
    { httpClient }
  );
}
function createSecret3(httpClient) {
  return (secret) => createSecret2(
    secret,
    // @ts-ignore
    { httpClient }
  );
}
function deleteSecret3(httpClient) {
  return (_id) => deleteSecret2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateSecret2(httpClient) {
  return (_id, secret) => updateSecret(
    _id,
    secret,
    // @ts-ignore
    { httpClient }
  );
}
var onSecretCreated = EventDefinition(
  "wix.velo.secrets_vault.v1.secret_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onSecretDeleted = EventDefinition(
  "wix.velo.secrets_vault.v1.secret_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onSecretUpdated = EventDefinition(
  "wix.velo.secrets_vault.v1.secret_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/velo-secrets-vault-v1-secret-secrets.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var getSecretValue4 = /* @__PURE__ */ createRESTModule(getSecretValue3);
var listSecretInfo4 = /* @__PURE__ */ createRESTModule(listSecretInfo3);
var createSecret4 = /* @__PURE__ */ createRESTModule(createSecret3);
var deleteSecret4 = /* @__PURE__ */ createRESTModule(deleteSecret3);
var updateSecret3 = /* @__PURE__ */ createRESTModule(updateSecret2);
var onSecretCreated2 = createEventModule(onSecretCreated);
var onSecretDeleted2 = createEventModule(onSecretDeleted);
var onSecretUpdated2 = createEventModule(onSecretUpdated);
export {
  WebhookIdentityType,
  createSecret4 as createSecret,
  deleteSecret4 as deleteSecret,
  getSecretValue4 as getSecretValue,
  listSecretInfo4 as listSecretInfo,
  onSecretCreated2 as onSecretCreated,
  onSecretDeleted2 as onSecretDeleted,
  onSecretUpdated2 as onSecretUpdated,
  updateSecret3 as updateSecret
};
//# sourceMappingURL=index.mjs.map