type Primitive = number | string | boolean | bigint | symbol | null | undefined;
type Tags = Record<string, Primitive>;
type Context = Record<string, unknown>;
type Contexts = Record<string, Context | undefined>;

interface SpanContextData {
    traceId: string;
    spanId: string;
}
interface Span {
    spanContext(): SpanContextData;
    end(): void;
}
interface SpanOptions {
    name: string;
    tags?: Tags;
}
interface Breadcrumb {
    type?: string;
    category?: string;
    message: string;
    level?: 'info' | 'warning' | 'error';
    data?: Record<string, unknown>;
}
interface CaptureContext {
    level?: 'info' | 'warning' | 'error';
    tags?: Tags;
    contexts?: Contexts;
}
interface MonitoringClient {
    /**
     * Captures an exception event and sends it to Sentry.
     * @param error The error to capture
     * @param captureContext Optional additional data to attach to the Sentry e vent.
     * @returns the id of the captured Sentry event.
     */
    captureException(error: unknown, captureContext?: CaptureContext): string;
    /**
     * Captures a message event and sends it to Sentry.
     * @param message The message to capture
     * @param captureContext Define the level of the message or pass in additional data to attach to the message.
     * @returns the id of the captured message.
     */
    captureMessage(message: string, captureContext?: CaptureContext): string;
    /**
     * Wraps a function with a span and finishes the span after the function is done. The created span is the active span and will be used as parent by other spans created inside the function, as long as the function is executed while the scope is active.
     * @param spanOptions The options for the span
     * @param callback The function to wrap with a span
     * @returns The return value of the callback
     */
    startSpan<T>(spanOptions: SpanOptions, callback: (span: Span | undefined) => T): T;
    /**
     * Records a new breadcrumb which will be attached to future events.
     * Breadcrumbs will be added to subsequent events to provide more context on user's actions prior to an error or crash.
     * @param breadcrumb The breadcrumb to record.
     */
    addBreadcrumb(breadcrumb: Breadcrumb): void;
}

type HostModule<T, H extends Host$1> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host$1<Environment = unknown> = {
    channel?: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
    /**
     * Optional name of the environment, use for logging
     */
    name?: string;
    /**
     * Optional bast url to use for API requests, for example `www.wixapis.com`
     */
    apiBaseUrl?: string;
    /**
     * Optional function to get a monitoring client
     */
    getMonitoringClient?: () => MonitoringClient;
    /**
     * Possible data to be provided by every host, for cross cutting concerns
     * like internationalization, billing, etc.
     */
    essentials?: {
        /**
         * The language of the currently viewed session
         */
        language?: string;
        /**
         * The locale of the currently viewed session
         */
        locale?: string;
        /**
         * Any headers that should be passed through to the API requests
         */
        passThroughHeaders?: Record<string, string>;
    };
};

type HTTPMethod = 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
    fetchWithAuth: typeof fetch;
    wixAPIFetch: (relativeUrl: string, options: RequestInit) => Promise<Response>;
    getActiveToken?: () => string | undefined;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: HTTPMethod;
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;
type EventDefinition<Payload = unknown, Type extends string = string> = {
    __type: 'event-definition';
    type: Type;
    isDomainEvent?: boolean;
    transformations?: (envelope: unknown) => Payload;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean, transformations?: (envelope: any) => unknown): <Payload = unknown>() => EventDefinition<Payload, Type>;
type EventHandler<T extends EventDefinition> = (payload: T['__payload']) => void | Promise<void>;
type BuildEventDefinition<T extends EventDefinition<any, string>> = (handler: EventHandler<T>) => void;

type ServicePluginMethodInput = {
    request: any;
    metadata: any;
};
type ServicePluginContract = Record<string, (payload: ServicePluginMethodInput) => unknown | Promise<unknown>>;
type ServicePluginMethodMetadata = {
    name: string;
    primaryHttpMappingPath: string;
    transformations: {
        fromREST: (...args: unknown[]) => ServicePluginMethodInput;
        toREST: (...args: unknown[]) => unknown;
    };
};
type ServicePluginDefinition<Contract extends ServicePluginContract> = {
    __type: 'service-plugin-definition';
    componentType: string;
    methods: ServicePluginMethodMetadata[];
    __contract: Contract;
};
declare function ServicePluginDefinition<Contract extends ServicePluginContract>(componentType: string, methods: ServicePluginMethodMetadata[]): ServicePluginDefinition<Contract>;
type BuildServicePluginDefinition<T extends ServicePluginDefinition<any>> = (implementation: T['__contract']) => void;
declare const SERVICE_PLUGIN_ERROR_TYPE = "wix_spi_error";

type RequestContext = {
    isSSR: boolean;
    host: string;
    protocol?: string;
};
type ResponseTransformer = (data: any, headers?: any) => any;
/**
 * Ambassador request options types are copied mostly from AxiosRequestConfig.
 * They are copied and not imported to reduce the amount of dependencies (to reduce install time).
 * https://github.com/axios/axios/blob/3f53eb6960f05a1f88409c4b731a40de595cb825/index.d.ts#L307-L315
 */
type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
type AmbassadorRequestOptions<T = any> = {
    _?: T;
    url?: string;
    method?: Method;
    params?: any;
    data?: any;
    transformResponse?: ResponseTransformer | ResponseTransformer[];
};
type AmbassadorFactory<Request, Response> = (payload: Request) => ((context: RequestContext) => AmbassadorRequestOptions<Response>) & {
    __isAmbassador: boolean;
};
type AmbassadorFunctionDescriptor<Request = any, Response = any> = AmbassadorFactory<Request, Response>;
type BuildAmbassadorFunction<T extends AmbassadorFunctionDescriptor> = T extends AmbassadorFunctionDescriptor<infer Request, infer Response> ? (req: Request) => Promise<Response> : never;

declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const emptyObjectSymbol: unique symbol;

/**
Represents a strictly empty plain object, the `{}` value.

When you annotate something as the type `{}`, it can be anything except `null` and `undefined`. This means that you cannot use `{}` to represent an empty plain object ([read more](https://stackoverflow.com/questions/47339869/typescript-empty-object-and-any-difference/52193484#52193484)).

@example
```
import type {EmptyObject} from 'type-fest';

// The following illustrates the problem with `{}`.
const foo1: {} = {}; // Pass
const foo2: {} = []; // Pass
const foo3: {} = 42; // Pass
const foo4: {} = {a: 1}; // Pass

// With `EmptyObject` only the first case is valid.
const bar1: EmptyObject = {}; // Pass
const bar2: EmptyObject = 42; // Fail
const bar3: EmptyObject = []; // Fail
const bar4: EmptyObject = {a: 1}; // Fail
```

Unfortunately, `Record<string, never>`, `Record<keyof any, never>` and `Record<never, never>` do not work. See {@link https://github.com/sindresorhus/type-fest/issues/395 #395}.

@category Object
*/
type EmptyObject = {[emptyObjectSymbol]?: never};

/**
Returns a boolean for whether the two given types are equal.

@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650
@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796

Use-cases:
- If you want to make a conditional branch based on the result of a comparison of two types.

@example
```
import type {IsEqual} from 'type-fest';

// This type returns a boolean for whether the given array includes the given item.
// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.
type Includes<Value extends readonly any[], Item> =
	Value extends readonly [Value[0], ...infer rest]
		? IsEqual<Value[0], Item> extends true
			? true
			: Includes<rest, Item>
		: false;
```

@category Type Guard
@category Utilities
*/
type IsEqual<A, B> =
	(<G>() => G extends A & G | G ? 1 : 2) extends
	(<G>() => G extends B & G | G ? 1 : 2)
		? true
		: false;

/**
Filter out keys from an object.

Returns `never` if `Exclude` is strictly equal to `Key`.
Returns `never` if `Key` extends `Exclude`.
Returns `Key` otherwise.

@example
```
type Filtered = Filter<'foo', 'foo'>;
//=> never
```

@example
```
type Filtered = Filter<'bar', string>;
//=> never
```

@example
```
type Filtered = Filter<'bar', 'foo'>;
//=> 'bar'
```

@see {Except}
*/
type Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);

type ExceptOptions = {
	/**
	Disallow assigning non-specified properties.

	Note that any omitted properties in the resulting type will be present in autocomplete as `undefined`.

	@default false
	*/
	requireExactProps?: boolean;
};

/**
Create a type from an object type without certain keys.

We recommend setting the `requireExactProps` option to `true`.

This type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.

This type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).

@example
```
import type {Except} from 'type-fest';

type Foo = {
	a: number;
	b: string;
};

type FooWithoutA = Except<Foo, 'a'>;
//=> {b: string}

const fooWithoutA: FooWithoutA = {a: 1, b: '2'};
//=> errors: 'a' does not exist in type '{ b: string; }'

type FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;
//=> {a: number} & Partial<Record<"b", never>>

const fooWithoutB: FooWithoutB = {a: 1, b: '2'};
//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.

// The `Omit` utility type doesn't work when omitting specific keys from objects containing index signatures.

// Consider the following example:

type UserData = {
	[metadata: string]: string;
	email: string;
	name: string;
	role: 'admin' | 'user';
};

// `Omit` clearly doesn't behave as expected in this case:
type PostPayload = Omit<UserData, 'email'>;
//=> type PostPayload = { [x: string]: string; [x: number]: string; }

// In situations like this, `Except` works better.
// It simply removes the `email` key while preserving all the other keys.
type PostPayload = Except<UserData, 'email'>;
//=> type PostPayload = { [x: string]: string; name: string; role: 'admin' | 'user'; }
```

@category Object
*/
type Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {
	[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];
} & (Options['requireExactProps'] extends true
	? Partial<Record<KeysType, never>>
	: {});

/**
Returns a boolean for whether the given type is `never`.

@link https://github.com/microsoft/TypeScript/issues/31751#issuecomment-498526919
@link https://stackoverflow.com/a/53984913/10292952
@link https://www.zhenghao.io/posts/ts-never

Useful in type utilities, such as checking if something does not occur.

@example
```
import type {IsNever, And} from 'type-fest';

// https://github.com/andnp/SimplyTyped/blob/master/src/types/strings.ts
type AreStringsEqual<A extends string, B extends string> =
	And<
		IsNever<Exclude<A, B>> extends true ? true : false,
		IsNever<Exclude<B, A>> extends true ? true : false
	>;

type EndIfEqual<I extends string, O extends string> =
	AreStringsEqual<I, O> extends true
		? never
		: void;

function endIfEqual<I extends string, O extends string>(input: I, output: O): EndIfEqual<I, O> {
	if (input === output) {
		process.exit(0);
	}
}

endIfEqual('abc', 'abc');
//=> never

endIfEqual('abc', '123');
//=> void
```

@category Type Guard
@category Utilities
*/
type IsNever<T> = [T] extends [never] ? true : false;

/**
An if-else-like type that resolves depending on whether the given type is `never`.

@see {@link IsNever}

@example
```
import type {IfNever} from 'type-fest';

type ShouldBeTrue = IfNever<never>;
//=> true

type ShouldBeBar = IfNever<'not never', 'foo', 'bar'>;
//=> 'bar'
```

@category Type Guard
@category Utilities
*/
type IfNever<T, TypeIfNever = true, TypeIfNotNever = false> = (
	IsNever<T> extends true ? TypeIfNever : TypeIfNotNever
);

/**
Extract the keys from a type where the value type of the key extends the given `Condition`.

Internally this is used for the `ConditionalPick` and `ConditionalExcept` types.

@example
```
import type {ConditionalKeys} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c?: string;
	d: {};
}

type StringKeysOnly = ConditionalKeys<Example, string>;
//=> 'a'
```

To support partial types, make sure your `Condition` is a union of undefined (for example, `string | undefined`) as demonstrated below.

@example
```
import type {ConditionalKeys} from 'type-fest';

type StringKeysAndUndefined = ConditionalKeys<Example, string | undefined>;
//=> 'a' | 'c'
```

@category Object
*/
type ConditionalKeys<Base, Condition> =
{
	// Map through all the keys of the given base type.
	[Key in keyof Base]-?:
	// Pick only keys with types extending the given `Condition` type.
	Base[Key] extends Condition
	// Retain this key
	// If the value for the key extends never, only include it if `Condition` also extends never
		? IfNever<Base[Key], IfNever<Condition, Key, never>, Key>
	// Discard this key since the condition fails.
		: never;
	// Convert the produced object into a union type of the keys which passed the conditional test.
}[keyof Base];

/**
Exclude keys from a shape that matches the given `Condition`.

This is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.

@example
```
import type {Primitive, ConditionalExcept} from 'type-fest';

class Awesome {
	name: string;
	successes: number;
	failures: bigint;

	run() {}
}

type ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;
//=> {run: () => void}
```

@example
```
import type {ConditionalExcept} from 'type-fest';

interface Example {
	a: string;
	b: string | number;
	c: () => void;
	d: {};
}

type NonStringKeysOnly = ConditionalExcept<Example, string>;
//=> {b: string | number; c: () => void; d: {}}
```

@category Object
*/
type ConditionalExcept<Base, Condition> = Except<
Base,
ConditionalKeys<Base, Condition>
>;

/**
 * Descriptors are objects that describe the API of a module, and the module
 * can either be a REST module or a host module.
 * This type is recursive, so it can describe nested modules.
 */
type Descriptors = RESTFunctionDescriptor | AmbassadorFunctionDescriptor | HostModule<any, any> | EventDefinition<any> | ServicePluginDefinition<any> | {
    [key: string]: Descriptors | PublicMetadata | any;
};
/**
 * This type takes in a descriptors object of a certain Host (including an `unknown` host)
 * and returns an object with the same structure, but with all descriptors replaced with their API.
 * Any non-descriptor properties are removed from the returned object, including descriptors that
 * do not match the given host (as they will not work with the given host).
 */
type BuildDescriptors<T extends Descriptors, H extends Host$1<any> | undefined, Depth extends number = 5> = {
    done: T;
    recurse: T extends {
        __type: typeof SERVICE_PLUGIN_ERROR_TYPE;
    } ? never : T extends AmbassadorFunctionDescriptor ? BuildAmbassadorFunction<T> : T extends RESTFunctionDescriptor ? BuildRESTFunction<T> : T extends EventDefinition<any> ? BuildEventDefinition<T> : T extends ServicePluginDefinition<any> ? BuildServicePluginDefinition<T> : T extends HostModule<any, any> ? HostModuleAPI<T> : ConditionalExcept<{
        [Key in keyof T]: T[Key] extends Descriptors ? BuildDescriptors<T[Key], H, [
            -1,
            0,
            1,
            2,
            3,
            4,
            5
        ][Depth]> : never;
    }, EmptyObject>;
}[Depth extends -1 ? 'done' : 'recurse'];
type PublicMetadata = {
    PACKAGE_NAME?: string;
};

declare global {
    interface ContextualClient {
    }
}
/**
 * A type used to create concerete types from SDK descriptors in
 * case a contextual client is available.
 */
type MaybeContext<T extends Descriptors> = globalThis.ContextualClient extends {
    host: Host$1;
} ? BuildDescriptors<T, globalThis.ContextualClient['host']> : T;
declare global {
    /**
     * A global interface to set the exposure toggle for the SDK.
     * @example
     * ```ts
     * declare global {
     *  interface SDKExposureToggle {
     *    alpha: true;
     *  }
     * }
     */
    interface SDKExposureToggle {
    }
}

type WixNamespace = string;
interface Channel<Environment> {
    observeState(callback: (props: unknown, environment: Environment) => unknown): {
        disconnect: () => void;
    } | Promise<{
        disconnect: () => void;
    }>;
}
interface WebsiteChannel extends Channel<unknown> {
    invoke: (args: {
        namespace: WixNamespace;
        method: string;
        args: unknown[];
    }) => Promise<unknown>;
    getAccessToken: () => Promise<string>;
}
type Host<Environment = unknown> = {
    channel: WebsiteChannel;
    environment?: Environment;
};

/**
 * The ConsentPolicy API manages site visitor cookie preferences and 3rd-party data transfers for GDPR and CCPA compliance.
 *
 * >**Note:** The APIs in `wix-window-frontend.ConsentPolicy` can only be used in frontend code.
 *
 * The consent policy helps you comply with [GDPR](https://support.wix.com/en/article/preparing-your-wix-site-for-the-gdpr) and [CCPA](https://support.wix.com/en/article/preparing-your-wix-site-for-ccpa) regulations, and allows site visitors to
 * control their information.
 *
 * Set up the site consent policy and cookie consent banners in
 * a site's [Privacy Center](https://www.wix.com/my-account/site-selector/?buttonText=Open%20Privacy%20Center&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcookie-consent-settings-app?referralInfo=corvid-docs).
 *
 *  To use the ConsentPolicy API, import `{ consentPolicy }` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import { consentPolicy } from 'wix-window-frontend';
 *    ```
 */
interface ConsentPolicy {
    /**
     * Gets the site visitor's consent policy regarding allowed cookies and 3rd-party data transfers for GDPR or CCPA compliance.
     *
     * Retrieves the site visitor's consent policy details, including which cookies are allowed and whether data transfer to 3rd parties is permitted.
     *
     * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
     */
    getCurrentConsentPolicy(): Promise<PolicyDetails>;
    /**
     * Triggered when a site visitor's consent policy was changed using
     * [`setConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/set-consent-policy) or reset using
     * [`resetConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/reset-consent-policy).
     *
     * Use the `onConsentPolicyChanged()` method for code you want to run after
     * the site visitor's current consent policy was changed using
     * [`setConsentPolicy()`](#setConsentPolicy) or reset using
     * [`resetConsentPolicy()`](#resetConsentPolicy).
     *
     *
     * Usually, you want to call the `onConsentPolicyChanged()` method in the **masterpage.js** file so that the `onConsentPolicyChanged()` event handler runs no matter which
     * page on your site is used to change the policy.
     * @param handler - The name of the function or
     *  the function expression to run when the consent policy is changed.
     * @requiredField handler
     * @servicePath wix-window-frontend.ConsentPolicy.ConsentPolicyChangedHandler
     */
    onConsentPolicyChanged(handler: ConsentPolicyChangedHandler): Promise<void>;
    /**
     * Removes the current policy from the site visitor's browser
     * and resets the site visitor's consent policy to the default policy for the site.
     *
     * @returns Fulfilled - When the reset is complete.
     * Rejected - Error message.
     */
    resetConsentPolicy(): Promise<void>;
    /**
     * Sets the current site visitor's consent policy
     * regarding allowed cookies and data transfer to 3rd parties,
     * such as for GDPR or CCPA purposes.
     *
     * You can use the [`onConsentPolicyChanged()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/on-consent-policy-changed) event to listen for
     * changes made when a site visitor changes their consent policy with `setConsentPolicy()`. Handle
     * the policy change accordingly in the event handler.
     * Changes to the consent policy take affect after the page is refreshed.
     * @param policy - An object representing the cookies of the site visitor's consent policy.
     * @requiredField policy
     * @servicePath wix-window-frontend.ConsentPolicy.Policy
     * @returns Fulfilled - All the details of the site visitor's consent policy, including if the the current policy is the default site policy and the policy's allowed cookies.
     * Rejected - Error message.
     * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
     */
    setConsentPolicy(policy: Policy): Promise<PolicyDetails>;
}
/**
 * The event that occurred when the consent policy changed.
 */
interface ConsentPolicyChangedEvent {
}
/**
 * The current site visitor's consent policy settings.
 *
 * An object containing the consent policy cookie settings, by type, of the site visitor currently viewing the site.
 */
interface Policy {
    /**
     * Consent for mandatory cookies for Wix websites, such as for security cookies. Wix places these cookies on the site visitor's device. These cookies don't require site visitor consent. Always `true`.
     * @requiredField essential
     */
    essential: boolean;
    /**
     * Consent for cookies placed on the site visitor's device that "remember" their user settings to improve user experience. For example, an indication that the user dismissed a popup. Default: `true`.
     * @requiredField functional
     */
    functional: boolean;
    /**
     * Consent for cookies used for analytics, such as Wix analytics, Google Analytics, Yandex Metrica, and so on. Default: `true`.
     * @requiredField analytics
     */
    analytics: boolean;
    /**
     * Consent for cookies used for advertising purposes. This includes 3rd-party scripts and pixels that may potentially place advertising cookies on the device. For example, Twitter page view and Facebook Pixel. Default: `true`.
     * @requiredField advertising
     */
    advertising: boolean;
    /**
     * Consent for a site visitor's personal data to be transferred to a 3rd party. For example, Google Analytics, Facebook Pixel, and FullStory. Default: `true`.
     * @requiredField dataToThirdParty
     */
    dataToThirdParty: boolean;
}
/**
 * The complete details of the current site visitor's consent policy.
 *
 * An object containing all the details about the consent policy of the site visitor currently viewing the site.
 */
interface PolicyDetails {
    /**
     * Whether the current consent policy is the default one you set. If `true`, either the site visitor hasn't set a policy, or you’ve reset it to its default settings.
     * @requiredField defaultPolicy
     */
    defaultPolicy: boolean;
    /**
     * An object representing the site visitor's current consent policy.
     * @requiredField policy
     * @servicePath wix-window-frontend.ConsentPolicy.Policy
     */
    policy: Policy;
    /**
     * The date the consent policy was set, if a cookie defining the current policy exists in the browser. Otherwise, it's undefined.
     */
    createdDate?: Date;
}
/**
 * Function that runs when a site visitor's consent policy was changed using [`setConsentPolicy()`](#setConsentPolicy).
 * @param event - The event that occurred when the consent policy changed.
 * @requiredField event
 * @servicePath wix-window-frontend.ConsentPolicy.ConsentPolicyChangedEvent
 */
type ConsentPolicyChangedHandler = (event: ConsentPolicyChangedEvent) => void;
/**
 * Gets the site visitor's consent policy regarding allowed cookies and 3rd-party data transfers for GDPR or CCPA compliance.
 *
 * Retrieves the site visitor's consent policy details, including which cookies are allowed and whether data transfer to 3rd parties is permitted.
 *
 * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
 */
declare function getCurrentConsentPolicy(): Promise<PolicyDetails>;
/**
 * Triggered when a site visitor's consent policy was changed using
 * [`setConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/set-consent-policy) or reset using
 * [`resetConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/reset-consent-policy).
 *
 * Use the `onConsentPolicyChanged()` method for code you want to run after
 * the site visitor's current consent policy was changed using
 * [`setConsentPolicy()`](#setConsentPolicy) or reset using
 * [`resetConsentPolicy()`](#resetConsentPolicy).
 *
 *
 * Usually, you want to call the `onConsentPolicyChanged()` method in the **masterpage.js** file so that the `onConsentPolicyChanged()` event handler runs no matter which
 * page on your site is used to change the policy.
 * @param handler - The name of the function or
 *  the function expression to run when the consent policy is changed.
 * @requiredField handler
 * @servicePath wix-window-frontend.ConsentPolicy.ConsentPolicyChangedHandler
 */
declare function onConsentPolicyChanged(handler: ConsentPolicyChangedHandler): Promise<void>;
/**
 * Removes the current policy from the site visitor's browser
 * and resets the site visitor's consent policy to the default policy for the site.
 *
 * @returns Fulfilled - When the reset is complete.
 * Rejected - Error message.
 */
declare function resetConsentPolicy(): Promise<void>;
/**
 * Sets the current site visitor's consent policy
 * regarding allowed cookies and data transfer to 3rd parties,
 * such as for GDPR or CCPA purposes.
 *
 * You can use the [`onConsentPolicyChanged()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/on-consent-policy-changed) event to listen for
 * changes made when a site visitor changes their consent policy with `setConsentPolicy()`. Handle
 * the policy change accordingly in the event handler.
 * Changes to the consent policy take affect after the page is refreshed.
 * @param policy - An object representing the cookies of the site visitor's consent policy.
 * @requiredField policy
 * @servicePath wix-window-frontend.ConsentPolicy.Policy
 * @returns Fulfilled - All the details of the site visitor's consent policy, including if the the current policy is the default site policy and the policy's allowed cookies.
 * Rejected - Error message.
 * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
 */
declare function setConsentPolicy(policy: Policy): Promise<PolicyDetails>;

type consentPolicySdkModuleRuntime_ConsentPolicy = ConsentPolicy;
type consentPolicySdkModuleRuntime_ConsentPolicyChangedEvent = ConsentPolicyChangedEvent;
type consentPolicySdkModuleRuntime_ConsentPolicyChangedHandler = ConsentPolicyChangedHandler;
type consentPolicySdkModuleRuntime_Policy = Policy;
type consentPolicySdkModuleRuntime_PolicyDetails = PolicyDetails;
declare const consentPolicySdkModuleRuntime_getCurrentConsentPolicy: typeof getCurrentConsentPolicy;
declare const consentPolicySdkModuleRuntime_onConsentPolicyChanged: typeof onConsentPolicyChanged;
declare const consentPolicySdkModuleRuntime_resetConsentPolicy: typeof resetConsentPolicy;
declare const consentPolicySdkModuleRuntime_setConsentPolicy: typeof setConsentPolicy;
declare namespace consentPolicySdkModuleRuntime {
  export { type consentPolicySdkModuleRuntime_ConsentPolicy as ConsentPolicy, type consentPolicySdkModuleRuntime_ConsentPolicyChangedEvent as ConsentPolicyChangedEvent, type consentPolicySdkModuleRuntime_ConsentPolicyChangedHandler as ConsentPolicyChangedHandler, type consentPolicySdkModuleRuntime_Policy as Policy, type consentPolicySdkModuleRuntime_PolicyDetails as PolicyDetails, consentPolicySdkModuleRuntime_getCurrentConsentPolicy as getCurrentConsentPolicy, consentPolicySdkModuleRuntime_onConsentPolicyChanged as onConsentPolicyChanged, consentPolicySdkModuleRuntime_resetConsentPolicy as resetConsentPolicy, consentPolicySdkModuleRuntime_setConsentPolicy as setConsentPolicy };
}

type Methods$5<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const consentPolicyRuntime: MaybeContext<HostModule<Methods$5<typeof consentPolicySdkModuleRuntime>, Host> & Methods$5<typeof consentPolicySdkModuleRuntime>>;

/**
 * An object that defines the location.
 */
interface Coordinates {
    /**
     * The position's latitude in decimal degrees.
     * @requiredField latitude
     */
    latitude: number;
    /**
     * The position's longitude in decimal degrees.
     * @requiredField longitude
     */
    longitude: number;
    /**
     * The position's altitude in meters, relative to sea level. This value may be null if the browser cannot provide the data.
     * @requiredField altitude
     */
    altitude: number;
    /**
     * The accuracy in meters of the `latitude` and `longitude` properties.
     * @requiredField accuracy
     */
    accuracy: number;
    /**
     * The accuracy in meters of the `altitude` property. This value may be null.
     * @requiredField altitudeAccuracy
     */
    altitudeAccuracy: number;
    /**
     * The direction in degrees in which the device is traveling. It indicates how far off from heading true north the device is. If `speed` is `0`, the heading is `NaN`. This value may be null if the browser can't provide the data.
     * @requiredField heading
     */
    heading: number;
    /**
     * The velocity in meters per second of the device. This value may be null if the browser can't provide the data.
     * @requiredField speed
     */
    speed: number;
}
/**
 * An object returned by the `getCurrentGeolocation()` function that contains information about the current geolocation.
 */
interface CurrentGeolocation {
    /**
     * The geolocation timestamp representing the date and time at which the location was retrieved.
     * @requiredField timestamp
     */
    timestamp: string;
    /**
     * An object that defines the location.
     * @requiredField coords
     * @servicePath wix-window-frontend.Coordinates
     */
    coords: Coordinates;
}
/**
 * A custom parameter used when sending a CustomEvent track event.
 */
interface CustomType {
}
/**
 * An object containing the size of the actual body of the page, which may be larger or smaller than the current window.
 */
interface DocumentSize {
    /**
     * The height of the page body.
     * @requiredField height
     */
    height: number;
    /**
     * The width of the page body.
     * @requiredField width
     */
    width: number;
}
/**
 * An object used for providing options for the `lightbox.open()` method.
 */
interface LightboxOpenOptions {
    /**
     * The extension ID of the app's lightbox extension, which you can find in the Extensions page of your app dashboard.
     * @requiredField extensionId
     */
    extensionId: string;
    /**
     * Data to pass to the lightbox.
     */
    data?: object;
}
/**
 * An object used when opening a modal window.
 */
interface OpenModalOptions {
    /**
     * Width of the modal window.
     * @requiredField width
     */
    width: number;
    /**
     * Height of the modal window.
     * @requiredField height
     */
    height: number;
}
/**
 * An object containing the scroll offset of the page within the window from the top-left corner.
 */
interface ScrollOffset {
    /**
     * The horizontal scroll offset of the page within the window from the left.
     * @requiredField x
     */
    x: number;
    /**
     * The vertical scroll offset of the page within the window from the top.
     * @requiredField y
     */
    y: number;
}
/**
 * An object used for providing options for the `scrollTo()` method.
 */
interface ScrollToOptions {
    /**
     * Indicates whether to scroll with an animation. Defaults to `true`.
     * @requiredField scrollAnimation
     */
    scrollAnimation: boolean;
}
/**
 * An object containing the size of the viewable area of the current browser window.
 */
interface WindowSize {
    /**
     * The height of the window.
     * @requiredField height
     */
    height: number;
    /**
     * The width of the window.
     * @requiredField width
     */
    width: number;
}
/**
 * An object returned by the `getBoundingRect()` method that contains information about a window's size, document's size, and current scroll position.
 */
interface WindowSizeInfo {
    /**
     * An object containing the size of the viewable area of the current browser window.
     * @requiredField window
     * @servicePath wix-window-frontend.WindowSize
     */
    window: WindowSize;
    /**
     * An object containing the size of the actual body of the page, which may be larger or smaller than the current window.
     * @requiredField document
     * @servicePath wix-window-frontend.DocumentSize
     */
    document: DocumentSize;
    /**
     * An object containing the scroll offset of the page within the window from the top-left corner.
     * @requiredField scroll
     * @servicePath wix-window-frontend.ScrollOffset
     */
    scroll: ScrollOffset;
}
/**
 * Objects used when calling the [`trackEvent()`](window.html#trackEvent) function.
 */
interface trackingParameters {
    /**
     * Object used for `AddPaymentInfo` events.
     * @servicePath wix-window-frontend.trackingParametersAddPaymentInfoEvent
     */
    AddPaymentInfoEvent?: trackingParametersAddPaymentInfoEvent;
    /**
     * Object used for `AddProductImpression` events.
     * @servicePath wix-window-frontend.trackingParametersAddProductImpressionEvent
     */
    AddProductImpressionEvent?: trackingParametersAddProductImpressionEvent;
    /**
     * Object used for `AddToCart` events.
     * @servicePath wix-window-frontend.trackingParametersAddToCartEvent
     */
    AddToCartEvent?: trackingParametersAddToCartEvent;
    /**
     * Object used for `CheckoutStep` events.
     * @servicePath wix-window-frontend.trackingParametersCheckoutStepEvent
     */
    CheckoutStepEvent?: trackingParametersCheckoutStepEvent;
    /**
     * Object used for `ClickProduct` events.
     * @servicePath wix-window-frontend.trackingParametersClickProductEvent
     */
    ClickProductEvent?: trackingParametersClickProductEvent;
    /**
     * Object used for `InitiateCheckout` events.
     * @servicePath wix-window-frontend.trackingParametersInitiateCheckoutEvent
     */
    InitiateCheckoutEvent?: trackingParametersInitiateCheckoutEvent;
    /**
     * Object used for `Lead` events.
     * @servicePath wix-window-frontend.trackingParametersLeadEvent
     */
    LeadEvent?: trackingParametersLeadEvent;
    /**
     * Object used for `Purchase` events.
     * @servicePath wix-window-frontend.trackingParametersPurchaseEvent
     */
    PurchaseEvent?: trackingParametersPurchaseEvent;
    /**
     * Object used for `RemoveFromCart` events.
     * @servicePath wix-window-frontend.trackingParametersRemoveFromCartEvent
     */
    RemoveFromCartEvent?: trackingParametersRemoveFromCartEvent;
    /**
     * Object used for `StartPayment` events.
     * @servicePath wix-window-frontend.trackingParametersStartPaymentEvent
     */
    StartPaymentEvent?: trackingParametersStartPaymentEvent;
    /**
     * Object used for `ViewContent` events.
     * @servicePath wix-window-frontend.trackingParametersViewContentEvent
     */
    ViewContentEvent?: trackingParametersViewContentEvent;
    /**
     * Object used for custom events.
     * @servicePath wix-window-frontend.trackingParametersCustomEvent
     */
    CustomEvent?: trackingParametersCustomEvent;
}
/**
 * An object used when sending an `AddPaymentInfo` track event.
 *
 * Objects used when calling the [`trackEvent()`](window.html#trackEvent) function.
 */
interface trackingParametersAddPaymentInfoEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Payment type. For example, `Visa` or `PayPal`.
     */
    option?: string;
}
/**
 * An object used when sending an AddProductImpression track event.
 */
interface trackingParametersAddProductImpressionEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * `key:value` pairs describing the products.
     * @requiredField contents
     * @servicePath wix-window-frontend.trackingParametersAddProductImpressionEventContents
     */
    contents: trackingParametersAddProductImpressionEventContents[];
}
/**
 * An object used when sending an AddProductImpression track event.
 */
interface trackingParametersAddProductImpressionEventContents {
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Stock-keeping unit for the product.
     */
    sku?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * List or collection the product is part of. For example, `Product Gallery` or `Search Results`.
     */
    list?: string;
    /**
     * Position of the product within a list or collection.
     */
    position?: string;
}
/**
 * An object used when sending an AddToCart track event.
 */
interface trackingParametersAddToCartEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Stock-keeping unit for the product.
     */
    sku?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * List or collection the product is part of. For example, `Product Gallery` or `Search Results`.
     */
    position?: string;
    /**
     * Product quantity.
     */
    quantity?: number;
}
/**
 * An object used when sending an CheckoutStep track event.
 */
interface trackingParametersCheckoutStepEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Number of the step in the checkout process.
     * For example `2` for `addPaymentInfo` in a checkout flow that consists of the steps `StartPayment`, `addPaymentInfo`, and `Select Shipping`.
     */
    step?: string;
    /**
     * Action the visitor has taken in this step. For example, `Select Shipping`.
     */
    action?: string;
    /**
     * Option information on the checkout page. For example the selected payment method.
     */
    option?: string;
}
/**
 * An object used when sending a ClickProduct track event.
 */
interface trackingParametersClickProductEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Stock-keeping unit for the product.
     */
    sku?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * List or collection the product is part of. For example, `Product Gallery` or `Search Results`.
     */
    list?: string;
    /**
     * Position of the product within a list or collection.
     */
    position?: string;
}
/**
 * An object used when sending a CustomEvent track event.
 */
interface trackingParametersCustomEvent {
    /**
     * Event category. **Note:** Required for Google Analytics and Facebook Pixel.
     */
    eventCategory?: string;
    /**
     * Event action type. **Note:** Required for Google Analytics and Facebook Pixel.
     */
    eventAction?: string;
    /**
     * Event label.
     */
    eventLabel?: string;
    /**
     * Event value.
     */
    eventValue?: number;
    /**
     * Any number of custom properties.
     * @servicePath wix-window-frontend.CustomType
     */
    "*"?: CustomType;
}
/**
 * An object used when sending an InitiateCheckout track event.
 */
interface trackingParametersInitiateCheckoutEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * `key:value` pairs describing the products.
     * @requiredField contents
     * @servicePath wix-window-frontend.trackingParametersInitiateCheckoutEventContents
     */
    contents: trackingParametersInitiateCheckoutEventContents[];
}
/**
 * An object used when sending an InitiateCheckout track event.
 */
interface trackingParametersInitiateCheckoutEventContents {
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Stock-keeping unit for the product.
     */
    sku?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * Product quantity.
     */
    quantity?: number;
}
/**
 * An object used when sending a Lead track event.
 */
interface trackingParametersLeadEvent {
    /**
     * Lead category.
     */
    category?: string;
    /**
     * Lead action.
     */
    action?: string;
    /**
     * Lead label.
     */
    label?: string;
}
/**
 * An object used when sending a Purchase track event.
 */
interface trackingParametersPurchaseEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Transaction ID or order number.
     */
    id?: string;
    /**
     * Store name.
     */
    affiliation?: string;
    /**
     * Total purchase price. Includes tax and shipping fee.
     */
    revenue?: number;
    /**
     * Total tax.
     */
    tax?: number;
    /**
     * Shipping fee.
     */
    shipping?: number;
    /**
     * Applied coupon code.
     */
    coupon?: string;
    /**
     * `key:value` pairs describing the purchased products.
     * @requiredField contents
     * @servicePath wix-window-frontend.trackingParametersPurchaseEventContents
     */
    contents: trackingParametersPurchaseEventContents[];
}
/**
 * An object used when sending an Purchase track event.
 */
interface trackingParametersPurchaseEventContents {
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * Product quantity.
     */
    quantity?: number;
}
/**
 * An object used when sending a RemoveFromCart track event.
 */
interface trackingParametersRemoveFromCartEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * Position of the product within a list or collection.
     */
    position?: string;
    /**
     * Product quantity.
     */
    quantity?: number;
}
/**
 * An object used when sending an StartPayment track event.
 */
interface trackingParametersStartPaymentEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Payment type. For example, `Visa` or `PayPal`.
     */
    option?: string;
}
/**
 * An object used when sending a ViewContent track event.
 */
interface trackingParametersViewContentEvent {
    /**
     * Event origin. For example, `Music Player` or `Contact Form`.
     */
    origin?: string;
    /**
     * Product ID.
     */
    id?: string;
    /**
     * Stock-keeping unit for the product.
     */
    sku?: string;
    /**
     * Product name.
     * @requiredField name
     */
    name: string;
    /**
     * Product price.
     */
    price?: number;
    /**
     * Currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217). For example, `EUR`, `USD`, or `CAD`.
     */
    currency?: string;
    /**
     * Product category. For example, `Accessories/Watches`.
     */
    category?: string;
    /**
     * Brand name of the product.
     */
    brand?: string;
    /**
     * Product variant such as `green` or `large`.
     */
    variant?: string;
    /**
     * List or collection the product is part of. For example, `Product Gallery` or `Search Results`.
     */
    list?: string;
    /**
     * Position of the product within a list or collection.
     */
    position?: string;
}

/**
 * A [lightbox](https://support.wix.com/en/article/about-lightboxes) pops up on a site to grab a site visitor's attention.
 *
 * To learn more about lightboxes, see the [Hello Lightboxes](https://dev.wix.com/docs/coding-examples/getting-started/hello-world/hello-lightboxes) example page.
 *
 *  To use the Lightbox API, import `wixWindowFrontend` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import wixWindowFrontend from 'wix-window-frontend';
 *    ```
 *
 * The APIs in `wix-window-frontend.Lightbox` can only be used in frontend code.
 */
interface Lightbox {
    /**
     * Closes a lightbox.
     *
     * The `close()` method closes a lightbox and allows you to pass data from the lightbox to the page that opened the lightbox.
     *  If a lightbox is closed through the 'X' icon, close button, or lightbox overlay, data will not be returned to the original page.
     *
     *  To ensure data can be passed:
     *  1. Call this method to close a lightbox programmatically. For example, add a button with an `onClick` event handler that calls `close()`.
     *  2. Disable these closing options in the lightbox's settings under [**Set Triggers**](https://support.wix.com/en/article/studio-editor-using-lightboxes#setting-triggers-for-a-lightbox).
     * @param data - The data to pass back to the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox) method.
     */
    close(data?: object): Promise<void>;
    /**
     * Gets the data object that was passed to a lightbox.
     *
     * Retrieves the data object, if any, that was passed when a lightbox
     *  was opened via the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox) method.
     *  If a lightbox was opened in any other way, `getContext()` returns `undefined`.
     *
     *  To pass data to a lightbox, it must be opened programmatically using the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox)
     *  method. Lightboxes that are opened automatically on page load, or via a link from a page element don't receive passed data.
     *
     * @returns The data object that was passed to the lightbox.
     */
    getContext(): Promise<object>;
    /**
     * Opens a lightbox and optionally passes it the given data.
     *
     * The `open()` method opens an app lightbox by its extension ID and optionally passes data to it. Use this in your app's [site widget](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-widgets/about-site-widget-extensions) to trigger the app's lightbox. Learn more about [site lightbox extensions](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions).
     *
     *  To access the data passed to a lightbox, call [`getContext()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/get-context) in the lightbox's code.
     *
     *  If the lightbox is closed programmatically using [`close()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/close)
     *  and includes data, the promise returned by `open()` resolves with that data.
     *
     * Learn more about [opening and closing a lightbox from your app's code](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions#open-and-close-a-lightbox-from-your-apps-code)
     * @param options - Open lightbox options.
     * @servicePath wix-window-frontend.LightboxOpenOptions
     * @returns Fulfilled - Resolves with data returned from the lightbox when it is closed.
     * Rejected - The error that caused the rejection.
     */
    open(options?: LightboxOpenOptions): Promise<object>;
}
/**
 * Closes a lightbox.
 *
 * The `close()` method closes a lightbox and allows you to pass data from the lightbox to the page that opened the lightbox.
 *  If a lightbox is closed through the 'X' icon, close button, or lightbox overlay, data will not be returned to the original page.
 *
 *  To ensure data can be passed:
 *  1. Call this method to close a lightbox programmatically. For example, add a button with an `onClick` event handler that calls `close()`.
 *  2. Disable these closing options in the lightbox's settings under [**Set Triggers**](https://support.wix.com/en/article/studio-editor-using-lightboxes#setting-triggers-for-a-lightbox).
 * @param data - The data to pass back to the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox) method.
 */
declare function close(data?: object): Promise<void>;
/**
 * Gets the data object that was passed to a lightbox.
 *
 * Retrieves the data object, if any, that was passed when a lightbox
 *  was opened via the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox) method.
 *  If a lightbox was opened in any other way, `getContext()` returns `undefined`.
 *
 *  To pass data to a lightbox, it must be opened programmatically using the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox)
 *  method. Lightboxes that are opened automatically on page load, or via a link from a page element don't receive passed data.
 *
 * @returns The data object that was passed to the lightbox.
 */
declare function getContext(): Promise<object>;
/**
 * Opens a lightbox and optionally passes it the given data.
 *
 * The `open()` method opens an app lightbox by its extension ID and optionally passes data to it. Use this in your app's [site widget](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-widgets/about-site-widget-extensions) to trigger the app's lightbox. Learn more about [site lightbox extensions](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions).
 *
 *  To access the data passed to a lightbox, call [`getContext()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/get-context) in the lightbox's code.
 *
 *  If the lightbox is closed programmatically using [`close()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/close)
 *  and includes data, the promise returned by `open()` resolves with that data.
 *
 * Learn more about [opening and closing a lightbox from your app's code](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions#open-and-close-a-lightbox-from-your-apps-code)
 * @param options - Open lightbox options.
 * @servicePath wix-window-frontend.LightboxOpenOptions
 * @returns Fulfilled - Resolves with data returned from the lightbox when it is closed.
 * Rejected - The error that caused the rejection.
 */
declare function open(options?: LightboxOpenOptions): Promise<object>;

type lightboxSdkModuleRuntime_Lightbox = Lightbox;
declare const lightboxSdkModuleRuntime_close: typeof close;
declare const lightboxSdkModuleRuntime_getContext: typeof getContext;
declare const lightboxSdkModuleRuntime_open: typeof open;
declare namespace lightboxSdkModuleRuntime {
  export { type lightboxSdkModuleRuntime_Lightbox as Lightbox, lightboxSdkModuleRuntime_close as close, lightboxSdkModuleRuntime_getContext as getContext, lightboxSdkModuleRuntime_open as open };
}

type Methods$4<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const lightboxRuntime: MaybeContext<HostModule<Methods$4<typeof lightboxSdkModuleRuntime>, Host> & Methods$4<typeof lightboxSdkModuleRuntime>>;

/**
 * Sets or gets a site's current display language.
 *
 * Setting the `currentLanguage` property changes a site's display language.
 *  The current page is reloaded in the newly set language.
 *
 *  Set the current language using a two-letter language code. The code must
 *  represent one of [the languages set to show on a site](https://support.wix.com/en/article/managing-languages-in-a-multilingual-site).
 *  You can retrieve a site's languages and corresponding language codes using
 *  the [`siteLanguages`](#siteLanguages) property.
 *
 *  Getting the `currentLanguage` property gets the two-letter language code
 *  of a site's current display language.
 */
declare function currentLanguage(): Promise<string>;
/**
 * Gets whether a site has been set up to be shown in multiple languages.
 * @readonly
 */
declare function isEnabled(): Promise<boolean>;
/**
 * Gets information about a site's languages.
 *
 * The `siteLanguages` property returns an array of `SiteLanguage`
 * objects containing information about all the languages that a site is set
 * to display in.
 * @readonly
 * @servicePath wix-window-frontend.Multilingual.SiteLanguage
 */
declare function siteLanguages(): Promise<SiteLanguage[]>;
/**
 * The Multilingual API is used when working with languages in a multilingual site.
 *
 * A multilingual site is a site that is set up to display in more than one
 *  language. To learn more about enabling multilingual functionality in a
 *  site, see [About Wix Multilingual](https://support.wix.com/en/article/about-wix-multilingual).
 *
 *  To use the Multilingual API, import `wixWindowFrontend` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import wixWindowFrontend from 'wix-window-frontend';
 *    ```
 *
 * The APIs in `wix-window-frontend.Multilingual` can only be used in front-end code.
 */
interface Multilingual {
    /**
     * Sets or gets a site's current display language.
     *
     * Setting the `currentLanguage` property changes a site's display language.
     *  The current page is reloaded in the newly set language.
     *
     *  Set the current language using a two-letter language code. The code must
     *  represent one of [the languages set to show on a site](https://support.wix.com/en/article/managing-languages-in-a-multilingual-site).
     *  You can retrieve a site's languages and corresponding language codes using
     *  the [`siteLanguages`](#siteLanguages) property.
     *
     *  Getting the `currentLanguage` property gets the two-letter language code
     *  of a site's current display language.
     */
    currentLanguage: string;
    /**
     * Gets whether a site has been set up to be shown in multiple languages.
     * @readonly
     */
    readonly isEnabled: boolean;
    /**
     * Gets information about a site's languages.
     *
     * The `siteLanguages` property returns an array of `SiteLanguage`
     * objects containing information about all the languages that a site is set
     * to display in.
     * @readonly
     * @servicePath wix-window-frontend.Multilingual.SiteLanguage
     */
    readonly siteLanguages: SiteLanguage[];
}
/**
 * An object returned by the `siteLanguages` property that contains information about a site's languages.
 */
interface SiteLanguage {
    /**
     * The language's full name.
     * @requiredField name
     */
    name: string;
    /**
     * The language's locale code, which represents a set of language-related formatting preferences.
     * @requiredField locale
     */
    locale: string;
    /**
     * The two-letter or four-letter language code.
     * @requiredField languageCode
     */
    languageCode: string;
    /**
     * The language's three-letter country code.
     * @requiredField countryCode
     */
    countryCode: string;
    /**
     * Whether the language is a site's primary language.
     * @requiredField isPrimaryLanguage
     */
    isPrimaryLanguage: boolean;
}

type multilingualSdkModuleRuntime_Multilingual = Multilingual;
type multilingualSdkModuleRuntime_SiteLanguage = SiteLanguage;
declare const multilingualSdkModuleRuntime_currentLanguage: typeof currentLanguage;
declare const multilingualSdkModuleRuntime_isEnabled: typeof isEnabled;
declare const multilingualSdkModuleRuntime_siteLanguages: typeof siteLanguages;
declare namespace multilingualSdkModuleRuntime {
  export { type multilingualSdkModuleRuntime_Multilingual as Multilingual, type multilingualSdkModuleRuntime_SiteLanguage as SiteLanguage, multilingualSdkModuleRuntime_currentLanguage as currentLanguage, multilingualSdkModuleRuntime_isEnabled as isEnabled, multilingualSdkModuleRuntime_siteLanguages as siteLanguages };
}

type Methods$3<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const multilingualRuntime: MaybeContext<HostModule<Methods$3<typeof multilingualSdkModuleRuntime>, Host> & Methods$3<typeof multilingualSdkModuleRuntime>>;

/**
 * Gets the current environment the rendering process is running in.
 *
 * When possible, the rendering process is split in two in order to
 *  improve performance. The first cycle in the process happens in the server-side code
 *  and the second cycle happens in the client-side code. If not possible on the server-side, all rendering
 *  happens client-side.
 *
 *  The `env` property returns `"backend"` when rendering on the server
 *  and `"browser"` when rendering on the client.
 *
 *  Use the `env` property in the page's `onReady()`
 *  event handler to control where your code runs during the rendering
 *  process and to prevent code that causes side effects from running twice.
 *
 *  > **Note:** Rendering never occurs server-side when previewing a site.
 * @readonly
 */
declare function env(): Promise<string>;
/**
 * The Rendering API is used to control when code is run as a page is being loaded.
 *
 * When possible, the rendering process that runs when a page loads is
 *  split in two in order to improve performance. The first cycle in the process
 *  happens server-side and the second cycle happens client-side. When not
 *  possible, all rendering happens client-side.
 *
 *  Use the Rendering API to track when and where your code is running to
 *  selectively run parts of your code in certain conditions.
 *
 *  To use the Rendering API, import `wixWindowFrontend` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import wixWindowFrontend from 'wix-window-frontend';
 *    ```
 */
interface Rendering {
    /**
     * Gets the current environment the rendering process is running in.
     *
     * When possible, the rendering process is split in two in order to
     *  improve performance. The first cycle in the process happens in the server-side code
     *  and the second cycle happens in the client-side code. If not possible on the server-side, all rendering
     *  happens client-side.
     *
     *  The `env` property returns `"backend"` when rendering on the server
     *  and `"browser"` when rendering on the client.
     *
     *  Use the `env` property in the page's `onReady()`
     *  event handler to control where your code runs during the rendering
     *  process and to prevent code that causes side effects from running twice.
     *
     *  > **Note:** Rendering never occurs server-side when previewing a site.
     * @readonly
     */
    readonly env: string;
}

type renderingSdkModuleRuntime_Rendering = Rendering;
declare const renderingSdkModuleRuntime_env: typeof env;
declare namespace renderingSdkModuleRuntime {
  export { type renderingSdkModuleRuntime_Rendering as Rendering, renderingSdkModuleRuntime_env as env };
}

type Methods$2<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const renderingRuntime: MaybeContext<HostModule<Methods$2<typeof renderingSdkModuleRuntime>, Host> & Methods$2<typeof renderingSdkModuleRuntime>>;

/**
 * The Warmup Data API is used to optimize data loading for sites that render both on the server and in the browser,
 *  allowing costly data fetching operations to be done only once.
 *
 * To improve performance the [rendering process](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/frontend-code/page-rendering/about-page-rendering)
 *  is split in two when possible: once on the server and once in the browser. When that isn't
 *  possible, all rendering happens in the browser.
 *
 *  Because rendering can occur twice,
 *  it's preferred to perform time-consuming tasks only once, such as querying
 *  collections or working with the results of network requests from external sites.
 *  If possible, it's best to perform these operations on the server.
 *
 *  Requesting the warmup data from the server returns `undefined` in the following situations:
 *  + When browser rendering happens before server-side rendering.
 *  + When there is only browser rendering, for example in case visitors navigate from page to page within a site.
 *
 *  Page code must check for these scenarios and provide a fallback alternative for getting the data.
 *
 *  Use the Warmup Data API and `env` property  of the Rendering API
 *  to track when and where your code is running. This lets you selectively run parts of your code.
 *
 *  > **Notes:**
 *  > + Rendering never occurs server-side when previewing a site.
 *  > + Backend rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
 *
 *  To use the Warmup Data API, import `warmupData` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import { warmupData } from 'wix-window-frontend';
 *    ```
 */
interface WarmupData {
    /**
     * Gets data from server-side code for use in client-side code.
     *
     * A performance best practice is to get warmup data on the server for time-consuming operations, such as querying
     *  collections or working with the results of network requests from external sites. You can write code that
     *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
     *  performing the operations again.
     *
     *  Getting the warmup data retrieves data that was set on the server and makes the data accessible
     *  from the client-side.
     *
     *  You can only get warmup data in the client-side code.
     *  + This function returns `null` if called while on the server.
     *  + If this function runs before `warmupData.set()`, it returns `undefined`.
     *
     *  > **Notes:**
     *  > + Rendering never occurs server-side when previewing a site.
     *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
     * @param key - Name representing the data to return to the client-side. Until rendered, the data is `undefined`.
     * @requiredField key
     * @returns Returns one of the following:
     *   + The data corresponding to the `key` that was set with the `warmupData.set()` function in the backend.
     *   + `undefined` if not yet set.
     *   + `null` if called while on the server.
     */
    get(key: string): Promise<any>;
    /**
     * Sets data in server-side code for use in client-side code.
     *
     * A performance best practice is to set warmup data for time-consuming operations, such as querying
     *  collections or working with the results of network requests from external sites. You can write code that
     *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
     *  performing the operations again.
     *
     *  You can only set warmup data on the server. This function has no effect if called from client-side code.
     *
     *  > **Notes:**
     *  > + Rendering never occurs server-side when previewing a site.
     *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
     * @param key - Name representing the data to return to the client-side. Key names are unique within a site. Using the same key name within the same site code overwrites the corresponding data.
     * @requiredField key
     * @param data - Data to return to the client-side.
     * @requiredField data
     */
    set(key: string, data: any): Promise<void>;
}
/**
 * Gets data from server-side code for use in client-side code.
 *
 * A performance best practice is to get warmup data on the server for time-consuming operations, such as querying
 *  collections or working with the results of network requests from external sites. You can write code that
 *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
 *  performing the operations again.
 *
 *  Getting the warmup data retrieves data that was set on the server and makes the data accessible
 *  from the client-side.
 *
 *  You can only get warmup data in the client-side code.
 *  + This function returns `null` if called while on the server.
 *  + If this function runs before `warmupData.set()`, it returns `undefined`.
 *
 *  > **Notes:**
 *  > + Rendering never occurs server-side when previewing a site.
 *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
 * @param key - Name representing the data to return to the client-side. Until rendered, the data is `undefined`.
 * @requiredField key
 * @returns Returns one of the following:
 *   + The data corresponding to the `key` that was set with the `warmupData.set()` function in the backend.
 *   + `undefined` if not yet set.
 *   + `null` if called while on the server.
 */
declare function get(key: string): Promise<any>;
/**
 * Sets data in server-side code for use in client-side code.
 *
 * A performance best practice is to set warmup data for time-consuming operations, such as querying
 *  collections or working with the results of network requests from external sites. You can write code that
 *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
 *  performing the operations again.
 *
 *  You can only set warmup data on the server. This function has no effect if called from client-side code.
 *
 *  > **Notes:**
 *  > + Rendering never occurs server-side when previewing a site.
 *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
 * @param key - Name representing the data to return to the client-side. Key names are unique within a site. Using the same key name within the same site code overwrites the corresponding data.
 * @requiredField key
 * @param data - Data to return to the client-side.
 * @requiredField data
 */
declare function set(key: string, data: any): Promise<void>;

type warmupDataSdkModuleRuntime_WarmupData = WarmupData;
declare const warmupDataSdkModuleRuntime_get: typeof get;
declare const warmupDataSdkModuleRuntime_set: typeof set;
declare namespace warmupDataSdkModuleRuntime {
  export { type warmupDataSdkModuleRuntime_WarmupData as WarmupData, warmupDataSdkModuleRuntime_get as get, warmupDataSdkModuleRuntime_set as set };
}

type Methods$1<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const warmupDataRuntime: MaybeContext<HostModule<Methods$1<typeof warmupDataSdkModuleRuntime>, Host> & Methods$1<typeof warmupDataSdkModuleRuntime>>;

/**
 * Gets the locale of a site visitor's browser.
 *
 * A locale, also known as an IETF language tag, is an abbreviated code
 *  that defines the language, country, and other aspects of a site
 *  visitor's browser, such as number format and date format.
 *
 *  Some common locales include:
 *
 *  + `"en-US"`: English, United States
 *  + `"en-GB"`: English, British
 *  + `"es-ES"`: Spanish, Spain
 *  + `"de-DE"`: German, Germany
 *  + `"ja-JP"`: Japanese, Japan
 *  + `"fr-CH"`: French, Switzerland
 *  + `"it-IT"`: Italian, Italy
 * @readonly
 */
declare function browserLocale(): Promise<string>;
/**
 * Gets what kind of device is being used to view a page.
 *
 *
 *
 * >**Note:** This property only checks a site visitor's device, and not which [Studio Editor's breakpoint](https://support.wix.com/en/article/studio-editor-designing-across-breakpoints#defining-breakpoints) they are using.
 *
 *  The `formFactor` property gets one of:
 *
 *  + `"Desktop"`: When viewed in a desktop browser.
 *  + `"Mobile"`: When viewed in a mobile browser.
 *  + `"Tablet"`: When viewed in a tablet browser.
 *
 * >**Important:** Some tablet devices (such as iPads) are identified in this property as "Desktop".
 * @readonly
 */
declare function formFactor(): Promise<string>;
/**
 * Gets the HTTP referrer header field.
 *
 * The `referrer` is the address of the web page a site visitor was previously
 *  on before arriving at the current page, typically by clicking a link.
 *
 *  > **Note:** When site visitors move from page to page within your site, the `referrer` property
 *  does not contain the address of the page the site visitor came from. This is because
 *  Wix sites are built as [single page applications](https://en.wikipedia.org/wiki/Single-page_application).
 *  To get the previous page a site visitor was visiting within your site, you can
 *  use [`storage`](storage.html) to store the visitor's current page
 *  and retrieve the visitor's previous page.
 * @readonly
 */
declare function referrer(): Promise<string>;
/**
 * Gets which mode a site is currently being viewed in.
 *
 * The `viewMode` property gets either:
 *
 *  + `"Preview"`: When previewing a site using the **Preview** button in the editor.
 *  + `"Site"`: When viewing a published site.
 *  + `"Editor"`: When viewing a [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) built widget in the editor.
 * @readonly
 */
declare function viewMode(): Promise<string>;
/**
 * Copies text to a site visitor's clipboard.
 *
 * The `copyToClipboard()` method copies the specified text to a site visitor's clipboard.
 *
 *  If a site visitor's browser doesn't support copying text to the clipboard
 *  programmatically, a modal popup that allows copying will be displayed.
 *  For example, when calling `copyToClipboard()` from a Firefox or Edge browser,
 *  a site visitor will see something similar to the popup shown below.
 *
 *  ![Copy To Clipboard Popup](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_copytoclipboardmodal.png "Copy To Clipboard Popup")
 *
 *  The Promise returned by `copyToClipboard()` resolves when the
 *  specified text is copied to clipboard or the modal popup is closed.
 *  The Promise is rejected if a `null` value is passed as the `toCopy` parameter
 *  or if a site visitor's browser blocks the modal popup from opening.
 * @param text - The text to copy.
 * @requiredField text
 * @returns Fulfilled - When the copy is complete or a site visitor closes the modal popup.
 */
declare function copyToClipboard(text: string): Promise<void>;
/**
 * Gets the data passed to a [custom app page](https://dev.wix.com/docs/develop-websites/articles/wix-apps/build-a-custom-wix-business-app-page).
 *
 * Wix passes data to custom app pages that you can use when implementing a page's business logic.
 * Call the `getAppPageData()` method to retrieve the data and use it in your code.
 * The data retrieved by this method is different for each type of custom app page.
 * For more information, see [App Page Data](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/app-page-data).
 *
 * Learn more about [building custom app pages](https://dev.wix.com/docs/develop-websites/articles/wix-apps/build-a-custom-wix-business-app-page).
 *
 * >**Note:** If you call `getAppPageData()` for a page that isn't
 * a custom app page, it returns `null`.
 *
 * @returns The data passed to the app page.
 */
declare function getAppPageData(): Promise<object>;
/**
 * Gets information about a window.
 *
 * Returns information about a window's size, document's size,
 *  and current scroll position.
 *
 *  This method returns `null` for sites with [SSR](https://developer.mozilla.org/en-US/docs/Glossary/SSR).
 *
 * @returns Fulfilled - An object containing information about a window's size, document's size, and current scroll position.
 * @servicePath wix-window-frontend.WindowSizeInfo
 */
declare function getBoundingRect(): Promise<WindowSizeInfo>;
/**
 * Gets the current geolocation of a site visitor.
 *
 * The `getCurrentGeolocation()` method has the following limitations:
 *
 *  + On Chrome, the function only works on HTTPS sites.
 *  + On Chrome, Firefox, and Safari, the function only works if the site visitor
 *      approves a popup. If they do not approve, the promise is rejected.
 *  + Run `getCurrentGeolocation()` with a [`setTimeout()`](https://www.w3schools.com/js/js_timing.asp) in case the browser is set to not detect the locale. Adding the timeout lets you handle the unfulfilled promise.
 *
 * @returns Fulfilled - An object containing the coordinates and timestamp of the current location.
 * Rejected - The site visitor blocked the geolocation popup.
 * @servicePath wix-window-frontend.CurrentGeolocation
 */
declare function getCurrentGeolocation(): Promise<CurrentGeolocation>;
/**
 * Gets the data sent by a router to a page as part of its response.
 *
 * When you define a router and its functionality in the router() method, you can include data in the router's response.
 *  This data can then be accessed in the code of the routed page by calling the getRouterData() method. If you call this method from a non-router page or a router
 *  page that wasn't sent any data, the method returns `null`.
 *
 * @returns The data returned by the router.
 */
declare function getRouterData(): Promise<object>;
/**
 * Opens a lightbox added by an app.
 *
 * The `openAppLightbox()` method opens a lightbox by its ID and optionally passes data to it. Use this in your app's [site widget](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-widgets/about-site-widget-extensions) to trigger the app's lightbox. Learn more about [site lightbox extensions](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions).
 *
 *  To access the data passed to a lightbox, call [`getContext()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/get-context) in the lightbox's code.
 *
 *  If the lightbox is closed programmatically using [`close()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/close)
 *  and includes data, the promise returned by `openAppLightbox()` resolves with that data.
 *
 * Learn more about [opening and closing a lightbox from your app's code](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions#open-and-close-a-lightbox-from-your-apps-code)
 * @param id - The ID of the lightbox, as defined in the app dashboard.
 * @requiredField id
 * @param data - Data to pass to the lightbox.
 * @returns Fulfilled - Resolves with data returned from the lightbox when it is closed.
 * Rejected - The error that caused the rejection.
 */
declare function openAppLightbox(id: string, data?: object): Promise<object>;
/**
 * Opens a lightbox and optionally passes it the given data.
 *
 * The `openLightbox()` method opens a lightbox and allows you to pass data to it.
 *  Lightboxes that are opened automatically on page load, or via a link from a page element don't receive passed data.
 *
 *  To ensure data can be passed:
 *  1. Call this method to open a lightbox programmatically. For example, add a button with an `onClick` event handler that calls `openLightbox()`.
 *  2. Set **Automatically display lightbox on pages** to **No** in the lightbox's settings under [**Set Triggers**](https://support.wix.com/en/article/studio-editor-using-lightboxes#setting-triggers-for-a-lightbox).
 *
 *  If you pass data to a lightbox, call the [`getContext()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/lightbox/get-context)
 *  method in the lightbox's code to access the received data.
 *
 *  > **Notes:**
 *  > + Use the name of the lightbox and not the lightbox's ID when calling `openLightbox()`. You can find the lightbox's name by selecting the lightbox and clicking the settings button.
 *  > + Only call `openLightBox()` after the [`onReady()`](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) method, once all page elements have finished loading.
 * @param name - The name of the lightbox to open.
 * @requiredField name
 * @param data - The data to pass to the lightbox.
 * @returns Fulfilled - The returned data from the lightbox.
 * Rejected - The error that caused the rejection.
 */
declare function openLightbox(name: string, data?: object): Promise<object>;
/**
 * Opens a modal window that displays the specified web page.
 *
 * A modal window displays the page specified by the `url` property over
 *  your current page. Unlike a [lightbox](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/lightbox/introduction), which
 *  is opened by calling the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox) method, a window
 *  opened by `openModal()` is not part of a site's structure.
 *
 *  Only one modal window can be open at any given time. Therefore, opening
 *  a modal window closes an already open modal window if there is one.
 *
 *  > **Note:** The specified `url` must be an HTTPS URL.
 * @param url - The URL of the page to show in the modal window.
 * @requiredField url
 * @param options - Modal window options.
 * @requiredField options
 * @servicePath wix-window-frontend.OpenModalOptions
 * @returns Fulfilled - When the modal window is closed.
 * Rejected - The error that caused the rejection.
 */
declare function openModal(url: string, options: OpenModalOptions): Promise<void>;
/**
 * Sends a message to a page's parent.
 *
 * If a page is embedded within another site, using an [HtmlComponent](https://dev.wix.com/docs/velo/api-reference/$w/html-component/introduction)
 *  on a Wix site or an [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)
 *  on a non-Wix site, call this method to send a
 *  message from the inner site to the outer site.
 *
 *  When the parent site is a Wix site, call [`onMessage()`](https://dev.wix.com/docs/velo/api-reference/$w/html-component/on-message)
 *  to receive the message on the parent page.
 *
 *  When the parent site is a non-Wix site, use the page's `window.onMessage`
 *  event handler to read the `data` property of the received `MessageEvent`
 *  to receive the message on the parent page.
 * @param message - The message to send.
 * @requiredField message
 * @param target - The target to send the message to. Must be `"parent"` or omitted. Default: `"parent"`.
 * @returns Fulfilled - The data returned from the page's parent.
 * Rejected - The error that caused the rejection.
 */
declare function postMessage(message: object, target?: string): Promise<object>;
/**
 * Registers a listener for all events triggered by the [`trackEvent()`](https://dev.wix.com/docs/velo/apis/wix-window-frontend/track-event) method.
 *
 * This method captures every tracking event sent to external analytics tools. You don't need to specify a particular event name or parameters. The listener receives each event triggered by `trackEvent()`, along with the event name and parameters provided as arguments.
 *
 * For standard tracking event descriptions refer to [`trackEvent()`](https://dev.wix.com/docs/velo/apis/wix-window-frontend/track-event).
 * @param eventName - The name of the event triggered by `trackEvent()`.
 * @requiredField eventName
 * @param params - The parameters of the event triggered by `trackEvent()`.
 * @requiredField params
 */
declare function registerEventListener(eventName: string, params: any): Promise<void>;
/**
 * Scrolls a page by the specified number of pixels.
 *
 * The `x` and `y` parameters determine the number of horizontal and vertical
 *  pixels to scroll the current page. Negative numbers scroll up or to the
 *  left and positive numbers scroll down or to the right.
 * @param x - The horizontal offset, in pixels, to scroll by.
 * @requiredField x
 * @param y - The vertical offset, in pixels, to scroll by.
 * @requiredField y
 * @returns Fulfilled - When the scroll is complete.
 */
declare function scrollBy(x: number, y: number): Promise<void>;
/**
 * Scrolls a page to the specified location.
 *
 * The `x` and `y` parameters determine the top-left pixel that is
 *  displayed on screen after the scroll.
 *
 *  > **Tip**: To get the coordinates for scrolling, click on an element to open the [Inspector panel](https://support.wix.com/en/article/studio-editor-using-the-inspector-panel) (Wix Studio), or open the [Editor toolbar](https://support.wix.com/en/article/wix-editor-using-the-editor-toolbar-to-adjust-elements) (Wix Editor).
 *  Then move the cursor to the top-left pixel where you want the page to scroll to. The **X**
 *  and **Y** axis **Position** values show the coordinates.
 *
 *  Use the `options` parameter to specify the options to use when scrolling.
 * @param x - The horizontal position, in pixels, to scroll to.
 * @requiredField x
 * @param y - The vertical position, in pixels, to scroll to.
 * @requiredField y
 * @param options - Scrolling options.
 * @servicePath wix-window-frontend.ScrollToOptions
 * @returns Fulfilled - When the scroll is complete.
 */
declare function scrollTo(x: number, y: number, options?: ScrollToOptions): Promise<void>;
/**
 * Sends a tracking event to external analytics tools.
 *
 * Sends an event to analytics tools connected to your site. It can send events to Google Analytics, Facebook Pixel or analytics tools set up with the Google Tag Manager.
 *
 *  Learn more about:
 *
 *  + [Marketing Integrations](https://support.wix.com/en/article/about-marketing-integrations)
 *  + [Connecting a Facebook Pixel to Your Wix Site](https://support.wix.com/en/article/connecting-a-facebook-pixel-and-the-conversions-api-to-your-wix-site-7351813)
 *  + [Connecting a Google Analytics Property to Your Wix Site](https://support.wix.com/en/article/tracking-events-on-your-wix-site-with-a-google-analytics-property)
 *  + [Connecting Your Google Tag Manager Account to Your Wix Site](https://support.wix.com/en/article/connecting-your-google-tag-manager-account-to-your-wix-site)
 *
 *  > **Note:** This method only runs on published versions of your site.
 *  It doesn't work when previewing your site.
 *
 *  The `trackEvent()` method lets you track both standard and custom events.
 *
 *  The following standard events are supported:
 *
 *  | Standard Event | Description | Used By |
 *  | -------------- | ------------| ------- |
 *  | `AddPaymentInfo` | When a site visitor saves payment information. | `Google Analytics`, `Facebook Pixel` |
 *  | `AddProductImpression` | When a site visitor views a product. | `Google Analytics` |
 *  | `AddToCart` | When a site visitor adds a product to the shopping cart. | `Google Analytics`, `Facebook Pixel` |
 *  | `CheckoutStep` | When a site visitor completes a checkout step. | `Google Analytics` |
 *  | `ClickProduct` | When a site visitor clicks on a product. | `Google Analytics` |
 *  | `CompleteRegistration` | When a site visitor completes the registration. __Note:__ The `CompleteRegistration` event doesn't take any parameters. | `Facebook Pixel` |
 *  | `InitiateCheckout` | When a site visitor starts the checkout process. | `Google Analytics`, `Facebook Pixel` |
 *  | `Lead` | When a site visitor subscribes to a newsletter or submits a contact form. | `Google Analytics`, `Facebook Pixel` |
 *  | `Purchase` | When the customer successfully completes the checkout process. | `Google Analytics`, `Facebook Pixel` |
 *  | `RemoveFromCart` | When a site visitor removes a product from the shopping cart. | `Google Analytics` |
 *  | `Schedule` | When a site visitor schedules a meeting or makes an appointment. __Note:__ The `Schedule` event doesn't take any parameters. | `Facebook Pixel` |
 *  | `StartPayment` | When a site visitor starts the payment process. | `Google Analytics` |
 *  | `ViewContent` | When a site visitor views a key page, for example the product page. | `Google Analytics`, `Facebook Pixel` |
 * @param eventName - Event name. Applies to both standard and custom events. The following standard events are supported:
 * + `AddPaymentInfo`
 * + `AddProductImpression`
 * + `AddToCart`
 * + `CheckoutStep`
 * + `ClickProduct`
 * + `CompleteRegistration`
 * + `InitiateCheckout`
 * + `Lead`
 * + `Purchase`
 * + `RemoveFromCart`
 * + `Schedule`
 * + `StartPayment`
 * + `ViewContent`
 * @requiredField eventName
 * @param params - The event's parameters. **Note:** The `CompleteRegistration` and `Schedule` events don't take any parameters.
 * @requiredField params
 * @servicePath wix-window-frontend.trackingParameters
 */
declare function trackEvent(eventName: string, params: trackingParameters): Promise<void>;

declare const windowSdkModuleRuntime_browserLocale: typeof browserLocale;
declare const windowSdkModuleRuntime_copyToClipboard: typeof copyToClipboard;
declare const windowSdkModuleRuntime_formFactor: typeof formFactor;
declare const windowSdkModuleRuntime_getAppPageData: typeof getAppPageData;
declare const windowSdkModuleRuntime_getBoundingRect: typeof getBoundingRect;
declare const windowSdkModuleRuntime_getCurrentGeolocation: typeof getCurrentGeolocation;
declare const windowSdkModuleRuntime_getRouterData: typeof getRouterData;
declare const windowSdkModuleRuntime_openAppLightbox: typeof openAppLightbox;
declare const windowSdkModuleRuntime_openLightbox: typeof openLightbox;
declare const windowSdkModuleRuntime_openModal: typeof openModal;
declare const windowSdkModuleRuntime_postMessage: typeof postMessage;
declare const windowSdkModuleRuntime_referrer: typeof referrer;
declare const windowSdkModuleRuntime_registerEventListener: typeof registerEventListener;
declare const windowSdkModuleRuntime_scrollBy: typeof scrollBy;
declare const windowSdkModuleRuntime_scrollTo: typeof scrollTo;
declare const windowSdkModuleRuntime_trackEvent: typeof trackEvent;
declare const windowSdkModuleRuntime_viewMode: typeof viewMode;
declare namespace windowSdkModuleRuntime {
  export { windowSdkModuleRuntime_browserLocale as browserLocale, windowSdkModuleRuntime_copyToClipboard as copyToClipboard, windowSdkModuleRuntime_formFactor as formFactor, windowSdkModuleRuntime_getAppPageData as getAppPageData, windowSdkModuleRuntime_getBoundingRect as getBoundingRect, windowSdkModuleRuntime_getCurrentGeolocation as getCurrentGeolocation, windowSdkModuleRuntime_getRouterData as getRouterData, windowSdkModuleRuntime_openAppLightbox as openAppLightbox, windowSdkModuleRuntime_openLightbox as openLightbox, windowSdkModuleRuntime_openModal as openModal, windowSdkModuleRuntime_postMessage as postMessage, windowSdkModuleRuntime_referrer as referrer, windowSdkModuleRuntime_registerEventListener as registerEventListener, windowSdkModuleRuntime_scrollBy as scrollBy, windowSdkModuleRuntime_scrollTo as scrollTo, windowSdkModuleRuntime_trackEvent as trackEvent, windowSdkModuleRuntime_viewMode as viewMode };
}

type Methods<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const windowRuntime: MaybeContext<HostModule<Methods<typeof windowSdkModuleRuntime>, Host> & Methods<typeof windowSdkModuleRuntime>>;

export { consentPolicyRuntime as consentPolicy, lightboxRuntime as lightbox, multilingualRuntime as multilingual, renderingRuntime as rendering, warmupDataRuntime as warmupData, windowRuntime as window };
