/**
 * The Warmup Data API is used to optimize data loading for sites that render both on the server and in the browser,
 *  allowing costly data fetching operations to be done only once.
 *
 * To improve performance the [rendering process](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/frontend-code/page-rendering/about-page-rendering)
 *  is split in two when possible: once on the server and once in the browser. When that isn't
 *  possible, all rendering happens in the browser.
 *
 *  Because rendering can occur twice,
 *  it's preferred to perform time-consuming tasks only once, such as querying
 *  collections or working with the results of network requests from external sites.
 *  If possible, it's best to perform these operations on the server.
 *
 *  Requesting the warmup data from the server returns `undefined` in the following situations:
 *  + When browser rendering happens before server-side rendering.
 *  + When there is only browser rendering, for example in case visitors navigate from page to page within a site.
 *
 *  Page code must check for these scenarios and provide a fallback alternative for getting the data.
 *
 *  Use the Warmup Data API and `env` property  of the Rendering API
 *  to track when and where your code is running. This lets you selectively run parts of your code.
 *
 *  > **Notes:**
 *  > + Rendering never occurs server-side when previewing a site.
 *  > + Backend rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
 *
 *  To use the Warmup Data API, import `warmupData` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import { warmupData } from 'wix-window-frontend';
 *    ```
 */
export interface WarmupData {
    /**
     * Gets data from server-side code for use in client-side code.
     *
     * A performance best practice is to get warmup data on the server for time-consuming operations, such as querying
     *  collections or working with the results of network requests from external sites. You can write code that
     *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
     *  performing the operations again.
     *
     *  Getting the warmup data retrieves data that was set on the server and makes the data accessible
     *  from the client-side.
     *
     *  You can only get warmup data in the client-side code.
     *  + This function returns `null` if called while on the server.
     *  + If this function runs before `warmupData.set()`, it returns `undefined`.
     *
     *  > **Notes:**
     *  > + Rendering never occurs server-side when previewing a site.
     *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
     * @param key - Name representing the data to return to the client-side. Until rendered, the data is `undefined`.
     * @requiredField key
     * @returns Returns one of the following:
     *   + The data corresponding to the `key` that was set with the `warmupData.set()` function in the backend.
     *   + `undefined` if not yet set.
     *   + `null` if called while on the server.
     */
    get(key: string): Promise<any>;
    /**
     * Sets data in server-side code for use in client-side code.
     *
     * A performance best practice is to set warmup data for time-consuming operations, such as querying
     *  collections or working with the results of network requests from external sites. You can write code that
     *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
     *  performing the operations again.
     *
     *  You can only set warmup data on the server. This function has no effect if called from client-side code.
     *
     *  > **Notes:**
     *  > + Rendering never occurs server-side when previewing a site.
     *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
     * @param key - Name representing the data to return to the client-side. Key names are unique within a site. Using the same key name within the same site code overwrites the corresponding data.
     * @requiredField key
     * @param data - Data to return to the client-side.
     * @requiredField data
     */
    set(key: string, data: any): Promise<void>;
}
/**
 * Gets data from server-side code for use in client-side code.
 *
 * A performance best practice is to get warmup data on the server for time-consuming operations, such as querying
 *  collections or working with the results of network requests from external sites. You can write code that
 *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
 *  performing the operations again.
 *
 *  Getting the warmup data retrieves data that was set on the server and makes the data accessible
 *  from the client-side.
 *
 *  You can only get warmup data in the client-side code.
 *  + This function returns `null` if called while on the server.
 *  + If this function runs before `warmupData.set()`, it returns `undefined`.
 *
 *  > **Notes:**
 *  > + Rendering never occurs server-side when previewing a site.
 *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
 * @param key - Name representing the data to return to the client-side. Until rendered, the data is `undefined`.
 * @requiredField key
 * @returns Returns one of the following:
 *   + The data corresponding to the `key` that was set with the `warmupData.set()` function in the backend.
 *   + `undefined` if not yet set.
 *   + `null` if called while on the server.
 */
export function get(key: string): Promise<any>;
/**
 * Sets data in server-side code for use in client-side code.
 *
 * A performance best practice is to set warmup data for time-consuming operations, such as querying
 *  collections or working with the results of network requests from external sites. You can write code that
 *  sets the data from these operations as warmup data on the server. The client-side code can then `get` that data without
 *  performing the operations again.
 *
 *  You can only set warmup data on the server. This function has no effect if called from client-side code.
 *
 *  > **Notes:**
 *  > + Rendering never occurs server-side when previewing a site.
 *  > + Server-side rendering only occurs when visitors initially enter a site, and not when visitors navigate from page-to-page within a site.
 * @param key - Name representing the data to return to the client-side. Key names are unique within a site. Using the same key name within the same site code overwrites the corresponding data.
 * @requiredField key
 * @param data - Data to return to the client-side.
 * @requiredField data
 */
export function set(key: string, data: any): Promise<void>;
