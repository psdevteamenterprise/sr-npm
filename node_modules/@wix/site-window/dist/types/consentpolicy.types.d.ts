/**
 * The ConsentPolicy API manages site visitor cookie preferences and 3rd-party data transfers for GDPR and CCPA compliance.
 *
 * >**Note:** The APIs in `wix-window-frontend.ConsentPolicy` can only be used in frontend code.
 *
 * The consent policy helps you comply with [GDPR](https://support.wix.com/en/article/preparing-your-wix-site-for-the-gdpr) and [CCPA](https://support.wix.com/en/article/preparing-your-wix-site-for-ccpa) regulations, and allows site visitors to
 * control their information.
 *
 * Set up the site consent policy and cookie consent banners in
 * a site's [Privacy Center](https://www.wix.com/my-account/site-selector/?buttonText=Open%20Privacy%20Center&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcookie-consent-settings-app?referralInfo=corvid-docs).
 *
 *  To use the ConsentPolicy API, import `{ consentPolicy }` from the `wix-window-frontend` module:
 *
 *    ```javascript
 *    import { consentPolicy } from 'wix-window-frontend';
 *    ```
 */
export interface ConsentPolicy {
    /**
     * Gets the site visitor's consent policy regarding allowed cookies and 3rd-party data transfers for GDPR or CCPA compliance.
     *
     * Retrieves the site visitor's consent policy details, including which cookies are allowed and whether data transfer to 3rd parties is permitted.
     *
     * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
     */
    getCurrentConsentPolicy(): Promise<PolicyDetails>;
    /**
     * Triggered when a site visitor's consent policy was changed using
     * [`setConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/set-consent-policy) or reset using
     * [`resetConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/reset-consent-policy).
     *
     * Use the `onConsentPolicyChanged()` method for code you want to run after
     * the site visitor's current consent policy was changed using
     * [`setConsentPolicy()`](#setConsentPolicy) or reset using
     * [`resetConsentPolicy()`](#resetConsentPolicy).
     *
     *
     * Usually, you want to call the `onConsentPolicyChanged()` method in the **masterpage.js** file so that the `onConsentPolicyChanged()` event handler runs no matter which
     * page on your site is used to change the policy.
     * @param handler - The name of the function or
     *  the function expression to run when the consent policy is changed.
     * @requiredField handler
     * @servicePath wix-window-frontend.ConsentPolicy.ConsentPolicyChangedHandler
     */
    onConsentPolicyChanged(handler: ConsentPolicyChangedHandler): Promise<void>;
    /**
     * Removes the current policy from the site visitor's browser
     * and resets the site visitor's consent policy to the default policy for the site.
     *
     * @returns Fulfilled - When the reset is complete.
     * Rejected - Error message.
     */
    resetConsentPolicy(): Promise<void>;
    /**
     * Sets the current site visitor's consent policy
     * regarding allowed cookies and data transfer to 3rd parties,
     * such as for GDPR or CCPA purposes.
     *
     * You can use the [`onConsentPolicyChanged()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/on-consent-policy-changed) event to listen for
     * changes made when a site visitor changes their consent policy with `setConsentPolicy()`. Handle
     * the policy change accordingly in the event handler.
     * Changes to the consent policy take affect after the page is refreshed.
     * @param policy - An object representing the cookies of the site visitor's consent policy.
     * @requiredField policy
     * @servicePath wix-window-frontend.ConsentPolicy.Policy
     * @returns Fulfilled - All the details of the site visitor's consent policy, including if the the current policy is the default site policy and the policy's allowed cookies.
     * Rejected - Error message.
     * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
     */
    setConsentPolicy(policy: Policy): Promise<PolicyDetails>;
}
/**
 * The event that occurred when the consent policy changed.
 */
export interface ConsentPolicyChangedEvent {
}
/**
 * The current site visitor's consent policy settings.
 *
 * An object containing the consent policy cookie settings, by type, of the site visitor currently viewing the site.
 */
export interface Policy {
    /**
     * Consent for mandatory cookies for Wix websites, such as for security cookies. Wix places these cookies on the site visitor's device. These cookies don't require site visitor consent. Always `true`.
     * @requiredField essential
     */
    essential: boolean;
    /**
     * Consent for cookies placed on the site visitor's device that "remember" their user settings to improve user experience. For example, an indication that the user dismissed a popup. Default: `true`.
     * @requiredField functional
     */
    functional: boolean;
    /**
     * Consent for cookies used for analytics, such as Wix analytics, Google Analytics, Yandex Metrica, and so on. Default: `true`.
     * @requiredField analytics
     */
    analytics: boolean;
    /**
     * Consent for cookies used for advertising purposes. This includes 3rd-party scripts and pixels that may potentially place advertising cookies on the device. For example, Twitter page view and Facebook Pixel. Default: `true`.
     * @requiredField advertising
     */
    advertising: boolean;
    /**
     * Consent for a site visitor's personal data to be transferred to a 3rd party. For example, Google Analytics, Facebook Pixel, and FullStory. Default: `true`.
     * @requiredField dataToThirdParty
     */
    dataToThirdParty: boolean;
}
/**
 * The complete details of the current site visitor's consent policy.
 *
 * An object containing all the details about the consent policy of the site visitor currently viewing the site.
 */
export interface PolicyDetails {
    /**
     * Whether the current consent policy is the default one you set. If `true`, either the site visitor hasn't set a policy, or youâ€™ve reset it to its default settings.
     * @requiredField defaultPolicy
     */
    defaultPolicy: boolean;
    /**
     * An object representing the site visitor's current consent policy.
     * @requiredField policy
     * @servicePath wix-window-frontend.ConsentPolicy.Policy
     */
    policy: Policy;
    /**
     * The date the consent policy was set, if a cookie defining the current policy exists in the browser. Otherwise, it's undefined.
     */
    createdDate?: Date;
}
/**
 * Function that runs when a site visitor's consent policy was changed using [`setConsentPolicy()`](#setConsentPolicy).
 * @param event - The event that occurred when the consent policy changed.
 * @requiredField event
 * @servicePath wix-window-frontend.ConsentPolicy.ConsentPolicyChangedEvent
 */
export type ConsentPolicyChangedHandler = (event: ConsentPolicyChangedEvent) => void;
/**
 * Gets the site visitor's consent policy regarding allowed cookies and 3rd-party data transfers for GDPR or CCPA compliance.
 *
 * Retrieves the site visitor's consent policy details, including which cookies are allowed and whether data transfer to 3rd parties is permitted.
 *
 * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
 */
export function getCurrentConsentPolicy(): Promise<PolicyDetails>;
/**
 * Triggered when a site visitor's consent policy was changed using
 * [`setConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/set-consent-policy) or reset using
 * [`resetConsentPolicy()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/reset-consent-policy).
 *
 * Use the `onConsentPolicyChanged()` method for code you want to run after
 * the site visitor's current consent policy was changed using
 * [`setConsentPolicy()`](#setConsentPolicy) or reset using
 * [`resetConsentPolicy()`](#resetConsentPolicy).
 *
 *
 * Usually, you want to call the `onConsentPolicyChanged()` method in the **masterpage.js** file so that the `onConsentPolicyChanged()` event handler runs no matter which
 * page on your site is used to change the policy.
 * @param handler - The name of the function or
 *  the function expression to run when the consent policy is changed.
 * @requiredField handler
 * @servicePath wix-window-frontend.ConsentPolicy.ConsentPolicyChangedHandler
 */
export function onConsentPolicyChanged(handler: ConsentPolicyChangedHandler): Promise<void>;
/**
 * Removes the current policy from the site visitor's browser
 * and resets the site visitor's consent policy to the default policy for the site.
 *
 * @returns Fulfilled - When the reset is complete.
 * Rejected - Error message.
 */
export function resetConsentPolicy(): Promise<void>;
/**
 * Sets the current site visitor's consent policy
 * regarding allowed cookies and data transfer to 3rd parties,
 * such as for GDPR or CCPA purposes.
 *
 * You can use the [`onConsentPolicyChanged()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/consent-policy/on-consent-policy-changed) event to listen for
 * changes made when a site visitor changes their consent policy with `setConsentPolicy()`. Handle
 * the policy change accordingly in the event handler.
 * Changes to the consent policy take affect after the page is refreshed.
 * @param policy - An object representing the cookies of the site visitor's consent policy.
 * @requiredField policy
 * @servicePath wix-window-frontend.ConsentPolicy.Policy
 * @returns Fulfilled - All the details of the site visitor's consent policy, including if the the current policy is the default site policy and the policy's allowed cookies.
 * Rejected - Error message.
 * @servicePath wix-window-frontend.ConsentPolicy.PolicyDetails
 */
export function setConsentPolicy(policy: Policy): Promise<PolicyDetails>;
