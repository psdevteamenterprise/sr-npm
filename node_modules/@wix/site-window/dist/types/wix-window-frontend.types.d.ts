import { CurrentGeolocation, OpenModalOptions, ScrollToOptions, WindowSizeInfo, trackingParameters } from './common.types';
/**
 * Gets the locale of a site visitor's browser.
 *
 * A locale, also known as an IETF language tag, is an abbreviated code
 *  that defines the language, country, and other aspects of a site
 *  visitor's browser, such as number format and date format.
 *
 *  Some common locales include:
 *
 *  + `"en-US"`: English, United States
 *  + `"en-GB"`: English, British
 *  + `"es-ES"`: Spanish, Spain
 *  + `"de-DE"`: German, Germany
 *  + `"ja-JP"`: Japanese, Japan
 *  + `"fr-CH"`: French, Switzerland
 *  + `"it-IT"`: Italian, Italy
 * @readonly
 */
export function browserLocale(): Promise<string>;
/**
 * Gets what kind of device is being used to view a page.
 *
 *
 *
 * >**Note:** This property only checks a site visitor's device, and not which [Studio Editor's breakpoint](https://support.wix.com/en/article/studio-editor-designing-across-breakpoints#defining-breakpoints) they are using.
 *
 *  The `formFactor` property gets one of:
 *
 *  + `"Desktop"`: When viewed in a desktop browser.
 *  + `"Mobile"`: When viewed in a mobile browser.
 *  + `"Tablet"`: When viewed in a tablet browser.
 *
 * >**Important:** Some tablet devices (such as iPads) are identified in this property as "Desktop".
 * @readonly
 */
export function formFactor(): Promise<string>;
/**
 * Gets the HTTP referrer header field.
 *
 * The `referrer` is the address of the web page a site visitor was previously
 *  on before arriving at the current page, typically by clicking a link.
 *
 *  > **Note:** When site visitors move from page to page within your site, the `referrer` property
 *  does not contain the address of the page the site visitor came from. This is because
 *  Wix sites are built as [single page applications](https://en.wikipedia.org/wiki/Single-page_application).
 *  To get the previous page a site visitor was visiting within your site, you can
 *  use [`storage`](storage.html) to store the visitor's current page
 *  and retrieve the visitor's previous page.
 * @readonly
 */
export function referrer(): Promise<string>;
/**
 * Gets which mode a site is currently being viewed in.
 *
 * The `viewMode` property gets either:
 *
 *  + `"Preview"`: When previewing a site using the **Preview** button in the editor.
 *  + `"Site"`: When viewing a published site.
 *  + `"Editor"`: When viewing a [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) built widget in the editor.
 * @readonly
 */
export function viewMode(): Promise<string>;
/**
 * Copies text to a site visitor's clipboard.
 *
 * The `copyToClipboard()` method copies the specified text to a site visitor's clipboard.
 *
 *  If a site visitor's browser doesn't support copying text to the clipboard
 *  programmatically, a modal popup that allows copying will be displayed.
 *  For example, when calling `copyToClipboard()` from a Firefox or Edge browser,
 *  a site visitor will see something similar to the popup shown below.
 *
 *  ![Copy To Clipboard Popup](https://wixmp-833713b177cebf373f611808.wixmp.com/images/velo-images/media_copytoclipboardmodal.png "Copy To Clipboard Popup")
 *
 *  The Promise returned by `copyToClipboard()` resolves when the
 *  specified text is copied to clipboard or the modal popup is closed.
 *  The Promise is rejected if a `null` value is passed as the `toCopy` parameter
 *  or if a site visitor's browser blocks the modal popup from opening.
 * @param text - The text to copy.
 * @requiredField text
 * @returns Fulfilled - When the copy is complete or a site visitor closes the modal popup.
 */
export function copyToClipboard(text: string): Promise<void>;
/**
 * Gets the data passed to a [custom app page](https://dev.wix.com/docs/develop-websites/articles/wix-apps/build-a-custom-wix-business-app-page).
 *
 * Wix passes data to custom app pages that you can use when implementing a page's business logic.
 * Call the `getAppPageData()` method to retrieve the data and use it in your code.
 * The data retrieved by this method is different for each type of custom app page.
 * For more information, see [App Page Data](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/app-page-data).
 *
 * Learn more about [building custom app pages](https://dev.wix.com/docs/develop-websites/articles/wix-apps/build-a-custom-wix-business-app-page).
 *
 * >**Note:** If you call `getAppPageData()` for a page that isn't
 * a custom app page, it returns `null`.
 *
 * @returns The data passed to the app page.
 */
export function getAppPageData(): Promise<object>;
/**
 * Gets information about a window.
 *
 * Returns information about a window's size, document's size,
 *  and current scroll position.
 *
 *  This method returns `null` for sites with [SSR](https://developer.mozilla.org/en-US/docs/Glossary/SSR).
 *
 * @returns Fulfilled - An object containing information about a window's size, document's size, and current scroll position.
 * @servicePath wix-window-frontend.WindowSizeInfo
 */
export function getBoundingRect(): Promise<WindowSizeInfo>;
/**
 * Gets the current geolocation of a site visitor.
 *
 * The `getCurrentGeolocation()` method has the following limitations:
 *
 *  + On Chrome, the function only works on HTTPS sites.
 *  + On Chrome, Firefox, and Safari, the function only works if the site visitor
 *      approves a popup. If they do not approve, the promise is rejected.
 *  + Run `getCurrentGeolocation()` with a [`setTimeout()`](https://www.w3schools.com/js/js_timing.asp) in case the browser is set to not detect the locale. Adding the timeout lets you handle the unfulfilled promise.
 *
 * @returns Fulfilled - An object containing the coordinates and timestamp of the current location.
 * Rejected - The site visitor blocked the geolocation popup.
 * @servicePath wix-window-frontend.CurrentGeolocation
 */
export function getCurrentGeolocation(): Promise<CurrentGeolocation>;
/**
 * Gets the data sent by a router to a page as part of its response.
 *
 * When you define a router and its functionality in the router() method, you can include data in the router's response.
 *  This data can then be accessed in the code of the routed page by calling the getRouterData() method. If you call this method from a non-router page or a router
 *  page that wasn't sent any data, the method returns `null`.
 *
 * @returns The data returned by the router.
 */
export function getRouterData(): Promise<object>;
/**
 * Opens a lightbox added by an app.
 *
 * The `openAppLightbox()` method opens a lightbox by its ID and optionally passes data to it. Use this in your app's [site widget](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-widgets/about-site-widget-extensions) to trigger the app's lightbox. Learn more about [site lightbox extensions](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions).
 *
 *  To access the data passed to a lightbox, call [`getContext()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/get-context) in the lightbox's code.
 *
 *  If the lightbox is closed programmatically using [`close()`](https://dev.wix.com/docs/sdk/frontend-modules/window/lightbox/close)
 *  and includes data, the promise returned by `openAppLightbox()` resolves with that data.
 *
 * Learn more about [opening and closing a lightbox from your app's code](https://dev.wix.com/docs/build-apps/develop-your-app/extensions/site-extensions/site-lightboxes/about-site-lightbox-extensions#open-and-close-a-lightbox-from-your-apps-code)
 * @param id - The ID of the lightbox, as defined in the app dashboard.
 * @requiredField id
 * @param data - Data to pass to the lightbox.
 * @returns Fulfilled - Resolves with data returned from the lightbox when it is closed.
 * Rejected - The error that caused the rejection.
 */
export function openAppLightbox(id: string, data?: object): Promise<object>;
/**
 * Opens a lightbox and optionally passes it the given data.
 *
 * The `openLightbox()` method opens a lightbox and allows you to pass data to it.
 *  Lightboxes that are opened automatically on page load, or via a link from a page element don't receive passed data.
 *
 *  To ensure data can be passed:
 *  1. Call this method to open a lightbox programmatically. For example, add a button with an `onClick` event handler that calls `openLightbox()`.
 *  2. Set **Automatically display lightbox on pages** to **No** in the lightbox's settings under [**Set Triggers**](https://support.wix.com/en/article/studio-editor-using-lightboxes#setting-triggers-for-a-lightbox).
 *
 *  If you pass data to a lightbox, call the [`getContext()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/lightbox/get-context)
 *  method in the lightbox's code to access the received data.
 *
 *  > **Notes:**
 *  > + Use the name of the lightbox and not the lightbox's ID when calling `openLightbox()`. You can find the lightbox's name by selecting the lightbox and clicking the settings button.
 *  > + Only call `openLightBox()` after the [`onReady()`](https://dev.wix.com/docs/velo/api-reference/$w/on-ready) method, once all page elements have finished loading.
 * @param name - The name of the lightbox to open.
 * @requiredField name
 * @param data - The data to pass to the lightbox.
 * @returns Fulfilled - The returned data from the lightbox.
 * Rejected - The error that caused the rejection.
 */
export function openLightbox(name: string, data?: object): Promise<object>;
/**
 * Opens a modal window that displays the specified web page.
 *
 * A modal window displays the page specified by the `url` property over
 *  your current page. Unlike a [lightbox](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/lightbox/introduction), which
 *  is opened by calling the [`openLightbox()`](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/open-lightbox) method, a window
 *  opened by `openModal()` is not part of a site's structure.
 *
 *  Only one modal window can be open at any given time. Therefore, opening
 *  a modal window closes an already open modal window if there is one.
 *
 *  > **Note:** The specified `url` must be an HTTPS URL.
 * @param url - The URL of the page to show in the modal window.
 * @requiredField url
 * @param options - Modal window options.
 * @requiredField options
 * @servicePath wix-window-frontend.OpenModalOptions
 * @returns Fulfilled - When the modal window is closed.
 * Rejected - The error that caused the rejection.
 */
export function openModal(url: string, options: OpenModalOptions): Promise<void>;
/**
 * Sends a message to a page's parent.
 *
 * If a page is embedded within another site, using an [HtmlComponent](https://dev.wix.com/docs/velo/api-reference/$w/html-component/introduction)
 *  on a Wix site or an [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)
 *  on a non-Wix site, call this method to send a
 *  message from the inner site to the outer site.
 *
 *  When the parent site is a Wix site, call [`onMessage()`](https://dev.wix.com/docs/velo/api-reference/$w/html-component/on-message)
 *  to receive the message on the parent page.
 *
 *  When the parent site is a non-Wix site, use the page's `window.onMessage`
 *  event handler to read the `data` property of the received `MessageEvent`
 *  to receive the message on the parent page.
 * @param message - The message to send.
 * @requiredField message
 * @param target - The target to send the message to. Must be `"parent"` or omitted. Default: `"parent"`.
 * @returns Fulfilled - The data returned from the page's parent.
 * Rejected - The error that caused the rejection.
 */
export function postMessage(message: object, target?: string): Promise<object>;
/**
 * Registers a listener for all events triggered by the [`trackEvent()`](https://dev.wix.com/docs/velo/apis/wix-window-frontend/track-event) method.
 *
 * This method captures every tracking event sent to external analytics tools. You don't need to specify a particular event name or parameters. The listener receives each event triggered by `trackEvent()`, along with the event name and parameters provided as arguments.
 *
 * For standard tracking event descriptions refer to [`trackEvent()`](https://dev.wix.com/docs/velo/apis/wix-window-frontend/track-event).
 * @param eventName - The name of the event triggered by `trackEvent()`.
 * @requiredField eventName
 * @param params - The parameters of the event triggered by `trackEvent()`.
 * @requiredField params
 */
export function registerEventListener(eventName: string, params: any): Promise<void>;
/**
 * Scrolls a page by the specified number of pixels.
 *
 * The `x` and `y` parameters determine the number of horizontal and vertical
 *  pixels to scroll the current page. Negative numbers scroll up or to the
 *  left and positive numbers scroll down or to the right.
 * @param x - The horizontal offset, in pixels, to scroll by.
 * @requiredField x
 * @param y - The vertical offset, in pixels, to scroll by.
 * @requiredField y
 * @returns Fulfilled - When the scroll is complete.
 */
export function scrollBy(x: number, y: number): Promise<void>;
/**
 * Scrolls a page to the specified location.
 *
 * The `x` and `y` parameters determine the top-left pixel that is
 *  displayed on screen after the scroll.
 *
 *  > **Tip**: To get the coordinates for scrolling, click on an element to open the [Inspector panel](https://support.wix.com/en/article/studio-editor-using-the-inspector-panel) (Wix Studio), or open the [Editor toolbar](https://support.wix.com/en/article/wix-editor-using-the-editor-toolbar-to-adjust-elements) (Wix Editor).
 *  Then move the cursor to the top-left pixel where you want the page to scroll to. The **X**
 *  and **Y** axis **Position** values show the coordinates.
 *
 *  Use the `options` parameter to specify the options to use when scrolling.
 * @param x - The horizontal position, in pixels, to scroll to.
 * @requiredField x
 * @param y - The vertical position, in pixels, to scroll to.
 * @requiredField y
 * @param options - Scrolling options.
 * @servicePath wix-window-frontend.ScrollToOptions
 * @returns Fulfilled - When the scroll is complete.
 */
export function scrollTo(x: number, y: number, options?: ScrollToOptions): Promise<void>;
/**
 * Sends a tracking event to external analytics tools.
 *
 * Sends an event to analytics tools connected to your site. It can send events to Google Analytics, Facebook Pixel or analytics tools set up with the Google Tag Manager.
 *
 *  Learn more about:
 *
 *  + [Marketing Integrations](https://support.wix.com/en/article/about-marketing-integrations)
 *  + [Connecting a Facebook Pixel to Your Wix Site](https://support.wix.com/en/article/connecting-a-facebook-pixel-and-the-conversions-api-to-your-wix-site-7351813)
 *  + [Connecting a Google Analytics Property to Your Wix Site](https://support.wix.com/en/article/tracking-events-on-your-wix-site-with-a-google-analytics-property)
 *  + [Connecting Your Google Tag Manager Account to Your Wix Site](https://support.wix.com/en/article/connecting-your-google-tag-manager-account-to-your-wix-site)
 *
 *  > **Note:** This method only runs on published versions of your site.
 *  It doesn't work when previewing your site.
 *
 *  The `trackEvent()` method lets you track both standard and custom events.
 *
 *  The following standard events are supported:
 *
 *  | Standard Event | Description | Used By |
 *  | -------------- | ------------| ------- |
 *  | `AddPaymentInfo` | When a site visitor saves payment information. | `Google Analytics`, `Facebook Pixel` |
 *  | `AddProductImpression` | When a site visitor views a product. | `Google Analytics` |
 *  | `AddToCart` | When a site visitor adds a product to the shopping cart. | `Google Analytics`, `Facebook Pixel` |
 *  | `CheckoutStep` | When a site visitor completes a checkout step. | `Google Analytics` |
 *  | `ClickProduct` | When a site visitor clicks on a product. | `Google Analytics` |
 *  | `CompleteRegistration` | When a site visitor completes the registration. __Note:__ The `CompleteRegistration` event doesn't take any parameters. | `Facebook Pixel` |
 *  | `InitiateCheckout` | When a site visitor starts the checkout process. | `Google Analytics`, `Facebook Pixel` |
 *  | `Lead` | When a site visitor subscribes to a newsletter or submits a contact form. | `Google Analytics`, `Facebook Pixel` |
 *  | `Purchase` | When the customer successfully completes the checkout process. | `Google Analytics`, `Facebook Pixel` |
 *  | `RemoveFromCart` | When a site visitor removes a product from the shopping cart. | `Google Analytics` |
 *  | `Schedule` | When a site visitor schedules a meeting or makes an appointment. __Note:__ The `Schedule` event doesn't take any parameters. | `Facebook Pixel` |
 *  | `StartPayment` | When a site visitor starts the payment process. | `Google Analytics` |
 *  | `ViewContent` | When a site visitor views a key page, for example the product page. | `Google Analytics`, `Facebook Pixel` |
 * @param eventName - Event name. Applies to both standard and custom events. The following standard events are supported:
 * + `AddPaymentInfo`
 * + `AddProductImpression`
 * + `AddToCart`
 * + `CheckoutStep`
 * + `ClickProduct`
 * + `CompleteRegistration`
 * + `InitiateCheckout`
 * + `Lead`
 * + `Purchase`
 * + `RemoveFromCart`
 * + `Schedule`
 * + `StartPayment`
 * + `ViewContent`
 * @requiredField eventName
 * @param params - The event's parameters. **Note:** The `CompleteRegistration` and `Schedule` events don't take any parameters.
 * @requiredField params
 * @servicePath wix-window-frontend.trackingParameters
 */
export function trackEvent(eventName: string, params: trackingParameters): Promise<void>;
