/**
 * Gets how frequently the page is likely to change.
 *
 * The value of the `changeFrequency` property provides general information to
 * search engines and may not correlate exactly to how often they crawl the page.
 *
 * Valid values:
 *
 * + `"always"`
 * + `"hourly"`
 * + `"daily"`
 * + `"weekly"`
 * + `"monthly"`
 * + `"yearly"`
 * + `"never"`
 * @readonly
 */
declare function changeFrequency(): Promise<string>;
/**
 * Gets when the page data was last modified.
 * @readonly
 */
declare function lastModified(): Promise<Date>;
/**
 * Gets the page name.
 * @readonly
 */
declare function pageName(): Promise<string>;
/**
 * Gets the priority of this URL relative to other URLs on your site.
 *
 * The value of the `priority` property lets search engines know which pages
 * you deem most important. Its value does not affect how your pages are
 * compared to pages on other sites.
 *
 * Valid values range from 0.0 to 1.0.
 *
 * The default priority of a page is 0.5.
 * @readonly
 */
declare function priority(): Promise<number>;
/**
 * Gets the page title.
 * @readonly
 */
declare function title(): Promise<string>;
/**
 * Gets the relative url of the page.
 * @readonly
 */
declare function url(): Promise<string>;
/**
 * An object representing a single entry in a sitemap.
 */
interface WixRouterSitemapEntry {
    /**
     * Gets how frequently the page is likely to change.
     *
     * The value of the `changeFrequency` property provides general information to
     * search engines and may not correlate exactly to how often they crawl the page.
     *
     * Valid values:
     *
     * + `"always"`
     * + `"hourly"`
     * + `"daily"`
     * + `"weekly"`
     * + `"monthly"`
     * + `"yearly"`
     * + `"never"`
     * @readonly
     */
    readonly changeFrequency: string;
    /**
     * Gets when the page data was last modified.
     * @readonly
     */
    readonly lastModified: Date;
    /**
     * Gets the page name.
     * @readonly
     */
    readonly pageName: string;
    /**
     * Gets the priority of this URL relative to other URLs on your site.
     *
     * The value of the `priority` property lets search engines know which pages
     * you deem most important. Its value does not affect how your pages are
     * compared to pages on other sites.
     *
     * Valid values range from 0.0 to 1.0.
     *
     * The default priority of a page is 0.5.
     * @readonly
     */
    readonly priority: number;
    /**
     * Gets the page title.
     * @readonly
     */
    readonly title: string;
    /**
     * Gets the relative url of the page.
     * @readonly
     */
    readonly url: string;
}

type wixRouterSitemapEntrySdkModuleContext_WixRouterSitemapEntry = WixRouterSitemapEntry;
declare const wixRouterSitemapEntrySdkModuleContext_changeFrequency: typeof changeFrequency;
declare const wixRouterSitemapEntrySdkModuleContext_lastModified: typeof lastModified;
declare const wixRouterSitemapEntrySdkModuleContext_pageName: typeof pageName;
declare const wixRouterSitemapEntrySdkModuleContext_priority: typeof priority;
declare const wixRouterSitemapEntrySdkModuleContext_title: typeof title;
declare const wixRouterSitemapEntrySdkModuleContext_url: typeof url;
declare namespace wixRouterSitemapEntrySdkModuleContext {
  export { type wixRouterSitemapEntrySdkModuleContext_WixRouterSitemapEntry as WixRouterSitemapEntry, wixRouterSitemapEntrySdkModuleContext_changeFrequency as changeFrequency, wixRouterSitemapEntrySdkModuleContext_lastModified as lastModified, wixRouterSitemapEntrySdkModuleContext_pageName as pageName, wixRouterSitemapEntrySdkModuleContext_priority as priority, wixRouterSitemapEntrySdkModuleContext_title as title, wixRouterSitemapEntrySdkModuleContext_url as url };
}

type Methods$1<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const wixRouterSitemapEntryContext: Methods$1<typeof wixRouterSitemapEntrySdkModuleContext>;

/**
 * An object that contains information about which pages and lightboxes to
 *  prefetch resources for.
 */
interface PrefetchItems {
    /**
     * The relative or absolute URLs of the pages in your site
     *  to prefetch resources for.
     */
    pages?: string[];
    /**
     * The names of the lightboxes in your site to prefetch
     *  resources for.
     *
     *  > **Note:** Pages are listed by relative or absolute URL, but lightboxes are listed by name.
     *  See [`location.to()`](location.html#to) to learn how to find a page's relative
     *  URL. You can find a lightbox's name by selecting the lightbox and clicking the settings button.
     */
    lightboxes?: string[];
}
/**
 * An object that is returned from a prefetch request.
 */
interface PrefetchResult {
    /**
     * A success or failure message.
     * @requiredField message
     */
    message: string;
    /**
     * The errors that occurred.
     * @requiredField errors
     * @servicePath wix-site-frontend.PrefetchResultError
     */
    errors: PrefetchResultError;
}
/**
 * An object that is returned when a resource prefetch is unsuccessful.
 */
interface PrefetchResultError {
    /**
     * The names of the pages for which prefetch failed.
     * @requiredField pages
     */
    pages: string[];
    /**
     * The names of the lightbox for which prefetch failed.
     * @requiredField lightboxes
     */
    lightboxes: string[];
}
/**
 * An object that contains information about the site's prefixes.
 */
interface Prefix {
    /**
     * The name of the prefix.
     * @requiredField name
     */
    name: string;
    /**
     * The type of the prefix.
     *
     *  A site's routers, dynamic pages, and app pages all have prefixes.
     *
     *  One of:
     *
     *  + `"dynamicPages"`
     *  + `"router"`
     *  + `"app"`
     * @requiredField type
     */
    type: string;
    /**
     * The prefix.
     * @requiredField prefix
     */
    prefix: string;
    /**
     * If the prefix is an app's prefix, the `applicationId` property is the app's ID.
     */
    applicationId?: string;
}
/**
 * An object that contains information about the site's pages, prefixes, and lightboxes.
 */
interface SiteStructure {
    /**
     * The pages of the site.
     *  Pages can be regular pages, dynamic pages, router pages, or pages from an app.
     * @requiredField pages
     * @servicePath wix-site-frontend.StructurePage
     */
    pages: StructurePage[];
    /**
     * The prefixes of the site's routers and dynamic pages.
     * @requiredField prefixes
     * @servicePath wix-site-frontend.Prefix
     */
    prefixes: Prefix[];
    /**
     * The site's lightboxes.
     * @requiredField lightboxes
     * @servicePath wix-site-frontend.StructureLightbox
     */
    lightboxes: StructureLightbox[];
}
/**
 * An object that contains information about a lightbox on the site.
 */
interface StructureLightbox {
    /**
     * The name of the lightbox.
     * @requiredField name
     */
    name: string;
}
/**
 * An object that contains information about a page on the site.
 */
interface StructurePage {
    /**
     * The name of the page.
     * @requiredField name
     */
    name: string;
    /**
     * The type of the page: `"static"` or `"template"`.
     * @requiredField type
     */
    type: string;
    /**
     * The URL of the page. If the page is a `static` page the `url` property is the page's SEO URL.
     */
    url?: string;
    /**
     * If the page is an app page, the `applicationId` property is the app's ID.
     */
    applicationId?: string;
    /**
     * If the page is a router or dynamic page, the `prefix` property is the page's prefix.
     */
    prefix?: string;
    /**
     * If the page is the Home page, `isHomePage` is `true`. Otherwise, it does not exist.
     */
    isHomePage?: boolean;
}
/**
 * The options used when getting the HTML element.
 */
interface getFontsHtmlOptions {
    /**
     * An identifier that is added in a `data-test-id` attribute on the returned HTML element. Use this identifier to locate the HTML element when testing your code.
     * @requiredField testId
     */
    testId: string;
}
/**
 * The options used when getting HTML element.
 */
interface getSiteThemeHtmlOptions {
    /**
     * An identifier that is added in a `data-test-id` attribute on the returned HTML element. You can use this identifier to locate the HTML element when testing your code.
     * @requiredField testId
     */
    testId: string;
}

/**
 * Gets a code representing the site's currency.
 *
 * The retrieved currency code corresponds to the currency that has been
 *  entered in the General Info section of your site's Dashboard.
 *
 *  The currency is used your site, apps (e.g. Wix Stores, Wix Bookings), and other
 *  Wix features.
 * @readonly
 */
declare function currency(): Promise<string>;
/**
 * Gets information about the current page or lightbox.
 * @readonly
 * @servicePath wix-site-frontend.StructurePage
 * @servicePath wix-site-frontend.StructureLightbox
 */
declare function currentPage(): Promise<StructurePage | StructureLightbox>;
/**
 * Gets a code representing the site's language.
 *
 * The retrieved language code corresponds to the main site language
 *  as found in the General Info section of your site's Dashboard.
 *
 *  > **Note:** If you have a multilingual site, and it is being viewed in a language
 *  that is not the main site language, the `language` property still returns
 *  the main site language. To work with the languages of a multilingual site,
 *  use the [Multilingual API](https://dev.wix.com/docs/velo/api-reference/wix-window-frontend/multilingual/introduction).
 * @readonly
 */
declare function language(): Promise<string>;
/**
 * Gets the site's regional settings.
 *
 * The retrieved regional settings corresponds to the regional settings
 *  that has been entered in the General Info section of your site's Dashboard.
 *
 *  The regional settings are used to determine how numbers, dates, and currencies
 *  are displayed on your site.
 * @readonly
 */
declare function regionalSettings(): Promise<string>;
/**
 * Gets the site revision ID.
 *
 * The site revision ID is a unique identifier for the current revision of
 *  your site. Each time you manually save your site or publish your site
 *  following a change, a new revision is created.
 *
 * You can view and manage your site revisions in your [Site History](https://support.wix.com/en/article/viewing-and-managing-your-site-history).
 * You can use [site monitoring](https://support.wix.com/en/article/about-site-monitoring#site-revisions) to
 * monitor and debug new revisions of your site.
 *
 *  > **Notes:**
 *  > + Since publishing your site may change the revision ID, the ID when
 *  >   previewing your site may be different than the ID for the published site.
 * >
 * >
 * > + The site revision ID is guaranteed to be unique, but not meaningful.
 * >   Therefore, you cannot predict future revision IDs before they are created.
 * @readonly
 */
declare function revision(): Promise<string>;
/**
 * Gets the site's timezone.
 *
 * The retrieved timezone is the timezone that has been
 *  entered in the General Info section of your site's Dashboard.
 *
 *  The timezone is used your site, apps (e.g. Wix Stores, Wix Bookings), and other
 *  Wix features.
 * @readonly
 */
declare function timezone(): Promise<string>;
/**
 * Gets an HTML element containing CSS code to load fonts.
 *
 * Use the `getFontsHtml()` function to get an HTML element containing the CSS code that loads one or more fonts.
 * Use this function when embedding a custom element in a Wix site where the page's stylesheet fonts
 * are inaccessible, such as when using a shadow root or an internal iframe.
 * @param fonts - List of fonts to be loaded, where each font is represented by a value of a `font` CSS property.
 * @requiredField fonts
 * @param options - The options used when getting the HTML element.
 * @servicePath wix-site-frontend.getFontsHtmlOptions
 * @returns Fulfilled - HTML element containing the CSS code that loads the fonts.
 */
declare function getFontsHtml(fonts: string[], options?: getFontsHtmlOptions): Promise<string>;
/**
 * Gets the site display name.
 *
 * Retrieves the site display name, which is the name that
 *  has been entered in the **Website Settings** section of the site's [**Dashboard**](https://support.wix.com/en/article/wix-dashboard-overview).
 *
 * @returns The site display name.
 */
declare function getSiteDisplayName(): Promise<string>;
/**
 * Returns information about the site's pages, prefixes, and lightboxes.
 *
 * The returned `SiteStructure` object is a flattened representation of the site.
 *  The structure does not include the headers and links from the site's **Pages** menu.
 *
 * @returns An object that contains information about the site's pages, prefixes, and lightboxes.
 * @servicePath wix-site-frontend.SiteStructure
 */
declare function getSiteStructure(): Promise<SiteStructure>;
/**
 * Gets the CSS code of the site's theme.
 * Use the `getSiteThemeHtml()` function to get an HTML element containing the CSS code of a site's
 * [theme colors and fonts](https://support.wix.com/en/article/wix-editor-customizing-your-sites-theme-and-design).
 * Use this function when embedding a custom element in a Wix site where the page's stylesheet
 * is inaccessible, such as when using a shadow root or an internal iframe.
 * @param options - The options used when getting the HTML element.
 * @servicePath wix-site-frontend.getSiteThemeHtmlOptions
 * @returns Fulfilled - HTML element containing site's theme CSS.
 */
declare function getSiteThemeHtml(options?: getSiteThemeHtmlOptions): Promise<string>;
/**
 * Optimizes resource fetching of pages and lightboxes in the site so they will load faster.
 *
 * Use the `prefetchPageResources()` function to optimize resource fetching of pages and
 *  lightboxes you think your site visitors are likely to visit next. When the site
 *  visitor navigates to those pages or lightboxes, they will load quicker than usual
 *  since some of their resources have already been retrieved.
 *
 *  You can only prefetch resources from pages or lightboxes within the current site.
 *
 *  A prefetch is considered successful if the specified pages and lightboxes exist in
 *  the current site. If any of the specified pages or lightboxes do not exist, the
 *  prefetch operation returns an error status and lists of the pages and lightboxes
 *  that were not found.
 * @param prefetchItems - The items within the site to prefetch resources for.
 * @requiredField prefetchItems
 * @servicePath wix-site-frontend.PrefetchItems
 * @returns Results of a prefetch.
 * @servicePath wix-site-frontend.PrefetchResult
 */
declare function prefetchPageResources(prefetchItems: PrefetchItems): Promise<PrefetchResult>;
/**
 * Returns the sitemap for a router or dynamic page prefix.
 *
 * The `routerSitemap()` function returns a Promise that resolves to a list of
 *  [`WixSitemapEntry`](https://dev.wix.com/docs/velo/api-reference/wix-router/wix-router-sitemap-entry) objects. Each
 *  [`WixSitemapEntry`](https://dev.wix.com/docs/velo/api-reference/wix-router/wix-router-sitemap-entry) includes
 *  information about a page, such as its URL, title, and name.
 *
 *  A sitemap is used by search engines to find the links to the site's pages.
 * @param routerPrefix - The prefix of the router to get the sitemap for.
 * @requiredField routerPrefix
 * @returns Fulfilled - A list of sitemap entries.
 * Rejected - The error that caused the rejection.
 * @servicePath wix-site-frontend.WixRouterSitemapEntry
 */
declare function routerSitemap(routerPrefix: string): Promise<WixRouterSitemapEntry[]>;

declare const siteSdkModuleContext_currency: typeof currency;
declare const siteSdkModuleContext_currentPage: typeof currentPage;
declare const siteSdkModuleContext_getFontsHtml: typeof getFontsHtml;
declare const siteSdkModuleContext_getSiteDisplayName: typeof getSiteDisplayName;
declare const siteSdkModuleContext_getSiteStructure: typeof getSiteStructure;
declare const siteSdkModuleContext_getSiteThemeHtml: typeof getSiteThemeHtml;
declare const siteSdkModuleContext_language: typeof language;
declare const siteSdkModuleContext_prefetchPageResources: typeof prefetchPageResources;
declare const siteSdkModuleContext_regionalSettings: typeof regionalSettings;
declare const siteSdkModuleContext_revision: typeof revision;
declare const siteSdkModuleContext_routerSitemap: typeof routerSitemap;
declare const siteSdkModuleContext_timezone: typeof timezone;
declare namespace siteSdkModuleContext {
  export { siteSdkModuleContext_currency as currency, siteSdkModuleContext_currentPage as currentPage, siteSdkModuleContext_getFontsHtml as getFontsHtml, siteSdkModuleContext_getSiteDisplayName as getSiteDisplayName, siteSdkModuleContext_getSiteStructure as getSiteStructure, siteSdkModuleContext_getSiteThemeHtml as getSiteThemeHtml, siteSdkModuleContext_language as language, siteSdkModuleContext_prefetchPageResources as prefetchPageResources, siteSdkModuleContext_regionalSettings as regionalSettings, siteSdkModuleContext_revision as revision, siteSdkModuleContext_routerSitemap as routerSitemap, siteSdkModuleContext_timezone as timezone };
}

type Methods<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const siteContext: Methods<typeof siteSdkModuleContext>;

export { siteContext as site, wixRouterSitemapEntryContext as wixRouterSitemapEntry };
