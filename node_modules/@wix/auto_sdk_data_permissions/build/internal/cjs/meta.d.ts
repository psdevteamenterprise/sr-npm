import { GetPermissionsRequest as GetPermissionsRequest$1, GetPermissionsResponse as GetPermissionsResponse$1, UpdatePermissionsRequest as UpdatePermissionsRequest$1, UpdatePermissionsResponse as UpdatePermissionsResponse$1, AddSpecialPermissionsRequest as AddSpecialPermissionsRequest$1, AddSpecialPermissionsResponse as AddSpecialPermissionsResponse$1, UpdateSpecialPermissionsRequest as UpdateSpecialPermissionsRequest$1, UpdateSpecialPermissionsResponse as UpdateSpecialPermissionsResponse$1, RemoveSpecialPermissionsRequest as RemoveSpecialPermissionsRequest$1, RemoveSpecialPermissionsResponse as RemoveSpecialPermissionsResponse$1, GetMyPermissionsRequest as GetMyPermissionsRequest$1, GetMyPermissionsResponse as GetMyPermissionsResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

/** Permissions configuration for a data collection. */
interface DataPermissions {
    /**
     * ID of the data collection these permissions apply to.
     * @immutable
     * @maxLength 255
     */
    id?: string;
    /** Read items from the collection. */
    itemRead?: AccessLevelWithLiterals;
    /** Create new items in the collection. */
    itemInsert?: AccessLevelWithLiterals;
    /** Update existing items in the collection. */
    itemUpdate?: AccessLevelWithLiterals;
    /** Remove items from the collection. */
    itemRemove?: AccessLevelWithLiterals;
}
/** Minimum access level required to perform an action on collection items. Each access level includes the permissions of lower restriction levels */
declare enum AccessLevel {
    /** Access level is not set. */
    UNKNOWN = "UNKNOWN",
    /** Any user, including site visitors ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-identities#site-visitor) | [REST](https://dev.wix.com/docs/rest/articles/get-started/about-identities#site-visitor)). */
    ANYONE = "ANYONE",
    /** Logged-in users, including site members ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-identities#site-member) | [REST](https://dev.wix.com/docs/rest/articles/get-started/about-identities#site-member)) and [collaborators](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site). */
    SITE_MEMBER = "SITE_MEMBER",
    /** Logged-in site members ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-identities#site-member) | [REST](https://dev.wix.com/docs/rest/articles/get-started/about-identities#site-member)) and [collaborators](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site). Members can only access items they created. */
    SITE_MEMBER_AUTHOR = "SITE_MEMBER_AUTHOR",
    /** Site [collaborators with a CMS role](https://support.wix.com/en/article/roles-permissions-overview#roles-for-integrated-wix-apps) permissions. */
    CMS_EDITOR = "CMS_EDITOR",
    /**
     * Site administrators, users, or roles with special permissions.
     *
     * Learn more about [roles for site management](https://support.wix.com/en/article/roles-permissions-overview#general-roles-for-site-management).
     */
    PRIVILEGED = "PRIVILEGED"
}
/** @enumType */
type AccessLevelWithLiterals = AccessLevel | 'UNKNOWN' | 'ANYONE' | 'SITE_MEMBER' | 'SITE_MEMBER_AUTHOR' | 'CMS_EDITOR' | 'PRIVILEGED';
interface SpecialPermissions extends SpecialPermissionsSubjectOneOf {
    /**
     * ID of the user to add these special permissions to.
     * @immutable
     * @maxLength 64
     */
    userId?: string;
    /**
     * ID of the policy or role to add these special permissions to.
     * @immutable
     * @maxLength 64
     */
    policyId?: string;
    /**
     * ID of the special permissions.
     * @format GUID
     * @readonly
     */
    id?: string;
    /** Read items from the collection. */
    itemRead?: AccessWithLiterals;
    /** Create new items in the collection. */
    itemInsert?: AccessWithLiterals;
    /** Update existing items in the collection. */
    itemUpdate?: AccessWithLiterals;
    /** Remove items from the collection. */
    itemRemove?: AccessWithLiterals;
}
/** @oneof */
interface SpecialPermissionsSubjectOneOf {
    /**
     * ID of the user to add these special permissions to.
     * @immutable
     * @maxLength 64
     */
    userId?: string;
    /**
     * ID of the policy or role to add these special permissions to.
     * @immutable
     * @maxLength 64
     */
    policyId?: string;
}
declare enum Access {
    /** No special permissions are specified for this action. The collection's default access level applies. */
    UNSPECIFIED = "UNSPECIFIED",
    /** Special permission is granted to perform this action. This overrides the collection's access level configuration. */
    ALLOWED = "ALLOWED"
}
/** @enumType */
type AccessWithLiterals = Access | 'UNSPECIFIED' | 'ALLOWED';
interface GetPermissionsRequest {
    /**
     * ID of the data collection to retrieve permissions for.
     * @maxLength 256
     */
    dataCollectionId: string;
}
interface GetPermissionsResponse {
    /** Permissions for the specified collection. */
    dataPermissions?: DataPermissions;
}
interface UpdatePermissionsRequest {
    /** Permissions to update. */
    dataPermissions: DataPermissions;
}
interface UpdatePermissionsResponse {
    /** Updated permissions for the specified collection. */
    dataPermissions?: DataPermissions;
}
interface AddSpecialPermissionsRequest {
    /**
     * ID of the data collection to grant special permissions for.
     * @maxLength 256
     */
    dataCollectionId: string;
    /** Special permissions to add to the user or role. */
    specialPermissions: SpecialPermissions;
}
interface AddSpecialPermissionsResponse {
    /** Special permissions added to the user or role. */
    specialPermissions?: SpecialPermissions;
}
interface UpdateSpecialPermissionsRequest {
    /** Special permissions to update. */
    specialPermissions: SpecialPermissions;
}
interface UpdateSpecialPermissionsResponse {
    /** Updated special permissions for the specified user or role. */
    specialPermissions?: SpecialPermissions;
}
interface RemoveSpecialPermissionsRequest {
    /**
     * ID of the special permissions to remove.
     * @format GUID
     */
    specialPermissionsId: string;
}
interface RemoveSpecialPermissionsResponse {
}
interface GetMyPermissionsRequest {
    /**
     * ID of the data collection to check permissions for.
     * @maxLength 256
     */
    dataCollectionId: string;
}
interface GetMyPermissionsResponse {
    /** Whether the current user can read items from the collection. */
    itemRead?: boolean;
    /** Whether the current user can create new items in the collection. */
    itemInsert?: boolean;
    /** Whether the current user can update existing items in the collection. */
    itemUpdate?: boolean;
    /** Whether the current user can remove items from the collection. */
    itemRemove?: boolean;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getPermissions(): __PublicMethodMetaInfo<'GET', {}, GetPermissionsRequest$1, GetPermissionsRequest, GetPermissionsResponse$1, GetPermissionsResponse>;
declare function updatePermissions(): __PublicMethodMetaInfo<'POST', {}, UpdatePermissionsRequest$1, UpdatePermissionsRequest, UpdatePermissionsResponse$1, UpdatePermissionsResponse>;
declare function addSpecialPermissions(): __PublicMethodMetaInfo<'POST', {}, AddSpecialPermissionsRequest$1, AddSpecialPermissionsRequest, AddSpecialPermissionsResponse$1, AddSpecialPermissionsResponse>;
declare function updateSpecialPermissions(): __PublicMethodMetaInfo<'POST', {
    specialPermissionsId: string;
}, UpdateSpecialPermissionsRequest$1, UpdateSpecialPermissionsRequest, UpdateSpecialPermissionsResponse$1, UpdateSpecialPermissionsResponse>;
declare function removeSpecialPermissions(): __PublicMethodMetaInfo<'DELETE', {
    specialPermissionsId: string;
}, RemoveSpecialPermissionsRequest$1, RemoveSpecialPermissionsRequest, RemoveSpecialPermissionsResponse$1, RemoveSpecialPermissionsResponse>;
declare function getMyPermissions(): __PublicMethodMetaInfo<'GET', {}, GetMyPermissionsRequest$1, GetMyPermissionsRequest, GetMyPermissionsResponse$1, GetMyPermissionsResponse>;

export { type __PublicMethodMetaInfo, addSpecialPermissions, getMyPermissions, getPermissions, removeSpecialPermissions, updatePermissions, updateSpecialPermissions };
