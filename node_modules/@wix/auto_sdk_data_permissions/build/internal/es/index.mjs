// src/data-v1-data-permissions-permissions.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/data-v1-data-permissions-permissions.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixCloudPermissionsV1DataPermissionsServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/cloud-data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/cloud-data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/cloud-data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/cloud-data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/wix-data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ],
    _: [
      {
        srcPath: "/_api/data/v1/permissions",
        destPath: "/v1/permissions"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_data_permissions";
function getPermissions(payload) {
  function __getPermissions({ host }) {
    const metadata = {
      entityFqdn: "wix.data.v1.data_permissions",
      method: "GET",
      methodFqn: "wix.cloud.permissions.v1.DataPermissionsService.GetPermissions",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudPermissionsV1DataPermissionsServiceUrl({
        protoPath: "/v1/permissions",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getPermissions;
}
function updatePermissions(payload) {
  function __updatePermissions({ host }) {
    const metadata = {
      entityFqdn: "wix.data.v1.data_permissions",
      method: "POST",
      methodFqn: "wix.cloud.permissions.v1.DataPermissionsService.UpdatePermissions",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudPermissionsV1DataPermissionsServiceUrl({
        protoPath: "/v1/permissions",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __updatePermissions;
}
function addSpecialPermissions(payload) {
  function __addSpecialPermissions({ host }) {
    const metadata = {
      entityFqdn: "wix.data.v1.data_permissions",
      method: "POST",
      methodFqn: "wix.cloud.permissions.v1.DataPermissionsService.AddSpecialPermissions",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudPermissionsV1DataPermissionsServiceUrl({
        protoPath: "/v1/permissions/special",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addSpecialPermissions;
}
function updateSpecialPermissions(payload) {
  function __updateSpecialPermissions({ host }) {
    const metadata = {
      entityFqdn: "wix.data.v1.data_permissions",
      method: "POST",
      methodFqn: "wix.cloud.permissions.v1.DataPermissionsService.UpdateSpecialPermissions",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudPermissionsV1DataPermissionsServiceUrl({
        protoPath: "/v1/permissions/special/{specialPermissions.id}",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __updateSpecialPermissions;
}
function removeSpecialPermissions(payload) {
  function __removeSpecialPermissions({ host }) {
    const metadata = {
      entityFqdn: "wix.data.v1.data_permissions",
      method: "DELETE",
      methodFqn: "wix.cloud.permissions.v1.DataPermissionsService.RemoveSpecialPermissions",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudPermissionsV1DataPermissionsServiceUrl({
        protoPath: "/v1/permissions/special/{specialPermissionsId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __removeSpecialPermissions;
}
function getMyPermissions(payload) {
  function __getMyPermissions({ host }) {
    const metadata = {
      entityFqdn: "wix.data.v1.data_permissions",
      method: "GET",
      methodFqn: "wix.cloud.permissions.v1.DataPermissionsService.GetMyPermissions",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudPermissionsV1DataPermissionsServiceUrl({
        protoPath: "/v1/permissions/current",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getMyPermissions;
}

// src/data-v1-data-permissions-permissions.universal.ts
var AccessLevel = /* @__PURE__ */ ((AccessLevel2) => {
  AccessLevel2["UNKNOWN"] = "UNKNOWN";
  AccessLevel2["ANYONE"] = "ANYONE";
  AccessLevel2["SITE_MEMBER"] = "SITE_MEMBER";
  AccessLevel2["SITE_MEMBER_AUTHOR"] = "SITE_MEMBER_AUTHOR";
  AccessLevel2["CMS_EDITOR"] = "CMS_EDITOR";
  AccessLevel2["PRIVILEGED"] = "PRIVILEGED";
  return AccessLevel2;
})(AccessLevel || {});
var Access = /* @__PURE__ */ ((Access2) => {
  Access2["UNSPECIFIED"] = "UNSPECIFIED";
  Access2["ALLOWED"] = "ALLOWED";
  return Access2;
})(Access || {});
var SubjectType = /* @__PURE__ */ ((SubjectType2) => {
  SubjectType2["UNKNOWN"] = "UNKNOWN";
  SubjectType2["ACCOUNT"] = "ACCOUNT";
  SubjectType2["USER"] = "USER";
  SubjectType2["USER_GROUP"] = "USER_GROUP";
  SubjectType2["MEMBER_GROUP"] = "MEMBER_GROUP";
  SubjectType2["VISITOR_GROUP"] = "VISITOR_GROUP";
  SubjectType2["EXTERNAL_APP"] = "EXTERNAL_APP";
  SubjectType2["ACCOUNT_GROUP"] = "ACCOUNT_GROUP";
  SubjectType2["WIX_APP"] = "WIX_APP";
  return SubjectType2;
})(SubjectType || {});
var SubjectContextType = /* @__PURE__ */ ((SubjectContextType2) => {
  SubjectContextType2["UNKNOWN_CTX"] = "UNKNOWN_CTX";
  SubjectContextType2["ORG_CTX"] = "ORG_CTX";
  SubjectContextType2["ACCOUNT_CTX"] = "ACCOUNT_CTX";
  return SubjectContextType2;
})(SubjectContextType || {});
var SimpleConditionOperator = /* @__PURE__ */ ((SimpleConditionOperator2) => {
  SimpleConditionOperator2["UNKNOWN_SIMPLE_OP"] = "UNKNOWN_SIMPLE_OP";
  SimpleConditionOperator2["EQUAL"] = "EQUAL";
  return SimpleConditionOperator2;
})(SimpleConditionOperator || {});
var JoinedConditionOperator = /* @__PURE__ */ ((JoinedConditionOperator2) => {
  JoinedConditionOperator2["UNKNOWN_JOIN_OP"] = "UNKNOWN_JOIN_OP";
  JoinedConditionOperator2["OR"] = "OR";
  JoinedConditionOperator2["AND"] = "AND";
  return JoinedConditionOperator2;
})(JoinedConditionOperator || {});
var Effect = /* @__PURE__ */ ((Effect2) => {
  Effect2["UNKNOWN_EFFECT"] = "UNKNOWN_EFFECT";
  Effect2["ALLOW"] = "ALLOW";
  Effect2["DENY"] = "DENY";
  return Effect2;
})(Effect || {});
var PolicyType = /* @__PURE__ */ ((PolicyType2) => {
  PolicyType2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  PolicyType2["PREDEFINED"] = "PREDEFINED";
  PolicyType2["CUSTOM"] = "CUSTOM";
  PolicyType2["INLINE_CUSTOM"] = "INLINE_CUSTOM";
  return PolicyType2;
})(PolicyType || {});
var PolicyOwnerType = /* @__PURE__ */ ((PolicyOwnerType2) => {
  PolicyOwnerType2["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
  PolicyOwnerType2["WIX"] = "WIX";
  PolicyOwnerType2["WIX_ACCOUNT"] = "WIX_ACCOUNT";
  return PolicyOwnerType2;
})(PolicyOwnerType || {});
async function getPermissions2(dataCollectionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    dataCollectionId
  });
  const reqOpts = getPermissions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { dataCollectionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["dataCollectionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updatePermissions2(dataPermissions) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    dataPermissions
  });
  const reqOpts = updatePermissions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { dataPermissions: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["dataPermissions"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addSpecialPermissions2(dataCollectionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    dataCollectionId,
    specialPermissions: options?.specialPermissions
  });
  const reqOpts = addSpecialPermissions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          dataCollectionId: "$[0]",
          specialPermissions: "$[1].specialPermissions"
        },
        singleArgumentUnchanged: false
      },
      ["dataCollectionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateSpecialPermissions2(_id, specialPermissions) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    specialPermissions: { ...specialPermissions, id: _id }
  });
  const reqOpts = updateSpecialPermissions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { specialPermissions: "$[1]" },
        explicitPathsToArguments: { "specialPermissions.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "specialPermissions"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeSpecialPermissions2(specialPermissionsId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    specialPermissionsId
  });
  const reqOpts = removeSpecialPermissions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { specialPermissionsId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["specialPermissionsId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getMyPermissions2(dataCollectionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    dataCollectionId
  });
  const reqOpts = getMyPermissions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { dataCollectionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["dataCollectionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/data-v1-data-permissions-permissions.public.ts
function getPermissions3(httpClient) {
  return (dataCollectionId) => getPermissions2(
    dataCollectionId,
    // @ts-ignore
    { httpClient }
  );
}
function updatePermissions3(httpClient) {
  return (dataPermissions) => updatePermissions2(
    dataPermissions,
    // @ts-ignore
    { httpClient }
  );
}
function addSpecialPermissions3(httpClient) {
  return (dataCollectionId, options) => addSpecialPermissions2(
    dataCollectionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateSpecialPermissions3(httpClient) {
  return (_id, specialPermissions) => updateSpecialPermissions2(
    _id,
    specialPermissions,
    // @ts-ignore
    { httpClient }
  );
}
function removeSpecialPermissions3(httpClient) {
  return (specialPermissionsId) => removeSpecialPermissions2(
    specialPermissionsId,
    // @ts-ignore
    { httpClient }
  );
}
function getMyPermissions3(httpClient) {
  return (dataCollectionId) => getMyPermissions2(
    dataCollectionId,
    // @ts-ignore
    { httpClient }
  );
}

// src/data-v1-data-permissions-permissions.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var getPermissions4 = /* @__PURE__ */ createRESTModule(getPermissions3);
var updatePermissions4 = /* @__PURE__ */ createRESTModule(updatePermissions3);
var addSpecialPermissions4 = /* @__PURE__ */ createRESTModule(addSpecialPermissions3);
var updateSpecialPermissions4 = /* @__PURE__ */ createRESTModule(updateSpecialPermissions3);
var removeSpecialPermissions4 = /* @__PURE__ */ createRESTModule(removeSpecialPermissions3);
var getMyPermissions4 = /* @__PURE__ */ createRESTModule(getMyPermissions3);
export {
  Access,
  AccessLevel,
  Effect,
  JoinedConditionOperator,
  PolicyOwnerType,
  PolicyType,
  SimpleConditionOperator,
  SubjectContextType,
  SubjectType,
  addSpecialPermissions4 as addSpecialPermissions,
  getMyPermissions4 as getMyPermissions,
  getPermissions4 as getPermissions,
  removeSpecialPermissions4 as removeSpecialPermissions,
  updatePermissions4 as updatePermissions,
  updateSpecialPermissions4 as updateSpecialPermissions
};
//# sourceMappingURL=index.mjs.map