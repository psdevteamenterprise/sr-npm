import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { GetPermissionsResponse, GetPermissionsApplicationErrors, DataPermissions, UpdatePermissionsResponse, UpdatePermissionsApplicationErrors, AddSpecialPermissionsOptions, AddSpecialPermissionsResponse, AddSpecialPermissionsApplicationErrors, UpdateSpecialPermissions, UpdateSpecialPermissionsResponse, UpdateSpecialPermissionsApplicationErrors, RemoveSpecialPermissionsApplicationErrors, GetMyPermissionsResponse, GetMyPermissionsApplicationErrors } from './index.typings.js';
export { Access, AccessLevel, ActionEvent, AddSpecialPermissionsRequest, Condition, ConditionOperator, ConditionOperatorOperatorsOneOf, ConditionType, ConditionTypeOfOneOf, ConditionValue, ConditionValueValueOneOf, DependOnOperator, DomainEvent, DomainEventBodyOneOf, Effect, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EnvironmentCondition, EnvironmentConditionConditionOneOf, EqualOperator, ExperimentCondition, ExperimentOperator, GetMyPermissionsRequest, GetPermissionsRequest, JoinedCondition, JoinedConditionOperator, LikeOperator, MigrateCustomRolesRequest, MigrateCustomRolesResponse, PolicyAssigned, PolicyAssignment, PolicyAssignmentUpdated, PolicyAssignmentsUpdated, PolicyAssignmentsUpdatedEventOneOf, PolicyAuthorizationDataUpdated, PolicyCondition, PolicyOwner, PolicyOwnerType, PolicyStatement, PolicyType, PolicyUnassigned, RemoveSpecialPermissionsRequest, RemoveSpecialPermissionsResponse, Resource, ResourcePath, RestoreInfo, SimpleCondition, SimpleConditionOperator, SimpleConditionValue, SimpleConditionValueValueOneOf, SpecialPermissions, SpecialPermissionsSubjectOneOf, Subject, SubjectContext, SubjectContextType, SubjectType, UpdatePermissionsRequest, UpdateSpecialPermissionsRequest } from './index.typings.js';

type DataPermissionsNonNullablePaths = `_id` | `itemRead` | `itemInsert` | `itemUpdate` | `itemRemove`;
declare function getPermissions$1(httpClient: HttpClient): GetPermissionsSignature;
interface GetPermissionsSignature {
    /**
     * Retrieves the current permissions configuration for a data collection.
     * @param - ID of the data collection to retrieve permissions for.
     */
    (dataCollectionId: string): Promise<NonNullablePaths<GetPermissionsResponse, {
        [P in DataPermissionsNonNullablePaths]: `dataPermissions.${P}`;
    }[DataPermissionsNonNullablePaths]> & {
        __applicationErrorsType?: GetPermissionsApplicationErrors;
    }>;
}
declare function updatePermissions$1(httpClient: HttpClient): UpdatePermissionsSignature;
interface UpdatePermissionsSignature {
    /**
     * Updates permissions configuration for the specified data collection.
     *
     * > **Note:** To manage special permissions, call Add Special Permissions ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/permissions/add-special-permissions) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-permissions/add-special-permissions)), Update Special Permissions ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/permissions/update-special-permissions) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-permissions/update-special-permissions)), or Remove Special Permissions ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/permissions/remove-special-permissions) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-permissions/remove-special-permissions)).
     * @param - Permissions to update.
     */
    (dataPermissions: NonNullablePaths<DataPermissions, `_id` | `itemInsert` | `itemRead` | `itemRemove` | `itemUpdate`>): Promise<NonNullablePaths<UpdatePermissionsResponse, {
        [P in DataPermissionsNonNullablePaths]: `dataPermissions.${P}`;
    }[DataPermissionsNonNullablePaths]> & {
        __applicationErrorsType?: UpdatePermissionsApplicationErrors;
    }>;
}
declare function addSpecialPermissions$1(httpClient: HttpClient): AddSpecialPermissionsSignature;
interface AddSpecialPermissionsSignature {
    /**
     * Adds special permissions to a specific user or role for the specified data collection.
     *
     * Special permissions allow specific users or roles to perform actions that would otherwise be restricted by the collection's access levels ([SDK](ADDLINK) | [REST](ADDLINK)).
     * @param - ID of the data collection to grant special permissions for.
     */
    (dataCollectionId: string, options: NonNullablePaths<AddSpecialPermissionsOptions, `specialPermissions`>): Promise<NonNullablePaths<AddSpecialPermissionsResponse, `specialPermissions.userId` | `specialPermissions.policyId` | `specialPermissions._id` | `specialPermissions.itemRead` | `specialPermissions.itemInsert` | `specialPermissions.itemUpdate` | `specialPermissions.itemRemove`> & {
        __applicationErrorsType?: AddSpecialPermissionsApplicationErrors;
    }>;
}
declare function updateSpecialPermissions$1(httpClient: HttpClient): UpdateSpecialPermissionsSignature;
interface UpdateSpecialPermissionsSignature {
    /**
     * Updates the special permissions for a specific user or role.
     *
     * > **Note:** Special permissions that aren't explicitly included in the request are set to `UNSPECIFIED` and are replaced by the collection's general access levels.
     * @param - ID of the special permissions.
     */
    (_id: string, specialPermissions: UpdateSpecialPermissions): Promise<NonNullablePaths<UpdateSpecialPermissionsResponse, `specialPermissions.userId` | `specialPermissions.policyId` | `specialPermissions._id` | `specialPermissions.itemRead` | `specialPermissions.itemInsert` | `specialPermissions.itemUpdate` | `specialPermissions.itemRemove`> & {
        __applicationErrorsType?: UpdateSpecialPermissionsApplicationErrors;
    }>;
}
declare function removeSpecialPermissions$1(httpClient: HttpClient): RemoveSpecialPermissionsSignature;
interface RemoveSpecialPermissionsSignature {
    /**
     * Removes special permissions from a specific user or role.
     *
     * After special permissions are removed, the user or role is subject to the collection's general access levels for all actions.
     * @param - ID of the special permissions to remove.
     */
    (specialPermissionsId: string): Promise<void & {
        __applicationErrorsType?: RemoveSpecialPermissionsApplicationErrors;
    }>;
}
declare function getMyPermissions$1(httpClient: HttpClient): GetMyPermissionsSignature;
interface GetMyPermissionsSignature {
    /**
     * Retrieves the current user's permissions for a data collection.
     * @param - ID of the data collection to check permissions for.
     */
    (dataCollectionId: string): Promise<NonNullablePaths<GetMyPermissionsResponse, `itemRead` | `itemInsert` | `itemUpdate` | `itemRemove`> & {
        __applicationErrorsType?: GetMyPermissionsApplicationErrors;
    }>;
}

declare const getPermissions: MaybeContext<BuildRESTFunction<typeof getPermissions$1> & typeof getPermissions$1>;
declare const updatePermissions: MaybeContext<BuildRESTFunction<typeof updatePermissions$1> & typeof updatePermissions$1>;
declare const addSpecialPermissions: MaybeContext<BuildRESTFunction<typeof addSpecialPermissions$1> & typeof addSpecialPermissions$1>;
declare const updateSpecialPermissions: MaybeContext<BuildRESTFunction<typeof updateSpecialPermissions$1> & typeof updateSpecialPermissions$1>;
declare const removeSpecialPermissions: MaybeContext<BuildRESTFunction<typeof removeSpecialPermissions$1> & typeof removeSpecialPermissions$1>;
declare const getMyPermissions: MaybeContext<BuildRESTFunction<typeof getMyPermissions$1> & typeof getMyPermissions$1>;

export { AddSpecialPermissionsOptions, AddSpecialPermissionsResponse, DataPermissions, GetMyPermissionsResponse, GetPermissionsResponse, UpdatePermissionsResponse, UpdateSpecialPermissions, UpdateSpecialPermissionsResponse, addSpecialPermissions, getMyPermissions, getPermissions, removeSpecialPermissions, updatePermissions, updateSpecialPermissions };
