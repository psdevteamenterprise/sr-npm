import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { ExternalDatabaseConnection, ListExternalDatabaseConnectionsOptions, ListExternalDatabaseConnectionsResponse, ConnectionTypeWithLiterals, UpdateExternalDatabaseConnection } from './index.typings.mjs';
export { ActionEvent, Capabilities, CauseOfFailure, CollectionsFound, ConnectionStatus, ConnectionType, CreateExternalDatabaseConnectionRequest, CreateExternalDatabaseConnectionResponse, DeleteExternalDatabaseConnectionRequest, DeleteExternalDatabaseConnectionResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, FieldType, GetExternalDatabaseConnectionRequest, GetExternalDatabaseConnectionResponse, IdentificationData, IdentificationDataIdOneOf, ListExternalDatabaseConnectionsRequest, MessageEnvelope, Paging, PagingMetadata, ProtocolVersion, RestoreInfo, UpdateExternalDatabaseConnectionRequest, UpdateExternalDatabaseConnectionResponse, WebhookIdentityType } from './index.typings.mjs';

type ExternalDatabaseConnectionNonNullablePaths = `name` | `connectionStatus.successful` | `connectionStatus.causeOfFailure` | `connectionStatus.hasCollections` | `capabilities.collectionModificationsSupported` | `capabilities.fieldTypes`;
declare function getExternalDatabaseConnection$1(httpClient: HttpClient): GetExternalDatabaseConnectionSignature;
interface GetExternalDatabaseConnectionSignature {
    /**
     * Retrieves the specified external database connection.
     * @param - Name of the external database connection to retrieve.
     * @returns Details of the retrieved external database connection.
     */
    (name: string): Promise<NonNullablePaths<ExternalDatabaseConnection, ExternalDatabaseConnectionNonNullablePaths>>;
}
declare function listExternalDatabaseConnections$1(httpClient: HttpClient): ListExternalDatabaseConnectionsSignature;
interface ListExternalDatabaseConnectionsSignature {
    /**
     * Lists all of the site's external database connections of all adaptor types.
     */
    (options?: ListExternalDatabaseConnectionsOptions): Promise<NonNullablePaths<ListExternalDatabaseConnectionsResponse, {
        [P in ExternalDatabaseConnectionNonNullablePaths]: `externalDatabaseConnections.${number}.${P}`;
    }[ExternalDatabaseConnectionNonNullablePaths]>>;
}
declare function createExternalDatabaseConnection$1(httpClient: HttpClient): CreateExternalDatabaseConnectionSignature;
interface CreateExternalDatabaseConnectionSignature {
    /**
     * Creates a new external database connection.
     *
     * Before you can establish a connection between a site and an external database, you must prepare an external database adaptor.
     * @param - External database connection details.
     * @param - Connection type. The connection type specifies the type of adaptor by which the external collection is integrated with the site.
     * @param - Options for creating an external database connection.
     * @returns Details of the created external database connection.
     */
    (externalDatabaseConnection: NonNullablePaths<ExternalDatabaseConnection, `name`>, connectionType: ConnectionTypeWithLiterals): Promise<NonNullablePaths<ExternalDatabaseConnection, ExternalDatabaseConnectionNonNullablePaths>>;
}
declare function updateExternalDatabaseConnection$1(httpClient: HttpClient): UpdateExternalDatabaseConnectionSignature;
interface UpdateExternalDatabaseConnectionSignature {
    /**
     * Updates an external database connection.
     *
     * > **Note:** After an external database connection is updated, it only contains the values provided in the request. All previous values are lost.
     * @param - Name of the external database connection.
     *
     * An external database connection can connect to one or more external data collections or tables. These appear as `connectionName/dataCollectionId`.
     * @param - Options for updating an external database connection.
     * @param - Updated external database connection details. The existing connection is replaced with this version.
     * @returns Details of the updated external database connection.
     */
    (name: string, externalDatabaseConnection: UpdateExternalDatabaseConnection): Promise<NonNullablePaths<ExternalDatabaseConnection, ExternalDatabaseConnectionNonNullablePaths>>;
}
declare function deleteExternalDatabaseConnection$1(httpClient: HttpClient): DeleteExternalDatabaseConnectionSignature;
interface DeleteExternalDatabaseConnectionSignature {
    /**
     * Deletes an external database connection.
     *
     * > **Note:** Once an external database connection is deleted, it can't be restored. To reconnect the database, create a new external database connection.
     * @param - Name of the external database connection to delete.
     */
    (name: string): Promise<void>;
}

declare const getExternalDatabaseConnection: MaybeContext<BuildRESTFunction<typeof getExternalDatabaseConnection$1> & typeof getExternalDatabaseConnection$1>;
declare const listExternalDatabaseConnections: MaybeContext<BuildRESTFunction<typeof listExternalDatabaseConnections$1> & typeof listExternalDatabaseConnections$1>;
declare const createExternalDatabaseConnection: MaybeContext<BuildRESTFunction<typeof createExternalDatabaseConnection$1> & typeof createExternalDatabaseConnection$1>;
declare const updateExternalDatabaseConnection: MaybeContext<BuildRESTFunction<typeof updateExternalDatabaseConnection$1> & typeof updateExternalDatabaseConnection$1>;
declare const deleteExternalDatabaseConnection: MaybeContext<BuildRESTFunction<typeof deleteExternalDatabaseConnection$1> & typeof deleteExternalDatabaseConnection$1>;

export { ExternalDatabaseConnection, ListExternalDatabaseConnectionsOptions, ListExternalDatabaseConnectionsResponse, UpdateExternalDatabaseConnection, createExternalDatabaseConnection, deleteExternalDatabaseConnection, getExternalDatabaseConnection, listExternalDatabaseConnections, updateExternalDatabaseConnection };
