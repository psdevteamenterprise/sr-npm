import { GetExternalDatabaseConnectionRequest as GetExternalDatabaseConnectionRequest$1, GetExternalDatabaseConnectionResponse as GetExternalDatabaseConnectionResponse$1, ListExternalDatabaseConnectionsRequest as ListExternalDatabaseConnectionsRequest$1, ListExternalDatabaseConnectionsResponse as ListExternalDatabaseConnectionsResponse$1, CreateExternalDatabaseConnectionRequest as CreateExternalDatabaseConnectionRequest$1, CreateExternalDatabaseConnectionResponse as CreateExternalDatabaseConnectionResponse$1, UpdateExternalDatabaseConnectionRequest as UpdateExternalDatabaseConnectionRequest$1, UpdateExternalDatabaseConnectionResponse as UpdateExternalDatabaseConnectionResponse$1, DeleteExternalDatabaseConnectionRequest as DeleteExternalDatabaseConnectionRequest$1, DeleteExternalDatabaseConnectionResponse as DeleteExternalDatabaseConnectionResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

/** An external database connection defines a connection between an external database and a Wix site. */
interface ExternalDatabaseConnection {
    /**
     * Name of the external database connection.
     *
     * An external database connection can connect to one or more external data collections or tables. These appear as `connectionName/dataCollectionId`.
     * @immutable
     * @minLength 1
     * @maxLength 255
     */
    name?: string;
    /**
     * Base URL for accessing and managing data in the external database. For example: `https://example.com/my-external-database`.
     * @format WEB_URL
     */
    endpoint?: string | null;
    /**
     * Settings specified to the external database connection as part of each request.
     *
     * These settings can relate to authentication, tenancy, or provide any other information necessary for processing a request. Their content and structure depend on the specific requirements of the external database's API.
     */
    configuration?: Record<string, any> | null;
    /**
     * Status of the external database connection. Includes whether the connection was established successfully, and if not, the reason for the failure.
     * @readonly
     */
    connectionStatus?: ConnectionStatus;
    /**
     * Public key used to validate requests to the external database.
     * @readonly
     * @maxLength 128
     */
    publicKey?: string | null;
    /**
     * Capabilities of the external database.
     * @readonly
     */
    capabilities?: Capabilities;
}
declare enum CauseOfFailure {
    /** No connection failure. */
    NONE = "NONE",
    /** General communication failure. */
    COMMUNICATION_FAILURE = "COMMUNICATION_FAILURE",
    /** External database host is unreachable. */
    DESTINATION_HOST_UNREACHABLE = "DESTINATION_HOST_UNREACHABLE",
    /** Unauthorized to access the external database. */
    UNAUTHORIZED = "UNAUTHORIZED",
    /** `endpoint` is not set. */
    DESTINATION_ENDPOINT_NOT_DEFINED = "DESTINATION_ENDPOINT_NOT_DEFINED"
}
/** @enumType */
type CauseOfFailureWithLiterals = CauseOfFailure | 'NONE' | 'COMMUNICATION_FAILURE' | 'DESTINATION_HOST_UNREACHABLE' | 'UNAUTHORIZED' | 'DESTINATION_ENDPOINT_NOT_DEFINED';
declare enum CollectionsFound {
    /** Attempt to connect to the external database failed, so status is unknown. */
    UNKNOWN = "UNKNOWN",
    /** External database has collections. */
    YES = "YES",
    /** External database does not have any collections. */
    NO = "NO"
}
/** @enumType */
type CollectionsFoundWithLiterals = CollectionsFound | 'UNKNOWN' | 'YES' | 'NO';
declare enum FieldType {
    UNKNOWN_FIELD_TYPE = "UNKNOWN_FIELD_TYPE",
    TEXT = "TEXT",
    NUMBER = "NUMBER",
    DATE = "DATE",
    DATETIME = "DATETIME",
    IMAGE = "IMAGE",
    BOOLEAN = "BOOLEAN",
    DOCUMENT = "DOCUMENT",
    URL = "URL",
    RICH_TEXT = "RICH_TEXT",
    VIDEO = "VIDEO",
    ANY = "ANY",
    ARRAY_STRING = "ARRAY_STRING",
    ARRAY_DOCUMENT = "ARRAY_DOCUMENT",
    AUDIO = "AUDIO",
    TIME = "TIME",
    LANGUAGE = "LANGUAGE",
    RICH_CONTENT = "RICH_CONTENT",
    MEDIA_GALLERY = "MEDIA_GALLERY",
    ADDRESS = "ADDRESS",
    PAGE_LINK = "PAGE_LINK",
    REFERENCE = "REFERENCE",
    MULTI_REFERENCE = "MULTI_REFERENCE",
    OBJECT = "OBJECT",
    ARRAY = "ARRAY",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_TIME = "LEGACY_TIME",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_BOOK = "LEGACY_BOOK",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_EXTERNAL_URL = "LEGACY_EXTERNAL_URL",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_BROKEN_REFERENCE = "LEGACY_BROKEN_REFERENCE",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_IMAGE = "LEGACY_IMAGE",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_COLOR = "LEGACY_COLOR",
    /** Deprecated - can’t be added to collections. Can only appear in older collections. */
    LEGACY_EXTERNAL_VIDEO = "LEGACY_EXTERNAL_VIDEO"
}
/** @enumType */
type FieldTypeWithLiterals = FieldType | 'UNKNOWN_FIELD_TYPE' | 'TEXT' | 'NUMBER' | 'DATE' | 'DATETIME' | 'IMAGE' | 'BOOLEAN' | 'DOCUMENT' | 'URL' | 'RICH_TEXT' | 'VIDEO' | 'ANY' | 'ARRAY_STRING' | 'ARRAY_DOCUMENT' | 'AUDIO' | 'TIME' | 'LANGUAGE' | 'RICH_CONTENT' | 'MEDIA_GALLERY' | 'ADDRESS' | 'PAGE_LINK' | 'REFERENCE' | 'MULTI_REFERENCE' | 'OBJECT' | 'ARRAY' | 'LEGACY_TIME' | 'LEGACY_BOOK' | 'LEGACY_EXTERNAL_URL' | 'LEGACY_BROKEN_REFERENCE' | 'LEGACY_IMAGE' | 'LEGACY_COLOR' | 'LEGACY_EXTERNAL_VIDEO';
interface ConnectionStatus {
    /** Whether the connection was established successfully. */
    successful?: boolean;
    /** Whether and why the connection attempt failed. */
    causeOfFailure?: CauseOfFailureWithLiterals;
    /**
     * Whether the external database has collections.
     * @readonly
     */
    hasCollections?: CollectionsFoundWithLiterals;
}
interface Capabilities {
    /** Whether the external database supports creating new collections, updating the structure of existing collections, or deleting them. */
    collectionModificationsSupported?: boolean;
    /**
     * Field types the external database supports. Applies only when `collectionModificationsSupported` is set to `true`.
     * @maxSize 255
     */
    fieldTypes?: FieldTypeWithLiterals[];
}
interface GetExternalDatabaseConnectionRequest {
    /**
     * Name of the external database connection to retrieve.
     * @maxLength 255
     */
    name: string;
}
interface GetExternalDatabaseConnectionResponse {
    /** Details of the retrieved external database connection. */
    externalDatabaseConnection?: ExternalDatabaseConnection;
}
interface ListExternalDatabaseConnectionsRequest {
    /** Paging metadata. */
    paging?: Paging;
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface ListExternalDatabaseConnectionsResponse {
    /** List of external database connections. */
    externalDatabaseConnections?: ExternalDatabaseConnection[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadata;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface CreateExternalDatabaseConnectionRequest {
    /** External database connection details. */
    externalDatabaseConnection: ExternalDatabaseConnection;
    /** Connection type. The connection type specifies the type of adaptor by which the external collection is integrated with the site. */
    connectionType: ConnectionTypeWithLiterals;
}
declare enum ConnectionType {
    /** Unknown connection type. */
    UNKNOWN_CONNECTION_TYPE = "UNKNOWN_CONNECTION_TYPE",
    /** External database connection based on the legacy [external database collection service plugin](https://dev.wix.com/docs/velo/api-reference/wix-data-v2/service-plugins-spis/external-database-collection-legacy/introduction). */
    STANDALONE = "STANDALONE",
    /** External database connection based on the [external database service plugin](https://dev.wix.com/docs/rest/business-solutions/cms/service-plugins/external-database-service-plugin/introduction). */
    WIX_SERVICE_PLUGIN = "WIX_SERVICE_PLUGIN"
}
/** @enumType */
type ConnectionTypeWithLiterals = ConnectionType | 'UNKNOWN_CONNECTION_TYPE' | 'STANDALONE' | 'WIX_SERVICE_PLUGIN';
interface CreateExternalDatabaseConnectionResponse {
    /** Details of the created external database connection. */
    externalDatabaseConnection?: ExternalDatabaseConnection;
}
interface UpdateExternalDatabaseConnectionRequest {
    /** Updated external database connection. The existing connection is replaced with this version. */
    externalDatabaseConnection: ExternalDatabaseConnection;
}
interface UpdateExternalDatabaseConnectionResponse {
    /** Details of the updated external database connection. */
    externalDatabaseConnection?: ExternalDatabaseConnection;
}
interface DeleteExternalDatabaseConnectionRequest {
    /**
     * Name of the external database connection to delete.
     * @maxLength 255
     */
    name: string;
}
interface DeleteExternalDatabaseConnectionResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getExternalDatabaseConnection(): __PublicMethodMetaInfo<'GET', {
    name: string;
}, GetExternalDatabaseConnectionRequest$1, GetExternalDatabaseConnectionRequest, GetExternalDatabaseConnectionResponse$1, GetExternalDatabaseConnectionResponse>;
declare function listExternalDatabaseConnections(): __PublicMethodMetaInfo<'GET', {}, ListExternalDatabaseConnectionsRequest$1, ListExternalDatabaseConnectionsRequest, ListExternalDatabaseConnectionsResponse$1, ListExternalDatabaseConnectionsResponse>;
declare function createExternalDatabaseConnection(): __PublicMethodMetaInfo<'POST', {}, CreateExternalDatabaseConnectionRequest$1, CreateExternalDatabaseConnectionRequest, CreateExternalDatabaseConnectionResponse$1, CreateExternalDatabaseConnectionResponse>;
declare function updateExternalDatabaseConnection(): __PublicMethodMetaInfo<'PUT', {
    externalDatabaseConnectionName: string;
}, UpdateExternalDatabaseConnectionRequest$1, UpdateExternalDatabaseConnectionRequest, UpdateExternalDatabaseConnectionResponse$1, UpdateExternalDatabaseConnectionResponse>;
declare function deleteExternalDatabaseConnection(): __PublicMethodMetaInfo<'DELETE', {
    name: string;
}, DeleteExternalDatabaseConnectionRequest$1, DeleteExternalDatabaseConnectionRequest, DeleteExternalDatabaseConnectionResponse$1, DeleteExternalDatabaseConnectionResponse>;

export { type __PublicMethodMetaInfo, createExternalDatabaseConnection, deleteExternalDatabaseConnection, getExternalDatabaseConnection, listExternalDatabaseConnections, updateExternalDatabaseConnection };
