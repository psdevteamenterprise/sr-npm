import { NonNullablePaths } from '@wix/sdk-types';

/** A data collection determines the structure of data to be stored in a database. */
interface DataCollection {
    /**
     * Collection ID. For example, `my-first-collection`. May include a namespace.
     * @immutable
     * @maxLength 256
     */
    _id?: string;
    /**
     * Collection type. Indicates how the collection was created and how it is stored.
     * @readonly
     */
    collectionType?: CollectionTypeWithLiterals;
    /**
     * ID of the app that defined this collection. For collections defined by Wix users, this value is null.
     * @format GUID
     * @readonly
     */
    ownerAppId?: string | null;
    /**
     * Maximum number of items returned in a single query, based on the underlying storage.
     * Native collections have a maximum page size of 1000 for offset-based queries or 100 for cursor-based queries.
     * External collections' maximum page size defaults to 50, but an external provider can set any maximum value up to 1000.
     * @readonly
     */
    maxPageSize?: number | null;
    /**
     * Collection's display name as shown in the CMS. For example, `My First Collection`.
     * @maxLength 1000
     */
    displayName?: string | null;
    /**
     * Default item sorting order when a query doesn't specify one.
     * @readonly
     */
    defaultDisplayOrder?: Sort;
    /**
     * UI-friendly namespace of the Wix app with which the data collection is associated, such as Stores or Bookings.
     * Empty for all data collections not owned by Wix apps.
     * @readonly
     * @maxLength 1000
     */
    displayNamespace?: string | null;
    /**
     * Field whose value the CMS displays to represent the collection item when referenced in a different collection.
     * @maxLength 1000
     */
    displayField?: string | null;
    /**
     * Capabilities the collection supports.
     * @readonly
     */
    capabilities?: CollectionCapabilities;
    /**
     * Collection's field structure.
     * @maxSize 1000
     */
    fields?: Field[];
    /** Levels of permission for accessing and modifying data, defined by lowest role needed to perform each action. */
    permissions?: Permissions;
    /**
     * Collection's current revision number, which increments each time the collection is updated. For an update operation to succeed, you must specify the latest revision number.
     * @readonly
     */
    revision?: string | null;
    /**
     * Plugins the collection uses. Plugins apply additional capabilities to the collection or extend its functionality.
     * @maxSize 100
     */
    plugins?: Plugin[];
    /**
     * Paging modes the collection supports. In native collections, offset-based paging is supported by default.
     * @readonly
     * @maxSize 2
     */
    pagingModes?: PagingModeWithLiterals[];
    /**
     * Date the collection was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date the collection was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
declare enum CollectionType {
    /** User-created collection. */
    NATIVE = "NATIVE",
    /** [Collection](https://support.wix.com/en/article/velo-working-with-wix-app-collections-and-code#what-are-wix-app-collections) created by a Wix app when it is installed. This type of collection can be modified dynamically by that app (for example, Wix Forms). */
    WIX_APP = "WIX_APP",
    /** Collection created by a Wix Blocks app. */
    BLOCKS_APP = "BLOCKS_APP",
    /** Collection located in externally connected storage. */
    EXTERNAL = "EXTERNAL"
}
/** @enumType */
type CollectionTypeWithLiterals = CollectionType | 'NATIVE' | 'WIX_APP' | 'BLOCKS_APP' | 'EXTERNAL';
interface Sort {
    /**
     * Field to sort by.
     * @maxLength 1000
     */
    fieldKey?: string;
    /**
     * Sort order. Use `ASC` for ascending order or `DESC` for descending order.
     *
     * Default: `ASC`
     */
    direction?: DirectionWithLiterals;
}
declare enum Direction {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type DirectionWithLiterals = Direction | 'ASC' | 'DESC';
interface CollectionCapabilities {
    /**
     * Data operations the collection supports. The listed operations can be performed on data the collection contains.
     *
     * > **Note**: The `PATCH` and `BULK_PATCH` oeprations aren't currently supported.
     * @maxSize 100
     */
    dataOperations?: DataOperationWithLiterals[];
    /**
     * Collection operations supported. The listed operations can be performed on the collection itself.
     * @maxSize 100
     */
    collectionOperations?: CollectionOperationWithLiterals[];
    /** Maximum number of indexes for the collection. */
    indexLimits?: IndexLimits;
}
declare enum DataOperation {
    AGGREGATE = "AGGREGATE",
    BULK_INSERT = "BULK_INSERT",
    BULK_REMOVE = "BULK_REMOVE",
    BULK_SAVE = "BULK_SAVE",
    BULK_UPDATE = "BULK_UPDATE",
    COUNT = "COUNT",
    DISTINCT = "DISTINCT",
    FIND = "FIND",
    GET = "GET",
    INSERT = "INSERT",
    INSERT_REFERENCE = "INSERT_REFERENCE",
    IS_REFERENCED = "IS_REFERENCED",
    QUERY_REFERENCED = "QUERY_REFERENCED",
    REMOVE = "REMOVE",
    REMOVE_REFERENCE = "REMOVE_REFERENCE",
    REPLACE_REFERENCES = "REPLACE_REFERENCES",
    SAVE = "SAVE",
    TRUNCATE = "TRUNCATE",
    UPDATE = "UPDATE",
    PATCH = "PATCH",
    BULK_PATCH = "BULK_PATCH"
}
/** @enumType */
type DataOperationWithLiterals = DataOperation | 'AGGREGATE' | 'BULK_INSERT' | 'BULK_REMOVE' | 'BULK_SAVE' | 'BULK_UPDATE' | 'COUNT' | 'DISTINCT' | 'FIND' | 'GET' | 'INSERT' | 'INSERT_REFERENCE' | 'IS_REFERENCED' | 'QUERY_REFERENCED' | 'REMOVE' | 'REMOVE_REFERENCE' | 'REPLACE_REFERENCES' | 'SAVE' | 'TRUNCATE' | 'UPDATE' | 'PATCH' | 'BULK_PATCH';
declare enum CollectionOperation {
    /** Allows updating the collection's structure, for example adding, updating, or deleting fields. If not included, the collection's structure can't be changed. */
    UPDATE = "UPDATE",
    /** Allows deleting the entire collection. If not included, the collection can't be deleted. */
    REMOVE = "REMOVE"
}
/** @enumType */
type CollectionOperationWithLiterals = CollectionOperation | 'UPDATE' | 'REMOVE';
interface IndexLimits {
    /** Maximum number of regular (non-unique) indexes allowed for this collection. */
    regular?: number;
    /** Maximum number of unique indexes allowed for this collection. */
    unique?: number;
    /** Maximum number of regular and unique indexes allowed for this collection. */
    total?: number;
}
interface IndexQuotaLimits {
    /**
     * limit of regular single-field indexes, even if 0 1-field indices may be created using
     * 3-field quota (if available)
     */
    regular1Field?: number;
    /** limit of regular indexes up to 3-fields (in addition to 1-field indexes quota) */
    regular3Field?: number;
    /** limit of unique indexes */
    unique1Field?: number;
    /** Maximum number of regular and unique indexes allowed for this collection. */
    total?: number;
}
interface Field extends FieldRangeValidationsOneOf {
    /** Range of possible values for a numerical field. */
    numberRange?: NumberRange;
    /** Length range permitted for a text field. Relevant for fields that hold strings, such as those of type `TEXT` or `RICH_TEXT`. */
    stringLengthRange?: StringLengthRange;
    /** Array size range permitted. Relevant for fields that hold arrays, such as those of type `ARRAY`, `ARRAY_STRING`, or `ARRAY_DOCUMENT`. */
    arraySizeRange?: ArraySizeRange;
    /**
     * Unique identifier for the field. For example, `firstName`.
     * @maxLength 1000
     */
    key?: string;
    /**
     * Field's display name when displayed in the CMS. For example, `First Name`.
     * @maxLength 1000
     */
    displayName?: string | null;
    /**
     * Field's data type.
     *
     * Learn more about data types in Wix Data ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/data-types-in-wix-data) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-types-in-wix-data)).
     */
    type?: TypeWithLiterals;
    /** Metadata for complex data types. This property only exists for references, multi-references, objects, and arrays. */
    typeMetadata?: TypeMetadata;
    /**
     * Whether the field is a system field.
     * @readonly
     */
    systemField?: boolean;
    /**
     * Capabilities the field supports.
     * @readonly
     */
    capabilities?: FieldCapabilities;
    /** Whether the field is encrypted. */
    encrypted?: boolean;
    /**
     * Field description.
     * @maxLength 16000
     */
    description?: string | null;
    /**
     * Whether the field is read-only. A read-only field can't be changed.
     *
     * Default: `false`
     */
    readOnly?: boolean | null;
    /**
     * Whether the field is immutable. An immutable field can be set once, but then cannot be updated.
     *
     * Default: `false`
     */
    immutable?: boolean | null;
    /**
     * Whether the field is required.
     *
     * Default: `false`
     */
    required?: boolean | null;
    /**
     * Additional optional plugins for the field.
     * @maxSize 100
     */
    plugins?: FieldPlugin[];
}
/** @oneof */
interface FieldRangeValidationsOneOf {
    /** Range of possible values for a numerical field. */
    numberRange?: NumberRange;
    /** Length range permitted for a text field. Relevant for fields that hold strings, such as those of type `TEXT` or `RICH_TEXT`. */
    stringLengthRange?: StringLengthRange;
    /** Array size range permitted. Relevant for fields that hold arrays, such as those of type `ARRAY`, `ARRAY_STRING`, or `ARRAY_DOCUMENT`. */
    arraySizeRange?: ArraySizeRange;
}
declare enum Type {
    UNKNOWN_FIELD_TYPE = "UNKNOWN_FIELD_TYPE",
    /** Plain-text string. */
    TEXT = "TEXT",
    /** Number. */
    NUMBER = "NUMBER",
    /** Date string in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`. */
    DATE = "DATE",
    /** [JavaScript Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/data-types-in-wix-data)) or an object in the following format: `"someFieldKey": { "$date": "YYYY-MM-DDTHH:mm:ss.sssZ"}` ([REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-types-in-wix-data)). */
    DATETIME = "DATETIME",
    /** Web URL or a [Media Manager](https://dev.wix.com/docs/rest/assets/media/media-manager/introduction) URL. */
    IMAGE = "IMAGE",
    /** Boolean `true` or `false` value. */
    BOOLEAN = "BOOLEAN",
    /** Web URL or a [Media Manager](https://dev.wix.com/docs/rest/assets/media/media-manager/introduction) URL. */
    DOCUMENT = "DOCUMENT",
    /** URL in one of the following formats: `http://`, `https://`, `ftp://`, `mailto:`, `sms:`, `tel:`. */
    URL = "URL",
    /** [Rich-text](https://dev.wix.com/docs/rest/articles/getting-started/rich-text) string that may contain a subset of HTML tags. */
    RICH_TEXT = "RICH_TEXT",
    /** Web URL or a [Media Manager](https://dev.wix.com/docs/rest/assets/media/media-manager/introduction) URL. */
    VIDEO = "VIDEO",
    /** Any field type. */
    ANY = "ANY",
    /** Array of strings. */
    ARRAY_STRING = "ARRAY_STRING",
    /** Array of documents: web or [Media Manager](https://dev.wix.com/docs/rest/assets/media/media-manager/introduction) URLs. */
    ARRAY_DOCUMENT = "ARRAY_DOCUMENT",
    /** Web URL or a [Media Manager](https://dev.wix.com/docs/rest/assets/media/media-manager/introduction) URL. */
    AUDIO = "AUDIO",
    /** Time string in `hh:mm:ss.SSS` format. */
    TIME = "TIME",
    /** Language codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format. These may include country codes in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#officially_assigned_code_elements) format. */
    LANGUAGE = "LANGUAGE",
    /** [Rich content](https://dev.wix.com/docs/ricos/getting-started/introduction). */
    RICH_CONTENT = "RICH_CONTENT",
    /** Array of web or [Media Manager](https://dev.wix.com/docs/rest/assets/media/media-manager/introduction) URLs. */
    MEDIA_GALLERY = "MEDIA_GALLERY",
    /** Physical address object ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/data-types-in-wix-data#address-object) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-types-in-wix-data#address-object)). */
    ADDRESS = "ADDRESS",
    /** [Dynamic page link](https://support.wix.com/en/article/cms-linking-to-dynamic-pages). */
    PAGE_LINK = "PAGE_LINK",
    /** Reference to another item in another collection. See Query Referenced Data Items ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/items/query-referenced) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-items/query-referenced-data-items)) to learn about item references. */
    REFERENCE = "REFERENCE",
    /** References to multiple items in another collection. See Query Referenced Data Items ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/items/query-referenced) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-items/query-referenced-data-items)) to learn about item references. */
    MULTI_REFERENCE = "MULTI_REFERENCE",
    /** JSON object. */
    OBJECT = "OBJECT",
    /** Array. */
    ARRAY = "ARRAY",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_TIME = "LEGACY_TIME",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_BOOK = "LEGACY_BOOK",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_EXTERNAL_URL = "LEGACY_EXTERNAL_URL",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_BROKEN_REFERENCE = "LEGACY_BROKEN_REFERENCE",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_IMAGE = "LEGACY_IMAGE",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_COLOR = "LEGACY_COLOR",
    /** Deprecated type that might appear in legacy collections. */
    LEGACY_EXTERNAL_VIDEO = "LEGACY_EXTERNAL_VIDEO"
}
/** @enumType */
type TypeWithLiterals = Type | 'UNKNOWN_FIELD_TYPE' | 'TEXT' | 'NUMBER' | 'DATE' | 'DATETIME' | 'IMAGE' | 'BOOLEAN' | 'DOCUMENT' | 'URL' | 'RICH_TEXT' | 'VIDEO' | 'ANY' | 'ARRAY_STRING' | 'ARRAY_DOCUMENT' | 'AUDIO' | 'TIME' | 'LANGUAGE' | 'RICH_CONTENT' | 'MEDIA_GALLERY' | 'ADDRESS' | 'PAGE_LINK' | 'REFERENCE' | 'MULTI_REFERENCE' | 'OBJECT' | 'ARRAY' | 'LEGACY_TIME' | 'LEGACY_BOOK' | 'LEGACY_EXTERNAL_URL' | 'LEGACY_BROKEN_REFERENCE' | 'LEGACY_IMAGE' | 'LEGACY_COLOR' | 'LEGACY_EXTERNAL_VIDEO';
interface TypeMetadata extends TypeMetadataMetadataOneOf {
    /** Metadata for a reference field. */
    reference?: Reference;
    /** Metadata for a multi-reference field. */
    multiReference?: MultiReference;
    /** Metadata for an object field. */
    object?: _Object;
    /** Metadata for an array field. */
    array?: _Array;
    /** Metadata for a page link field. */
    pageLink?: PageLink;
}
/** @oneof */
interface TypeMetadataMetadataOneOf {
    /** Metadata for a reference field. */
    reference?: Reference;
    /** Metadata for a multi-reference field. */
    multiReference?: MultiReference;
    /** Metadata for an object field. */
    object?: _Object;
    /** Metadata for an array field. */
    array?: _Array;
    /** Metadata for a page link field. */
    pageLink?: PageLink;
}
interface FieldCapabilities {
    /**
     * Whether the collection can be sorted by this field.
     *
     * Default: `false`
     */
    sortable?: boolean;
    /**
     * Query operators that can be used for this field.
     * @maxSize 100
     */
    queryOperators?: QueryOperatorWithLiterals[];
}
declare enum QueryOperator {
    EQ = "EQ",
    LT = "LT",
    GT = "GT",
    NE = "NE",
    LTE = "LTE",
    GTE = "GTE",
    STARTS_WITH = "STARTS_WITH",
    ENDS_WITH = "ENDS_WITH",
    CONTAINS = "CONTAINS",
    HAS_SOME = "HAS_SOME",
    HAS_ALL = "HAS_ALL",
    EXISTS = "EXISTS",
    URLIZED = "URLIZED"
}
/** @enumType */
type QueryOperatorWithLiterals = QueryOperator | 'EQ' | 'LT' | 'GT' | 'NE' | 'LTE' | 'GTE' | 'STARTS_WITH' | 'ENDS_WITH' | 'CONTAINS' | 'HAS_SOME' | 'HAS_ALL' | 'EXISTS' | 'URLIZED';
interface ObjectField {
    /**
     * Field ID.
     * @maxLength 1000
     */
    key?: string;
    /**
     * Display name for the field.
     * @maxLength 1000
     */
    displayName?: string | null;
    /**
     * Field type.
     *
     * Learn more about data types in Wix Data ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/data-types-in-wix-data) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-types-in-wix-data)).
     */
    type?: TypeWithLiterals;
    /** Metadata for complex data types. This property only exists for references, multi-references, objects, and arrays. */
    typeMetadata?: TypeMetadata;
    /**
     * Capabilities the object field supports.
     * @readonly
     */
    capabilities?: FieldCapabilities;
}
interface FieldsPattern {
    /** @maxLength 1000 */
    pattern?: string;
    lowercase?: boolean;
}
interface UrlizedOnlyPattern {
    /** @maxLength 1000 */
    pattern?: string;
}
interface Calculator extends CalculatorPatternOneOf {
    /** Value is calculated according to pattern, whitespaces are replaced with dash [-]. */
    fieldsPattern?: FieldsPattern;
    /** Value is only URL encoded. */
    urlizedOnlyPattern?: UrlizedOnlyPattern;
}
/** @oneof */
interface CalculatorPatternOneOf {
    /** Value is calculated according to pattern, whitespaces are replaced with dash [-]. */
    fieldsPattern?: FieldsPattern;
    /** Value is only URL encoded. */
    urlizedOnlyPattern?: UrlizedOnlyPattern;
}
interface Reference {
    /**
     * Referenced collection ID.
     * @maxLength 256
     */
    referencedCollectionId?: string;
}
interface MultiReference {
    /**
     * Referenced collection ID.
     * @maxLength 256
     */
    referencedCollectionId?: string;
    /**
     * Referencing field ID.
     * @maxLength 1000
     */
    referencingFieldKey?: string;
    /**
     * Display name in the CMS for the referenced data.
     * @maxLength 1000
     */
    referencingDisplayName?: string;
}
interface _Object {
    /**
     * Fields within the object.
     * @maxSize 1000
     */
    fields?: ObjectField[];
}
interface _Array {
    /** Element's data type. */
    elementType?: TypeWithLiterals;
    /** Metadata for complex data types. This property only exists for references, multi-references, objects, and arrays. */
    typeMetadata?: TypeMetadata;
}
interface PageLink {
    calculator?: Calculator;
    /**
     * Defines reference to router pattern in the site document.
     * @maxLength 1000
     */
    linkedRouterPage?: string | null;
}
interface NumberRange {
    /**
     * Minimum permitted value for a numerical field.
     *
     * Default: No validation
     */
    min?: number | null;
    /**
     * Maximum permitted value for a numerical field.
     *
     * Default: No validation
     */
    max?: number | null;
}
interface StringLengthRange {
    /**
     * Minimum permitted length for a text field.
     *
     * Default: No validation
     */
    minLength?: number | null;
    /**
     * Maximum permitted length for a text field.
     *
     * Default: No validation
     */
    maxLength?: number | null;
}
interface ArraySizeRange {
    /**
     * Minimum permitted number of items in an array field. Relevant for fields that hold arrays, such as those of type `ARRAY`, `ARRAY_STRING`, or `ARRAY_DOCUMENT`.
     *
     * Default: No validation
     */
    minSize?: number | null;
    /**
     * Maximum permitted number of items in an array field. Relevant for fields that hold arrays, such as those of type `ARRAY`, `ARRAY_STRING`, or `ARRAY_DOCUMENT`.
     *
     * Default: No validation
     */
    maxSize?: number | null;
}
/** Optional plug-in aspects for fields */
interface FieldPlugin extends FieldPluginOptionsOneOf {
    /** Options for the CMS plugin. */
    cmsOptions?: CmsOptions;
    type?: FieldPluginTypeWithLiterals;
}
/** @oneof */
interface FieldPluginOptionsOneOf {
    /** Options for the CMS plugin. */
    cmsOptions?: CmsOptions;
}
declare enum FieldPluginType {
    /** Uknown plugin type. */
    UNKNOWN = "UNKNOWN",
    /** CMS-related field attributes */
    CMS = "CMS"
}
/** @enumType */
type FieldPluginTypeWithLiterals = FieldPluginType | 'UNKNOWN' | 'CMS';
/** Options for the CMS plugin. */
interface CmsOptions {
    /**
     * Indicates an internal CMS field. The CMS does not display internal fields.
     *
     * Default: `false`
     */
    internal?: boolean;
}
/** Permissions defined by the lowest role needed to perform each action. */
interface Permissions {
    /** Lowest role needed to add a collection. */
    insert?: RoleWithLiterals;
    /** Lowest role needed to update a collection. */
    update?: RoleWithLiterals;
    /** Lowest role needed to remove a collection. */
    remove?: RoleWithLiterals;
    /** Lowest role needed to read a collection. */
    read?: RoleWithLiterals;
}
declare enum Role {
    /** Unknown role. */
    UNKNOWN_ROLE = "UNKNOWN_ROLE",
    /** Site administrator. */
    ADMIN = "ADMIN",
    /** Signed-in user who added content to this collection. */
    SITE_MEMBER_AUTHOR = "SITE_MEMBER_AUTHOR",
    /** Any signed-in user. */
    SITE_MEMBER = "SITE_MEMBER",
    /** Any site visitor. */
    ANYONE = "ANYONE"
}
/** @enumType */
type RoleWithLiterals = Role | 'UNKNOWN_ROLE' | 'ADMIN' | 'SITE_MEMBER_AUTHOR' | 'SITE_MEMBER' | 'ANYONE';
interface Plugin extends PluginOptionsOneOf {
    /**
     * Options for the Publish plugin.
     * This plugin allows items in a [data collection](https://dev.wix.com/docs/rest/business-solutions/cms/data-collections/data-collection-object) to be marked as draft or published. Published items are visible to site visitors, while draft items are not.
     */
    publishOptions?: PublishPluginOptions;
    /** Options for the Single Item plugin. */
    singleItemOptions?: SingleItemPluginOptions;
    /** Options for the Urlized plugin. */
    urlizedOptions?: UrlizedPluginOptions;
    /** Options for the Multilingual plugin. */
    multilingualOptions?: MultilingualOptions;
    /** Options for the PageLink plugin. */
    editablePageLinkOptions?: PageLinkPluginOptions;
    /** Options for the CMS plugin. */
    cmsOptions?: PluginCmsOptions;
    /** Plugin type. */
    type?: PluginTypeWithLiterals;
}
/** @oneof */
interface PluginOptionsOneOf {
    /**
     * Options for the Publish plugin.
     * This plugin allows items in a [data collection](https://dev.wix.com/docs/rest/business-solutions/cms/data-collections/data-collection-object) to be marked as draft or published. Published items are visible to site visitors, while draft items are not.
     */
    publishOptions?: PublishPluginOptions;
    /** Options for the Single Item plugin. */
    singleItemOptions?: SingleItemPluginOptions;
    /** Options for the Urlized plugin. */
    urlizedOptions?: UrlizedPluginOptions;
    /** Options for the Multilingual plugin. */
    multilingualOptions?: MultilingualOptions;
    /** Options for the PageLink plugin. */
    editablePageLinkOptions?: PageLinkPluginOptions;
    /** Options for the CMS plugin. */
    cmsOptions?: PluginCmsOptions;
}
declare enum Status {
    UNKNOWN_PUBLISH_PLUGIN_STATUS = "UNKNOWN_PUBLISH_PLUGIN_STATUS",
    PUBLISHED = "PUBLISHED",
    DRAFT = "DRAFT"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN_PUBLISH_PLUGIN_STATUS' | 'PUBLISHED' | 'DRAFT';
declare enum Format {
    UNKNOWN_URLIZED_PLUGIN_FORMAT = "UNKNOWN_URLIZED_PLUGIN_FORMAT",
    /** Letters are converted to lower case and spaces are replaced with dashes before generating the encoded URL. */
    ORIGINAL = "ORIGINAL",
    /** No changes are made before generating the encoded URL. */
    PLAIN = "PLAIN"
}
/** @enumType */
type FormatWithLiterals = Format | 'UNKNOWN_URLIZED_PLUGIN_FORMAT' | 'ORIGINAL' | 'PLAIN';
/** if CMS-defined sort is enabled and should be used in site */
interface SiteSort {
    /**
     * Field and order for the site sort.
     * @maxSize 100
     */
    sort?: Sort[];
}
declare enum PluginType {
    /** Unknown plugin type. */
    UNKNOWN_PLUGIN_TYPE = "UNKNOWN_PLUGIN_TYPE",
    /** Allows items to be marked as either draft or published. For each item you can set a publishing time when the item will become visible to site visitors. */
    PUBLISH = "PUBLISH",
    /** Ensures the collection can have one item at most. Can only be applied to a new collection. */
    SINGLE_ITEM = "SINGLE_ITEM",
    /** Generates item URLs for collections used by dynamic pages. */
    URLIZED = "URLIZED",
    /** Deprecated. Will be removed in the future. */
    GRIDAPPLESS = "GRIDAPPLESS",
    /** Indicates that the collection is translatable. This allows you to manage translation for selected fields using [Wix Multilingual](https://www.wix.com/app-market/wix-multilingual). */
    MULTILINGUAL = "MULTILINGUAL",
    /** Indicates that collection is shared with current site. */
    SHARED = "SHARED",
    /** Indicates that page link fields are persisted and can be updated. */
    EDITABLE_PAGE_LINK = "EDITABLE_PAGE_LINK",
    /** CMS-specific collection properties. */
    CMS = "CMS"
}
/** @enumType */
type PluginTypeWithLiterals = PluginType | 'UNKNOWN_PLUGIN_TYPE' | 'PUBLISH' | 'SINGLE_ITEM' | 'URLIZED' | 'GRIDAPPLESS' | 'MULTILINGUAL' | 'SHARED' | 'EDITABLE_PAGE_LINK' | 'CMS';
interface PublishPluginOptions {
    /** Default status. */
    defaultStatus?: StatusWithLiterals;
}
interface SingleItemPluginOptions {
    /**
     * ID of the single item in this collection. If you insert or update an item, its ID value is always changed to this.
     * @maxLength 16000
     */
    singleItemId?: string;
}
interface UrlizedPluginOptions {
    /** Encoding method for generating a URL in ASCII characters. */
    format?: FormatWithLiterals;
}
interface MultilingualOptions {
    /**
     * IDs of fields to allow translation.
     * @maxSize 1000
     * @maxLength 1000
     */
    translatableFieldKeys?: string[];
}
interface PageLinkPluginOptions {
    isPersisted?: boolean;
    isMutable?: boolean;
}
interface PluginCmsOptions {
    /** CMS sort, applied when a collection is displayed on a site. */
    siteSort?: SiteSort;
}
declare enum PagingMode {
    /** Offset-based paging. */
    OFFSET = "OFFSET",
    /** Cursor-based paging. */
    CURSOR = "CURSOR"
}
/** @enumType */
type PagingModeWithLiterals = PagingMode | 'OFFSET' | 'CURSOR';
/** Data permissions defined by access level for each action. */
interface DataPermissions {
    /** Access level for data items read */
    itemRead?: AccessLevelWithLiterals;
    /** Access level for data items insert */
    itemInsert?: AccessLevelWithLiterals;
    /** Access level for data items update */
    itemUpdate?: AccessLevelWithLiterals;
    /** Access level for data items removal */
    itemRemove?: AccessLevelWithLiterals;
}
/**
 * Describes who can perform certain action.
 * Each level includes all levels below it (except UNDEFINED).
 */
declare enum AccessLevel {
    /** Not set. */
    UNDEFINED = "UNDEFINED",
    /** Any subject, including visitors. */
    ANYONE = "ANYONE",
    /** Any signed-in user (both site members and collaborators). */
    SITE_MEMBER = "SITE_MEMBER",
    /** Any signed-in user, but site members only have access to own items. */
    SITE_MEMBER_AUTHOR = "SITE_MEMBER_AUTHOR",
    /** Site collaborator that has a role with CMS Access permission. */
    CMS_EDITOR = "CMS_EDITOR",
    /** CMS administrators and users or roles granted with special access. */
    PRIVILEGED = "PRIVILEGED"
}
/** @enumType */
type AccessLevelWithLiterals = AccessLevel | 'UNDEFINED' | 'ANYONE' | 'SITE_MEMBER' | 'SITE_MEMBER_AUTHOR' | 'CMS_EDITOR' | 'PRIVILEGED';
interface AllowedDataPermissions {
    /** If data items read permitted */
    itemRead?: boolean;
    /** If for data items insert permitted */
    itemInsert?: boolean;
    /** If data items update permitted */
    itemUpdate?: boolean;
    /** If data items removal permitted */
    itemRemove?: boolean;
}
interface DataCollectionClonedEvent {
    /**
     * Instance ID of the collection from which the data is cloned.
     * @format GUID
     */
    originInstanceId?: string;
    /**
     * ID of the collection from which the data is cloned.
     * @maxLength 256
     */
    originId?: string;
}
interface DataCollectionChangedEvent {
    /**
     * list of new fields
     * @maxSize 1000
     */
    fieldsAdded?: Field[];
    /**
     * list of changed fields
     * @maxSize 1000
     */
    fieldsUpdated?: FieldUpdate[];
    /**
     * list of removed fields
     * @maxSize 1000
     */
    fieldsRemoved?: Field[];
    /**
     * list of new plugins
     * @maxSize 100
     */
    pluginsAdded?: Plugin[];
    /**
     * list of changed plugins
     * @maxSize 100
     */
    pluginsUpdated?: PluginUpdate[];
    /**
     * list of removed plugins
     * @maxSize 100
     */
    pluginsRemoved?: Plugin[];
}
interface FieldUpdate {
    /** previous state of the field */
    previous?: Field;
    /** current state of the field */
    current?: Field;
}
interface PluginUpdate {
    /** previous state of the plugin */
    previous?: Plugin;
    /** current state of the plugin */
    current?: Plugin;
}
interface DataCollectionEvictedEvent {
    /**
     * ID of the collection that was permanently deleted.
     * @minLength 1
     * @maxLength 1000
     */
    _id?: string;
}
interface CreateDataCollectionRequest {
    /** Collection details. */
    collection: DataCollection;
}
interface CreateDataCollectionResponse {
    /** Details of collection created. */
    collection?: DataCollection;
}
interface GetDataCollectionRequest {
    /**
     * ID of the collection to retrieve.
     * @maxLength 256
     */
    dataCollectionId: string;
    /**
     * Whether to retrieve data from the primary database instance.
     * This decreases performance but ensures data retrieved is up to date even immediately after an update.
     * Learn more about [Wix Data and eventual consistency](https://dev.wix.com/api/rest/wix-data/wix-data/eventual-consistency).
     *
     * Default: `false`
     */
    consistentRead?: boolean;
    /**
     * List of specific field names to return, if empty all fields are returned.
     * Affects all returned collections
     * @maxSize 100
     * @maxLength 1000
     */
    fields?: string[];
}
declare enum Segment {
    UNKNOWN_SEGMENT = "UNKNOWN_SEGMENT",
    PUBLIC = "PUBLIC",
    DEV = "DEV"
}
/** @enumType */
type SegmentWithLiterals = Segment | 'UNKNOWN_SEGMENT' | 'PUBLIC' | 'DEV';
interface GetDataCollectionResponse {
    /** Details of the collection requested. */
    collection?: DataCollection;
    /**
     * Details of collections referenced by the collection requested.
     * Only populated when `includeReferencedCollections` is `true` in the request.
     */
    referencedCollections?: DataCollection[];
}
interface ListDataCollectionsRequest {
    /**
     * Defines how collections in the response are sorted.
     *
     * Default: Ordered by ID in ascending order.
     */
    sort?: Sorting;
    /** Pagination information. */
    paging?: Paging;
    /**
     * Whether to retrieve data from the primary database instance.
     * This decreases performance but ensures data retrieved is up to date even immediately after an update.
     * Learn more about [Wix Data and eventual consistency](https://dev.wix.com/api/rest/wix-data/wix-data/eventual-consistency).
     *
     * Default: `false`
     */
    consistentRead?: boolean;
    /**
     * List of specific field names to return, if empty all fields are returned.
     * Affects all returned collections
     * @maxSize 100
     * @maxLength 128
     */
    fields?: string[];
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 1000
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface ListDataCollectionsResponse {
    /** List of collections. */
    collections?: DataCollection[];
    /** Paging information. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface BulkGetDataCollectionsRequest {
    /**
     * IDs of the collections to retrieve.
     * @minSize 1
     * @maxSize 100
     * @maxLength 256
     */
    dataCollectionIds?: string[];
    /**
     * Whether to include deleted collections.
     *
     * Default: `false`
     */
    showDeletedCollections?: boolean;
    /**
     * Whether the returned collection list should include referenced collections.
     *
     * Default: `false`
     */
    includeReferencedCollections?: boolean;
    /** Sorting preferences. */
    sort?: Sorting;
    /**
     * Whether to retrieve data from the primary database instance.
     * This decreases performance but ensures data retrieved is up to date even immediately after an update.
     * Learn more about [Wix Data and eventual consistency](https://dev.wix.com/api/rest/wix-data/wix-data/eventual-consistency).
     *
     * Default: `false`
     */
    consistentRead?: boolean;
    /**
     * List of specific field names to return, if empty all fields are returned.
     * Affects all returned collections
     * @maxSize 100
     * @maxLength 1000
     */
    fields?: string[];
}
interface BulkGetDataCollectionsResponse {
    /**
     * List of requested collections.
     * When `include_referenced_collections` is `true` in the request, referenced collections are included here.
     */
    activeCollections?: DataCollection[];
    /** List of requested deleted collections. Only populated when `showDeletedCollections` is true in the request. */
    deletedCollections?: DataCollection[];
}
interface UpdateDataCollectionRequest {
    /** Updated collection details. The existing collection is replaced with this version. */
    collection: DataCollection;
}
interface UpdateDataCollectionResponse {
    /** Updated collection details. */
    collection?: DataCollection;
}
interface DeleteDataCollectionRequest {
    /**
     * ID of the collection to delete.
     * @maxLength 256
     */
    dataCollectionId: string;
}
interface DeleteDataCollectionResponse {
}
interface RestoreDataCollectionRequest {
    /**
     * Data Collection ID to restore
     * @maxLength 256
     */
    dataCollectionId?: string;
}
interface RestoreDataCollectionResponse {
    /** Restored data collection */
    dataCollection?: DataCollection;
}
interface CreateDataCollectionFieldRequest {
    /**
     * ID of data collection to update
     * @maxLength 256
     */
    dataCollectionId: string;
    /** field to create */
    field: Field;
}
interface CreateDataCollectionFieldResponse {
    /** updated data collection */
    dataCollection?: DataCollection;
}
interface UpdateDataCollectionFieldRequest {
    /**
     * ID of data collection to update
     * @maxLength 256
     */
    dataCollectionId: string;
    /** Field to update */
    field: Field;
}
interface UpdateDataCollectionFieldResponse {
    /** updated data collection */
    dataCollection?: DataCollection;
}
interface DeleteDataCollectionFieldRequest {
    /**
     * ID of data collection to update
     * @maxLength 256
     */
    dataCollectionId: string;
    /**
     * Field ID to delete
     * @maxLength 1000
     */
    fieldKey: string;
}
interface DeleteDataCollectionFieldResponse {
    /** updated data collection */
    dataCollection?: DataCollection;
}
interface UpdateDataPermissionsRequest {
    /**
     * ID of data collections to update
     * @maxLength 256
     */
    dataCollectionId?: string;
    /** Data permissions to set */
    dataPermissions?: DataPermissions;
}
interface UpdateDataPermissionsResponse {
    /** Updated data collection */
    dataCollection?: DataCollection;
}
interface BulkGetDataCollectionsPageBySnapshotsRequest {
    /**
     * Ids of schema snapshot
     * @format GUID
     * @minSize 1
     * @maxSize 1000
     */
    snapshotIds?: string[];
    /** Pagination information. */
    paging?: Paging;
}
interface BulkGetDataCollectionsPageBySnapshotsResponse {
    /** List of snapshot collection map */
    snapshotCollections?: SnapshotCollection[];
    /** Paging information. */
    pagingMetadata?: PagingMetadataV2;
}
interface SnapshotCollection {
    /**
     * snapshot to which collection belongs
     * @format GUID
     */
    snapshotId?: string;
    /** snapshot collection */
    collection?: DataCollection;
    /**
     * snapshot of collection indexes
     * @maxSize 100
     */
    indexes?: Index[];
}
/** An index is a map of a collection's data, organized according to specific fields to increase query speed. */
interface Index {
    /**
     * Name of the index.
     * @minLength 1
     * @maxLength 128
     */
    name?: string;
    /**
     * Fields for which the index is defined.
     *
     * Max: 3 fields (for a unique index: 1 field)
     * @minSize 1
     * @maxSize 3
     */
    fields?: IndexField[];
    /**
     * Current status of the index.
     * @readonly
     */
    status?: IndexStatusWithLiterals;
    /**
     * Contains details about the reasons for failure when `status` is `FAILED`.
     * @readonly
     */
    failure?: Failure;
    /**
     * Whether the index enforces uniqueness of values in the field for which it is defined.
     * If `true`, the index can have only one field.
     *
     * Default: `false`
     */
    unique?: boolean;
    /**
     * Whether the index ignores case.
     *
     * Default: `false`
     */
    caseInsensitive?: boolean;
    /** Specifies the origin of the index definition. */
    source?: IndexSourceWithLiterals;
}
/**
 * Order determines how values are ordered in the index. This is important when
 * ordering and/or range querying by indexed fields.
 */
declare enum Order {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type OrderWithLiterals = Order | 'ASC' | 'DESC';
interface IndexField {
    /**
     * Path of the field to index. For example: `title` or `options.price`.
     * @minLength 1
     * @maxLength 128
     */
    path?: string;
    /**
     * Sort order for the index. Base on how the data is regularly queried.
     *
     * Default: `ASC`
     */
    order?: OrderWithLiterals;
}
declare enum IndexStatus {
    /** Place holder. Never returned by the service. */
    UNKNOWN = "UNKNOWN",
    /** Index creation is in progress. */
    BUILDING = "BUILDING",
    /** Index has been successfully created and can be used in queries. */
    ACTIVE = "ACTIVE",
    /** Index is in the process of being dropped. */
    DROPPING = "DROPPING",
    /** Index has been dropped successfully. */
    DROPPED = "DROPPED",
    /** Index creation has failed. */
    FAILED = "FAILED",
    /** Index contains incorrectly indexed data. */
    INVALID = "INVALID"
}
/** @enumType */
type IndexStatusWithLiterals = IndexStatus | 'UNKNOWN' | 'BUILDING' | 'ACTIVE' | 'DROPPING' | 'DROPPED' | 'FAILED' | 'INVALID';
interface Failure {
    /**
     * Error code.
     * - `WDE0112`: Unknown error while building collection index.
     * - `WDE0113`: Duplicate key error while building collection index.
     * - `WDE0114`: Document too large while building collection index.
     * @maxLength 7
     */
    code?: string;
    /**
     * Description of the failure.
     * @maxLength 1024
     */
    description?: string;
    /**
     * ID of the data item that caused the failure.
     * For example, if `unique` is `true`, the ID of an item containing a duplicate value.
     * @maxLength 16000
     */
    itemId?: string | null;
}
declare enum IndexSource {
    /** Place holder. Never returned by the service. */
    UNKNOWN_INDEX_SOURCE = "UNKNOWN_INDEX_SOURCE",
    /** Index is created by the system, present for all collections. */
    SYSTEM = "SYSTEM",
    /** Index was created by a user via API or UI. */
    USER = "USER",
    /** Index is created automatically by the system based on user queries. */
    AUTO = "AUTO"
}
/** @enumType */
type IndexSourceWithLiterals = IndexSource | 'UNKNOWN_INDEX_SOURCE' | 'SYSTEM' | 'USER' | 'AUTO';
interface CreateDataCollectionsSnapshotRequest {
}
interface CreateDataCollectionsSnapshotResponse {
    /**
     * created snapshot ID
     * @format GUID
     */
    snapshotId?: string;
    /** data collections in snapshot */
    snapshotCollections?: DataCollection[];
}
interface RestoreDataCollectionsFromSnapshotRequest {
    /**
     * snapshot ID to restore
     * @format GUID
     */
    snapshotId?: string;
    /**
     * collection IDs to restore, if empty – all collections would be restored
     * @maxSize 1000
     * @maxLength 256
     * @deprecated
     * @replacedBy restoration_collections
     * @targetRemovalDate 2025-12-31
     */
    dataCollectionIds?: string[];
    /**
     * collection to restore, if empty – all collections would be restored
     * @maxSize 1000
     */
    restorationCollections?: RestorationCollection[];
}
interface Destination {
    /**
     * Collection id.
     * @minLength 1
     * @maxLength 1000
     */
    dataCollectionId?: string;
    /**
     * Display name. When not specified value is taken from the snapshot.
     * @maxLength 1000
     */
    displayName?: string | null;
}
interface RestorationCollection {
    /**
     * Collection ID to restore
     * @minLength 1
     * @maxLength 1000
     */
    dataCollectionId?: string;
    /**
     * Destination where to restore the collection.
     * When not specified destination is taken from snapshot.
     */
    destination?: Destination;
}
interface RestoreDataCollectionsFromSnapshotResponse {
    /** restored collections */
    restoredCollections?: DataCollection[];
}
interface DeleteDataCollectionsSnapshotRequest {
    /**
     * snapshot ID to delete
     * @format GUID
     */
    snapshotId?: string;
}
interface DeleteDataCollectionsSnapshotResponse {
}
interface CreateMigratedCollectionsSnapshotRequest {
    /** @format GUID */
    existingSnapshotId?: string;
    /** @maxLength 255 */
    newNamespace?: string;
    /** @maxLength 255 */
    existingNamespace?: string;
}
interface CreateMigratedCollectionsSnapshotResponse {
    /** @format GUID */
    snapshotId?: string;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
type DataCollectionNonNullablePaths = `_id` | `collectionType` | `defaultDisplayOrder.fieldKey` | `defaultDisplayOrder.direction` | `capabilities.dataOperations` | `capabilities.collectionOperations` | `capabilities.indexLimits.regular` | `capabilities.indexLimits.unique` | `capabilities.indexLimits.total` | `fields` | `fields.${number}.key` | `fields.${number}.type` | `fields.${number}.typeMetadata.reference.referencedCollectionId` | `fields.${number}.typeMetadata.multiReference.referencedCollectionId` | `fields.${number}.typeMetadata.multiReference.referencingFieldKey` | `fields.${number}.typeMetadata.multiReference.referencingDisplayName` | `fields.${number}.typeMetadata.array.elementType` | `fields.${number}.typeMetadata.pageLink.calculator.fieldsPattern.pattern` | `fields.${number}.typeMetadata.pageLink.calculator.fieldsPattern.lowercase` | `fields.${number}.typeMetadata.pageLink.calculator.urlizedOnlyPattern.pattern` | `fields.${number}.systemField` | `fields.${number}.encrypted` | `permissions.insert` | `permissions.update` | `permissions.remove` | `permissions.read` | `plugins` | `plugins.${number}.publishOptions.defaultStatus` | `plugins.${number}.singleItemOptions.singleItemId` | `plugins.${number}.urlizedOptions.format` | `plugins.${number}.editablePageLinkOptions.isPersisted` | `plugins.${number}.editablePageLinkOptions.isMutable` | `plugins.${number}.type` | `pagingModes`;
/**
 * Creates a new data collection.
 *
 * The request body must include an ID, details for at least 1 field, and a permissions object. If any of these are missing, the collection isn't created.
 * @param collection - Collection details.
 * @public
 * @requiredField collection
 * @requiredField collection._id
 * @requiredField collection.fields.key
 * @requiredField collection.fields.type
 * @requiredField collection.permissions.insert
 * @requiredField collection.permissions.read
 * @requiredField collection.permissions.remove
 * @requiredField collection.permissions.update
 * @param options - Options for creating a data collection.
 * @permissionId WIX_DATA.CREATE_COLLECTION
 * @applicableIdentity APP
 * @returns Details of collection created.
 * @fqn com.wixpress.cloud.data.api.collectionservice.DataCollectionService.CreateDataCollection
 */
declare function createDataCollection(collection: NonNullablePaths<DataCollection, `_id` | `fields.${number}.key` | `fields.${number}.type` | `permissions.insert` | `permissions.read` | `permissions.remove` | `permissions.update`>): Promise<NonNullablePaths<DataCollection, DataCollectionNonNullablePaths>>;
/**
 * Retrieves a data collection by ID.
 * @param dataCollectionId - ID of the collection to retrieve.
 * @public
 * @requiredField dataCollectionId
 * @param options - Options for retrieving a data collection.
 * @permissionId WIX_DATA.GET_COLLECTION
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Details of the collection requested.
 * @fqn com.wixpress.cloud.data.api.collectionservice.DataCollectionService.GetDataCollection
 */
declare function getDataCollection(dataCollectionId: string, options?: GetDataCollectionOptions): Promise<NonNullablePaths<DataCollection, DataCollectionNonNullablePaths>>;
interface GetDataCollectionOptions {
    /**
     * Whether to retrieve data from the primary database instance.
     * This decreases performance but ensures data retrieved is up to date even immediately after an update.
     * Learn more about [Wix Data and eventual consistency](https://dev.wix.com/api/rest/wix-data/wix-data/eventual-consistency).
     *
     * Default: `false`
     */
    consistentRead?: boolean;
    /**
     * List of specific field names to return, if empty all fields are returned.
     * Affects all returned collections
     * @maxSize 100
     * @maxLength 1000
     */
    fields?: string[];
}
/**
 * Retrieves a list of all data collections associated with the site or project.
 *
 * By default, the list is ordered by ID in ascending order.
 * @public
 * @param options - Options for retrieving a list of data collections.
 * @permissionId WIX_DATA.LIST_COLLECTIONS
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.collectionservice.DataCollectionService.ListDataCollections
 */
declare function listDataCollections(options?: ListDataCollectionsOptions): Promise<NonNullablePaths<ListDataCollectionsResponse, {
    [P in DataCollectionNonNullablePaths]: `collections.${number}.${P}`;
}[DataCollectionNonNullablePaths]>>;
interface ListDataCollectionsOptions {
    /**
     * Defines how collections in the response are sorted.
     *
     * Default: Ordered by ID in ascending order.
     */
    sort?: Sorting;
    /** Pagination information. */
    paging?: Paging;
    /**
     * Whether to retrieve data from the primary database instance.
     * This decreases performance but ensures data retrieved is up to date even immediately after an update.
     * Learn more about [Wix Data and eventual consistency](https://dev.wix.com/api/rest/wix-data/wix-data/eventual-consistency).
     *
     * Default: `false`
     */
    consistentRead?: boolean;
    /**
     * List of specific field names to return, if empty all fields are returned.
     * Affects all returned collections
     * @maxSize 100
     * @maxLength 128
     */
    fields?: string[];
}
/**
 * Updates a data collection.
 *
 * A collection ID, revision number, permissions, and at least 1 field must be provided within the `collection` body parameter.
 * If a collection with that ID exists, and if its current `revision` number matches the one provided, it is updated.
 * Otherwise, the request fails.
 *
 * When a collection is updated, its `updatedDate` property is changed to the current date and its `revision` property is incremented.
 *
 * > **Note:**
 * > After a collection is updated, it only contains the properties included in the Update Data Collection request. If the existing collection has properties with values and those properties
 * > aren't included in the updated collection details, their values are lost.
 * @param collection - Updated collection details. The existing collection is replaced with this version.
 * @public
 * @requiredField collection
 * @requiredField collection._id
 * @requiredField collection.fields.key
 * @requiredField collection.fields.type
 * @requiredField collection.permissions.insert
 * @requiredField collection.permissions.read
 * @requiredField collection.permissions.remove
 * @requiredField collection.permissions.update
 * @requiredField collection.revision
 * @param options - Options for updating a data collection.
 * @permissionId WIX_DATA.UPDATE_COLLECTION
 * @applicableIdentity APP
 * @returns Updated collection details.
 * @fqn com.wixpress.cloud.data.api.collectionservice.DataCollectionService.UpdateDataCollection
 */
declare function updateDataCollection(collection: NonNullablePaths<DataCollection, `_id` | `fields.${number}.key` | `fields.${number}.type` | `permissions.insert` | `permissions.read` | `permissions.remove` | `permissions.update` | `revision`>): Promise<NonNullablePaths<DataCollection, DataCollectionNonNullablePaths>>;
/**
 * Deletes a data collection.
 *
 * > **Note:**
 * > Once a collection is deleted, it can only be restored for limited amount of time.
 * @param dataCollectionId - ID of the collection to delete.
 * @public
 * @requiredField dataCollectionId
 * @permissionId WIX_DATA.DELETE_COLLECTION
 * @applicableIdentity APP
 * @fqn com.wixpress.cloud.data.api.collectionservice.DataCollectionService.DeleteDataCollection
 */
declare function deleteDataCollection(dataCollectionId: string): Promise<void>;
interface CreateDataCollectionFieldOptions {
    /** field to create */
    field: Field;
}
interface UpdateDataCollectionFieldOptions {
    /** Field to update */
    field: Field;
}
interface DeleteDataCollectionFieldOptions {
    /**
     * Field ID to delete
     * @maxLength 1000
     */
    fieldKey: string;
}

export { AccessLevel, type AccessLevelWithLiterals, type ActionEvent, type AllowedDataPermissions, type ArraySizeRange, type BulkGetDataCollectionsPageBySnapshotsRequest, type BulkGetDataCollectionsPageBySnapshotsResponse, type BulkGetDataCollectionsRequest, type BulkGetDataCollectionsResponse, type Calculator, type CalculatorPatternOneOf, type CmsOptions, type CollectionCapabilities, CollectionOperation, type CollectionOperationWithLiterals, CollectionType, type CollectionTypeWithLiterals, type CreateDataCollectionFieldOptions, type CreateDataCollectionFieldRequest, type CreateDataCollectionFieldResponse, type CreateDataCollectionRequest, type CreateDataCollectionResponse, type CreateDataCollectionsSnapshotRequest, type CreateDataCollectionsSnapshotResponse, type CreateMigratedCollectionsSnapshotRequest, type CreateMigratedCollectionsSnapshotResponse, type DataCollection, type DataCollectionChangedEvent, type DataCollectionClonedEvent, type DataCollectionEvictedEvent, DataOperation, type DataOperationWithLiterals, type DataPermissions, type DeleteDataCollectionFieldOptions, type DeleteDataCollectionFieldRequest, type DeleteDataCollectionFieldResponse, type DeleteDataCollectionRequest, type DeleteDataCollectionResponse, type DeleteDataCollectionsSnapshotRequest, type DeleteDataCollectionsSnapshotResponse, type Destination, Direction, type DirectionWithLiterals, type DomainEvent, type DomainEventBodyOneOf, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type Failure, type Field, type FieldCapabilities, type FieldPlugin, type FieldPluginOptionsOneOf, FieldPluginType, type FieldPluginTypeWithLiterals, type FieldRangeValidationsOneOf, type FieldUpdate, type FieldsPattern, Format, type FormatWithLiterals, type GetDataCollectionOptions, type GetDataCollectionRequest, type GetDataCollectionResponse, type IdentificationData, type IdentificationDataIdOneOf, type Index, type IndexField, type IndexLimits, type IndexQuotaLimits, IndexSource, type IndexSourceWithLiterals, IndexStatus, type IndexStatusWithLiterals, type ListDataCollectionsOptions, type ListDataCollectionsRequest, type ListDataCollectionsResponse, type MessageEnvelope, type MultiReference, type MultilingualOptions, type NumberRange, type ObjectField, Order, type OrderWithLiterals, type PageLink, type PageLinkPluginOptions, type Paging, type PagingMetadataV2, PagingMode, type PagingModeWithLiterals, type Permissions, type Plugin, type PluginCmsOptions, type PluginOptionsOneOf, PluginType, type PluginTypeWithLiterals, type PluginUpdate, type PublishPluginOptions, QueryOperator, type QueryOperatorWithLiterals, type Reference, type RestorationCollection, type RestoreDataCollectionRequest, type RestoreDataCollectionResponse, type RestoreDataCollectionsFromSnapshotRequest, type RestoreDataCollectionsFromSnapshotResponse, type RestoreInfo, Role, type RoleWithLiterals, Segment, type SegmentWithLiterals, type SingleItemPluginOptions, type SiteSort, type SnapshotCollection, type Sort, SortOrder, type SortOrderWithLiterals, type Sorting, Status, type StatusWithLiterals, type StringLengthRange, Type, type TypeMetadata, type TypeMetadataMetadataOneOf, type TypeWithLiterals, type UpdateDataCollectionFieldOptions, type UpdateDataCollectionFieldRequest, type UpdateDataCollectionFieldResponse, type UpdateDataCollectionRequest, type UpdateDataCollectionResponse, type UpdateDataPermissionsRequest, type UpdateDataPermissionsResponse, type UrlizedOnlyPattern, type UrlizedPluginOptions, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, type _Array, type _Object, createDataCollection, deleteDataCollection, getDataCollection, listDataCollections, updateDataCollection };
