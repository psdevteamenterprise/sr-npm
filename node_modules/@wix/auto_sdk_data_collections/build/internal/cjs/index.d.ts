import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { DataCollection, GetDataCollectionOptions, ListDataCollectionsOptions, ListDataCollectionsResponse, RestoreDataCollectionResponse, CreateDataCollectionFieldOptions, CreateDataCollectionFieldResponse, UpdateDataCollectionFieldOptions, UpdateDataCollectionFieldResponse, DeleteDataCollectionFieldOptions, DeleteDataCollectionFieldResponse } from './index.typings.js';
export { AccessLevel, ActionEvent, AllowedDataPermissions, ArraySizeRange, BulkGetDataCollectionsPageBySnapshotsRequest, BulkGetDataCollectionsPageBySnapshotsResponse, BulkGetDataCollectionsRequest, BulkGetDataCollectionsResponse, Calculator, CalculatorPatternOneOf, CmsOptions, CollectionCapabilities, CollectionOperation, CollectionType, CreateDataCollectionFieldRequest, CreateDataCollectionRequest, CreateDataCollectionResponse, CreateDataCollectionsSnapshotRequest, CreateDataCollectionsSnapshotResponse, CreateMigratedCollectionsSnapshotRequest, CreateMigratedCollectionsSnapshotResponse, DataCollectionChangedEvent, DataCollectionClonedEvent, DataCollectionEvictedEvent, DataOperation, DataPermissions, DeleteDataCollectionFieldRequest, DeleteDataCollectionRequest, DeleteDataCollectionResponse, DeleteDataCollectionsSnapshotRequest, DeleteDataCollectionsSnapshotResponse, Destination, Direction, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, Failure, Field, FieldCapabilities, FieldPlugin, FieldPluginOptionsOneOf, FieldPluginType, FieldRangeValidationsOneOf, FieldUpdate, FieldsPattern, Format, GetDataCollectionRequest, GetDataCollectionResponse, IdentificationData, IdentificationDataIdOneOf, Index, IndexField, IndexLimits, IndexQuotaLimits, IndexSource, IndexStatus, ListDataCollectionsRequest, MessageEnvelope, MultiReference, MultilingualOptions, NumberRange, ObjectField, Order, PageLink, PageLinkPluginOptions, Paging, PagingMetadataV2, PagingMode, Permissions, Plugin, PluginCmsOptions, PluginOptionsOneOf, PluginType, PluginUpdate, PublishPluginOptions, QueryOperator, Reference, RestorationCollection, RestoreDataCollectionRequest, RestoreDataCollectionsFromSnapshotRequest, RestoreDataCollectionsFromSnapshotResponse, RestoreInfo, Role, Segment, SingleItemPluginOptions, SiteSort, SnapshotCollection, Sort, SortOrder, Sorting, Status, StringLengthRange, Type, TypeMetadata, TypeMetadataMetadataOneOf, UpdateDataCollectionFieldRequest, UpdateDataCollectionRequest, UpdateDataCollectionResponse, UpdateDataPermissionsRequest, UpdateDataPermissionsResponse, UrlizedOnlyPattern, UrlizedPluginOptions, WebhookIdentityType, _Array, _Object } from './index.typings.js';

type DataCollectionNonNullablePaths = `_id` | `collectionType` | `defaultDisplayOrder.fieldKey` | `defaultDisplayOrder.direction` | `capabilities.dataOperations` | `capabilities.collectionOperations` | `capabilities.indexLimits.regular` | `capabilities.indexLimits.unique` | `capabilities.indexLimits.total` | `fields` | `fields.${number}.key` | `fields.${number}.type` | `fields.${number}.typeMetadata.reference.referencedCollectionId` | `fields.${number}.typeMetadata.multiReference.referencedCollectionId` | `fields.${number}.typeMetadata.multiReference.referencingFieldKey` | `fields.${number}.typeMetadata.multiReference.referencingDisplayName` | `fields.${number}.typeMetadata.array.elementType` | `fields.${number}.typeMetadata.pageLink.calculator.fieldsPattern.pattern` | `fields.${number}.typeMetadata.pageLink.calculator.fieldsPattern.lowercase` | `fields.${number}.typeMetadata.pageLink.calculator.urlizedOnlyPattern.pattern` | `fields.${number}.systemField` | `fields.${number}.encrypted` | `permissions.insert` | `permissions.update` | `permissions.remove` | `permissions.read` | `plugins` | `plugins.${number}.publishOptions.defaultStatus` | `plugins.${number}.singleItemOptions.singleItemId` | `plugins.${number}.urlizedOptions.format` | `plugins.${number}.editablePageLinkOptions.isPersisted` | `plugins.${number}.editablePageLinkOptions.isMutable` | `plugins.${number}.type` | `pagingModes`;
declare function createDataCollection$1(httpClient: HttpClient): CreateDataCollectionSignature;
interface CreateDataCollectionSignature {
    /**
     * Creates a new data collection.
     *
     * The request body must include an ID, details for at least 1 field, and a permissions object. If any of these are missing, the collection isn't created.
     * @param - Collection details.
     * @param - Options for creating a data collection.
     * @returns Details of collection created.
     */
    (collection: NonNullablePaths<DataCollection, `_id` | `fields.${number}.key` | `fields.${number}.type` | `permissions.insert` | `permissions.read` | `permissions.remove` | `permissions.update`>): Promise<NonNullablePaths<DataCollection, DataCollectionNonNullablePaths>>;
}
declare function getDataCollection$1(httpClient: HttpClient): GetDataCollectionSignature;
interface GetDataCollectionSignature {
    /**
     * Retrieves a data collection by ID.
     * @param - ID of the collection to retrieve.
     * @param - Options for retrieving a data collection.
     * @returns Details of the collection requested.
     */
    (dataCollectionId: string, options?: GetDataCollectionOptions): Promise<NonNullablePaths<DataCollection, DataCollectionNonNullablePaths>>;
}
declare function listDataCollections$1(httpClient: HttpClient): ListDataCollectionsSignature;
interface ListDataCollectionsSignature {
    /**
     * Retrieves a list of all data collections associated with the site or project.
     *
     * By default, the list is ordered by ID in ascending order.
     * @param - Options for retrieving a list of data collections.
     */
    (options?: ListDataCollectionsOptions): Promise<NonNullablePaths<ListDataCollectionsResponse, {
        [P in DataCollectionNonNullablePaths]: `collections.${number}.${P}`;
    }[DataCollectionNonNullablePaths]>>;
}
declare function updateDataCollection$1(httpClient: HttpClient): UpdateDataCollectionSignature;
interface UpdateDataCollectionSignature {
    /**
     * Updates a data collection.
     *
     * A collection ID, revision number, permissions, and at least 1 field must be provided within the `collection` body parameter.
     * If a collection with that ID exists, and if its current `revision` number matches the one provided, it is updated.
     * Otherwise, the request fails.
     *
     * When a collection is updated, its `updatedDate` property is changed to the current date and its `revision` property is incremented.
     *
     * > **Note:**
     * > After a collection is updated, it only contains the properties included in the Update Data Collection request. If the existing collection has properties with values and those properties
     * > aren't included in the updated collection details, their values are lost.
     * @param - Updated collection details. The existing collection is replaced with this version.
     * @param - Options for updating a data collection.
     * @returns Updated collection details.
     */
    (collection: NonNullablePaths<DataCollection, `_id` | `fields.${number}.key` | `fields.${number}.type` | `permissions.insert` | `permissions.read` | `permissions.remove` | `permissions.update` | `revision`>): Promise<NonNullablePaths<DataCollection, DataCollectionNonNullablePaths>>;
}
declare function deleteDataCollection$1(httpClient: HttpClient): DeleteDataCollectionSignature;
interface DeleteDataCollectionSignature {
    /**
     * Deletes a data collection.
     *
     * > **Note:**
     * > Once a collection is deleted, it can only be restored for limited amount of time.
     * @param - ID of the collection to delete.
     */
    (dataCollectionId: string): Promise<void>;
}
/** @internal */
declare function restoreDataCollection$1(httpClient: HttpClient): RestoreDataCollectionSignature;
interface RestoreDataCollectionSignature {
    /**
     * Restores recently deleted collection.
     *
     * Fails with `WDE0025` if collection was deleted too long ago or has never existed.
     * @param - Data Collection ID to restore
     */
    (dataCollectionId: string): Promise<NonNullablePaths<RestoreDataCollectionResponse, {
        [P in DataCollectionNonNullablePaths]: `dataCollection.${P}`;
    }[DataCollectionNonNullablePaths]>>;
}
/** @internal */
declare function createDataCollectionField$1(httpClient: HttpClient): CreateDataCollectionFieldSignature;
interface CreateDataCollectionFieldSignature {
    /**
     * Adds new field to data collection schema
     * @param - ID of data collection to update
     */
    (dataCollectionId: string, options: NonNullablePaths<CreateDataCollectionFieldOptions, `field`>): Promise<NonNullablePaths<CreateDataCollectionFieldResponse, {
        [P in DataCollectionNonNullablePaths]: `dataCollection.${P}`;
    }[DataCollectionNonNullablePaths]>>;
}
/** @internal */
declare function updateDataCollectionField$1(httpClient: HttpClient): UpdateDataCollectionFieldSignature;
interface UpdateDataCollectionFieldSignature {
    /**
     * Updates data collection field
     * @param - ID of data collection to update
     */
    (dataCollectionId: string, options: NonNullablePaths<UpdateDataCollectionFieldOptions, `field`>): Promise<NonNullablePaths<UpdateDataCollectionFieldResponse, {
        [P in DataCollectionNonNullablePaths]: `dataCollection.${P}`;
    }[DataCollectionNonNullablePaths]>>;
}
/** @internal */
declare function deleteDataCollectionField$1(httpClient: HttpClient): DeleteDataCollectionFieldSignature;
interface DeleteDataCollectionFieldSignature {
    /**
     * Deletes data collection field
     * @param - ID of data collection to update
     */
    (dataCollectionId: string, options: NonNullablePaths<DeleteDataCollectionFieldOptions, `fieldKey`>): Promise<NonNullablePaths<DeleteDataCollectionFieldResponse, {
        [P in DataCollectionNonNullablePaths]: `dataCollection.${P}`;
    }[DataCollectionNonNullablePaths]>>;
}

declare const createDataCollection: MaybeContext<BuildRESTFunction<typeof createDataCollection$1> & typeof createDataCollection$1>;
declare const getDataCollection: MaybeContext<BuildRESTFunction<typeof getDataCollection$1> & typeof getDataCollection$1>;
declare const listDataCollections: MaybeContext<BuildRESTFunction<typeof listDataCollections$1> & typeof listDataCollections$1>;
declare const updateDataCollection: MaybeContext<BuildRESTFunction<typeof updateDataCollection$1> & typeof updateDataCollection$1>;
declare const deleteDataCollection: MaybeContext<BuildRESTFunction<typeof deleteDataCollection$1> & typeof deleteDataCollection$1>;
/** @internal */
declare const restoreDataCollection: MaybeContext<BuildRESTFunction<typeof restoreDataCollection$1> & typeof restoreDataCollection$1>;
/** @internal */
declare const createDataCollectionField: MaybeContext<BuildRESTFunction<typeof createDataCollectionField$1> & typeof createDataCollectionField$1>;
/** @internal */
declare const updateDataCollectionField: MaybeContext<BuildRESTFunction<typeof updateDataCollectionField$1> & typeof updateDataCollectionField$1>;
/** @internal */
declare const deleteDataCollectionField: MaybeContext<BuildRESTFunction<typeof deleteDataCollectionField$1> & typeof deleteDataCollectionField$1>;

export { CreateDataCollectionFieldOptions, CreateDataCollectionFieldResponse, DataCollection, DeleteDataCollectionFieldOptions, DeleteDataCollectionFieldResponse, GetDataCollectionOptions, ListDataCollectionsOptions, ListDataCollectionsResponse, RestoreDataCollectionResponse, UpdateDataCollectionFieldOptions, UpdateDataCollectionFieldResponse, createDataCollection, createDataCollectionField, deleteDataCollection, deleteDataCollectionField, getDataCollection, listDataCollections, restoreDataCollection, updateDataCollection, updateDataCollectionField };
