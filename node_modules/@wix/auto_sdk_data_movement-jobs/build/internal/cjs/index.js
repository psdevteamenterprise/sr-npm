"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  FieldType: () => FieldType,
  FileFormat: () => FileFormat,
  JobStatus: () => JobStatus,
  SortOrder: () => SortOrder,
  Units: () => Units,
  WebhookIdentityType: () => WebhookIdentityType,
  WixDataEnvironment: () => WixDataEnvironment,
  WritePolicy: () => WritePolicy,
  createFileUploadUrl: () => createFileUploadUrl4,
  getJob: () => getJob4,
  listJobs: () => listJobs4,
  listMovementLogs: () => listMovementLogs4,
  onJobCreated: () => onJobCreated2,
  onJobDeleted: () => onJobDeleted2,
  onJobUpdated: () => onJobUpdated2,
  queryJobs: () => queryJobs4,
  submitJob: () => submitJob4,
  terminateJob: () => terminateJob4
});
module.exports = __toCommonJS(index_exports);

// src/hub-v1-job-movement-jobs.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/hub-v1-job-movement-jobs.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/hub-v1-job-movement-jobs.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixHubV1DataMovementServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/wix-data-hub-fs2",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/wix-data-hub-fs2",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/wix-data-hub-fs2",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/wix-data-hub-fs2",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/data-mover",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/wix-data-hub-fs2",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/wix-data-hub-fs2",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_data_movement-jobs";
function submitJob(payload) {
  function __submitJob({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "POST",
      methodFqn: "wix.hub.v1.DataMovementService.SubmitJob",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/jobs",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "job.startedAt" }, { path: "job.finishedAt" }]
        }
      ])
    };
    return metadata;
  }
  return __submitJob;
}
function createFileUploadUrl(payload) {
  function __createFileUploadUrl({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "POST",
      methodFqn: "wix.hub.v1.DataMovementService.CreateFileUploadUrl",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/temporary-files/upload-url",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __createFileUploadUrl;
}
function getJob(payload) {
  function __getJob({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "GET",
      methodFqn: "wix.hub.v1.DataMovementService.GetJob",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/jobs/{jobId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "job.startedAt" }, { path: "job.finishedAt" }]
        }
      ])
    };
    return metadata;
  }
  return __getJob;
}
function listJobs(payload) {
  function __listJobs({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "POST",
      methodFqn: "wix.hub.v1.DataMovementService.ListJobs",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/jobs/list",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "jobs.startedAt" }, { path: "jobs.finishedAt" }]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixHubV1DataMovementServiceUrl({
            protoPath: "/v1/jobs/list",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __listJobs;
}
function queryJobs(payload) {
  function __queryJobs({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "POST",
      methodFqn: "wix.hub.v1.DataMovementService.QueryJobs",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/jobs/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "jobs.startedAt" }, { path: "jobs.finishedAt" }]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixHubV1DataMovementServiceUrl({
            protoPath: "/v1/jobs/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryJobs;
}
function terminateJob(payload) {
  function __terminateJob({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "POST",
      methodFqn: "wix.hub.v1.DataMovementService.TerminateJob",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/jobs/{jobId}/terminate",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "job.startedAt" }, { path: "job.finishedAt" }]
        }
      ])
    };
    return metadata;
  }
  return __terminateJob;
}
function listMovementLogs(payload) {
  function __listMovementLogs({ host }) {
    const metadata = {
      entityFqdn: "wix.hub.v1.job",
      method: "GET",
      methodFqn: "wix.hub.v1.DataMovementService.ListMovementLogs",
      packageName: PACKAGE_NAME,
      url: resolveWixHubV1DataMovementServiceUrl({
        protoPath: "/v1/jobs/{jobId}/logs",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __listMovementLogs;
}

// src/hub-v1-job-movement-jobs.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var JobStatus = /* @__PURE__ */ ((JobStatus2) => {
  JobStatus2["UNINITIALIZED"] = "UNINITIALIZED";
  JobStatus2["INITIALIZING"] = "INITIALIZING";
  JobStatus2["IN_PROGRESS"] = "IN_PROGRESS";
  JobStatus2["COMPLETED"] = "COMPLETED";
  JobStatus2["FAILED"] = "FAILED";
  JobStatus2["PARTIALLY_SUCCESSFUL"] = "PARTIALLY_SUCCESSFUL";
  return JobStatus2;
})(JobStatus || {});
var WixDataEnvironment = /* @__PURE__ */ ((WixDataEnvironment2) => {
  WixDataEnvironment2["LIVE"] = "LIVE";
  WixDataEnvironment2["SANDBOX"] = "SANDBOX";
  return WixDataEnvironment2;
})(WixDataEnvironment || {});
var FileFormat = /* @__PURE__ */ ((FileFormat2) => {
  FileFormat2["UNKNOWN"] = "UNKNOWN";
  FileFormat2["CSV"] = "CSV";
  FileFormat2["JSONL"] = "JSONL";
  return FileFormat2;
})(FileFormat || {});
var WritePolicy = /* @__PURE__ */ ((WritePolicy2) => {
  WritePolicy2["OVERWRITE"] = "OVERWRITE";
  WritePolicy2["SKIP_EXISTING"] = "SKIP_EXISTING";
  WritePolicy2["TRUNCATE_BEFORE"] = "TRUNCATE_BEFORE";
  return WritePolicy2;
})(WritePolicy || {});
var FieldType = /* @__PURE__ */ ((FieldType2) => {
  FieldType2["ANY"] = "ANY";
  FieldType2["STRING"] = "STRING";
  FieldType2["NUMBER"] = "NUMBER";
  FieldType2["BOOLEAN"] = "BOOLEAN";
  FieldType2["DATE"] = "DATE";
  FieldType2["DATETIME"] = "DATETIME";
  FieldType2["BINARY"] = "BINARY";
  FieldType2["OBJECT"] = "OBJECT";
  FieldType2["ARRAY"] = "ARRAY";
  FieldType2["URL"] = "URL";
  FieldType2["WIX_MEDIA_URL"] = "WIX_MEDIA_URL";
  FieldType2["WIX_MEDIA_IMAGE_URL"] = "WIX_MEDIA_IMAGE_URL";
  FieldType2["WIX_MEDIA_VIDEO_URL"] = "WIX_MEDIA_VIDEO_URL";
  FieldType2["WIX_MEDIA_DOCUMENT_URL"] = "WIX_MEDIA_DOCUMENT_URL";
  FieldType2["IMAGE_URL"] = "IMAGE_URL";
  FieldType2["VIDEO_URL"] = "VIDEO_URL";
  return FieldType2;
})(FieldType || {});
var Units = /* @__PURE__ */ ((Units2) => {
  Units2["UNKNOWN_UNITS"] = "UNKNOWN_UNITS";
  Units2["BYTES"] = "BYTES";
  Units2["ITEMS"] = "ITEMS";
  return Units2;
})(Units || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
async function submitJob2(source, destination, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    source,
    destination,
    transformations: options?.transformations,
    name: options?.name,
    sourceSiteId: options?.sourceSiteId,
    destinationSiteId: options?.destinationSiteId
  });
  const reqOpts = submitJob(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          source: "$[0]",
          destination: "$[1]",
          transformations: "$[2].transformations",
          name: "$[2].name",
          sourceSiteId: "$[2].sourceSiteId",
          destinationSiteId: "$[2].destinationSiteId"
        },
        singleArgumentUnchanged: false
      },
      ["source", "destination", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createFileUploadUrl2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    fileName: options?.fileName
  });
  const reqOpts = createFileUploadUrl(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { fileName: "$[0].fileName" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getJob2(jobId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ jobId });
  const reqOpts = getJob(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.job;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { jobId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["jobId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listJobs2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    paging: options?.paging
  });
  const reqOpts = listJobs(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { paging: "$[0].paging" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryJobs2() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryJobs(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.jobs,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function terminateJob2(jobId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ jobId });
  const reqOpts = terminateJob(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { jobId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["jobId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listMovementLogs2(jobId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    jobId,
    paging: options?.paging
  });
  const reqOpts = listMovementLogs(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { jobId: "$[0]", paging: "$[1].paging" },
        singleArgumentUnchanged: false
      },
      ["jobId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/hub-v1-job-movement-jobs.public.ts
function submitJob3(httpClient) {
  return (source, destination, options) => submitJob2(
    source,
    destination,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function createFileUploadUrl3(httpClient) {
  return (options) => createFileUploadUrl2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getJob3(httpClient) {
  return (jobId) => getJob2(
    jobId,
    // @ts-ignore
    { httpClient }
  );
}
function listJobs3(httpClient) {
  return (options) => listJobs2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryJobs3(httpClient) {
  return () => queryJobs2(
    // @ts-ignore
    { httpClient }
  );
}
function terminateJob3(httpClient) {
  return (jobId) => terminateJob2(
    jobId,
    // @ts-ignore
    { httpClient }
  );
}
function listMovementLogs3(httpClient) {
  return (jobId, options) => listMovementLogs2(
    jobId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onJobCreated = (0, import_sdk_types.EventDefinition)(
  "wix.hub.v1.job_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.startedAt" },
          { path: "entity.finishedAt" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onJobDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.hub.v1.job_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.startedAt" },
          { path: "undefined.finishedAt" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onJobUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.hub.v1.job_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.startedAt" },
          { path: "entity.finishedAt" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/hub-v1-job-movement-jobs.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var submitJob4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(submitJob3);
var createFileUploadUrl4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createFileUploadUrl3);
var getJob4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getJob3);
var listJobs4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listJobs3);
var queryJobs4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryJobs3);
var terminateJob4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(terminateJob3);
var listMovementLogs4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listMovementLogs3);
var onJobCreated2 = (0, import_event_definition_modules.createEventModule)(onJobCreated);
var onJobDeleted2 = (0, import_event_definition_modules.createEventModule)(onJobDeleted);
var onJobUpdated2 = (0, import_event_definition_modules.createEventModule)(onJobUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FieldType,
  FileFormat,
  JobStatus,
  SortOrder,
  Units,
  WebhookIdentityType,
  WixDataEnvironment,
  WritePolicy,
  createFileUploadUrl,
  getJob,
  listJobs,
  listMovementLogs,
  onJobCreated,
  onJobDeleted,
  onJobUpdated,
  queryJobs,
  submitJob,
  terminateJob
});
//# sourceMappingURL=index.js.map