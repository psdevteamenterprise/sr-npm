import { SubmitJobRequest as SubmitJobRequest$1, SubmitJobResponse as SubmitJobResponse$1, CreateFileUploadUrlRequest as CreateFileUploadUrlRequest$1, CreateFileUploadUrlResponse as CreateFileUploadUrlResponse$1, GetJobRequest as GetJobRequest$1, GetJobResponse as GetJobResponse$1, ListJobsRequest as ListJobsRequest$1, ListJobsResponse as ListJobsResponse$1, QueryJobsRequest as QueryJobsRequest$1, QueryJobsResponse as QueryJobsResponse$1, TerminateJobRequest as TerminateJobRequest$1, TerminateJobResponse as TerminateJobResponse$1, ListMovementLogsRequest as ListMovementLogsRequest$1, ListMovementLogsResponse as ListMovementLogsResponse$1 } from './index.typings.js';
import '@wix/sdk-types';

/** Data movement job object. */
interface DataMovementJob extends DataMovementJobStatusOptionsOneOf {
    /** When the job's `status` is `PARTIALLY_SUCCESSFUL`, the additional details. */
    partiallySuccessfulOptions?: PartiallySuccessfulStatusOptions;
    /**
     * Job ID.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * When the job was submitted.
     * @readonly
     */
    startedAt?: Date | null;
    /**
     * Current job status.
     * @readonly
     */
    status?: JobStatusWithLiterals;
    /** Source to move data from. */
    source?: Source;
    /** Destination to move data to. */
    destination?: Destination;
    /**
     * Job name.
     * @maxLength 1024
     */
    name?: string;
    /**
     * When the job `status` is `IN_PROGRESS`, the progress details.
     * @readonly
     */
    progress?: Progress;
    /**
     * Job finish time.
     *
     * A job is considered finished when its `status` updates to `COMPLETED`, `FAILED`, or `PARTIALLY_SUCCESSFUL`.
     * @readonly
     */
    finishedAt?: Date | null;
    /**
     * Error information.
     * @readonly
     */
    error?: ApplicationError;
    /**
     * When moving data from a Wix data collection, the source site ID.
     *
     * By default, the source site is the current site. To move data from [any site in the same Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account), specify the site ID, which you can retrieve by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of a source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to a Wix data collection, the destination site ID.
     *
     * By default, the destination site is the current site. To move data to [any site in the same Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account), specify the site ID, which you can retrieve by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of a source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
    /** Number of recorded logs. */
    logsRecorded?: number;
}
/** @oneof */
interface DataMovementJobStatusOptionsOneOf {
    /** When the job's `status` is `PARTIALLY_SUCCESSFUL`, the additional details. */
    partiallySuccessfulOptions?: PartiallySuccessfulStatusOptions;
}
declare enum JobStatus {
    /** Job was submitted but has not yet started. */
    UNINITIALIZED = "UNINITIALIZED",
    /** Job is initializing. */
    INITIALIZING = "INITIALIZING",
    /** Job is in progress. */
    IN_PROGRESS = "IN_PROGRESS",
    /** Job has successfully completed. */
    COMPLETED = "COMPLETED",
    /** Job has failed. */
    FAILED = "FAILED",
    /** Job has completed but was partially successful due to a destination limitation. See `PartiallySuccessfulOptions` for additional details. */
    PARTIALLY_SUCCESSFUL = "PARTIALLY_SUCCESSFUL"
}
/** @enumType */
type JobStatusWithLiterals = JobStatus | 'UNINITIALIZED' | 'INITIALIZING' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | 'PARTIALLY_SUCCESSFUL';
interface Source extends SourceSourceOneOf {
    /**
     * Wix data collection.
     *
     * You can move items from native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataSource;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationSource;
    /**
     * Source file.
     *
     * You can import data from files in CSV or JSONL formats. Uploading a file with an invalid format causes the movement job to fail.
     *
     * To upload a file, call Create File Upload Url ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/movement-jobs/create-file-upload-url) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-movement-jobs/create-file-upload-url)) and use the `uploadUrl` from the response. For example:
     *
     * `curl --request PUT --upload-file "${path_to_file}" "${uploadUrl}"`
     */
    file?: FileSource;
}
/** @oneof */
interface SourceSourceOneOf {
    /**
     * Wix data collection.
     *
     * You can move items from native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataSource;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationSource;
    /**
     * Source file.
     *
     * You can import data from files in CSV or JSONL formats. Uploading a file with an invalid format causes the movement job to fail.
     *
     * To upload a file, call Create File Upload Url ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/movement-jobs/create-file-upload-url) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-movement-jobs/create-file-upload-url)) and use the `uploadUrl` from the response. For example:
     *
     * `curl --request PUT --upload-file "${path_to_file}" "${uploadUrl}"`
     */
    file?: FileSource;
}
declare enum FileFormat {
    /** Unknown format. */
    UNKNOWN = "UNKNOWN",
    /** CSV format. */
    CSV = "CSV",
    /** JSONL format. */
    JSONL = "JSONL"
}
/** @enumType */
type FileFormatWithLiterals = FileFormat | 'UNKNOWN' | 'CSV' | 'JSONL';
/** Wix data collection. */
interface WixDataSource {
    /**
     * ID of the data collection.
     * @minLength 1
     * @maxLength 256
     */
    collectionId?: string;
    /**
     * Filter to apply to the items. Only items that pass the filter are moved.
     *
     * Learn more about building a query filter using [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /** Item fields to move. If not set, the method moves the full items. */
    fields?: string[];
}
interface LocalizationSource {
    /**
     * Translated CMS content in the specified languages. Content in these languages is exported to the destination, with the first specified language treated as the main one.
     *
     * Use two-letter language codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format. You can also specify a two-letter country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format.
     *
     * Learn more about [available languages in Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-languages-available).
     * @format LANGUAGE_TAG
     * @minSize 2
     * @maxSize 64
     */
    languages?: string[];
}
/**
 * File.
 *
 * To create a file upload URL, call the Create File Upload Url method and use the `uploadURL` in the response to upload the source file.
 */
interface FileSource {
    /** File format. If not specified, automatically determined by Wix. */
    format?: FileFormatWithLiterals;
    /**
     * File ID as returned in the `fileId` property of the Create File Upload URL method's response.
     * @maxLength 512
     */
    fileId?: string;
    /**
     * URL where the source file is uploaded. Automatically generated by Wix.
     * @readonly
     * @maxLength 2048
     */
    url?: string;
}
interface Destination extends DestinationDestinationOneOf {
    /**
     * Wix data collection.
     *
     * You can move items to native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataDestination;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationDestination;
    /** Downloadable file with the moved items. */
    file?: FileDestination;
}
/** @oneof */
interface DestinationDestinationOneOf {
    /**
     * Wix data collection.
     *
     * You can move items to native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataDestination;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationDestination;
    /** Downloadable file with the moved items. */
    file?: FileDestination;
}
/** Wix data collection. */
interface WixDataDestination {
    /**
     * ID of the destination collection.
     * @maxLength 256
     */
    collectionId?: string;
    /**
     * When items already exist in the destination collection, the data writing policy.
     *
     * Default: `OVERWRITE`.
     */
    writePolicy?: WritePolicyWithLiterals;
}
declare enum WritePolicy {
    /** When an item with the same ID exists in the collection, overwrite it. */
    OVERWRITE = "OVERWRITE",
    /** When an item with the same ID exists in the collection, skip it. */
    SKIP_EXISTING = "SKIP_EXISTING",
    /** Clear the destination collection before moving data. When the job completes, the collection contains only the moved data. */
    TRUNCATE_BEFORE = "TRUNCATE_BEFORE"
}
/** @enumType */
type WritePolicyWithLiterals = WritePolicy | 'OVERWRITE' | 'SKIP_EXISTING' | 'TRUNCATE_BEFORE';
interface LocalizationDestination {
    /**
     * Translated CMS content in the specified languages. Content in these languages is imported from the source, with the first specified language treated as the main one.
     *
     * Use two-letter language codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format. You can also specify a two-letter country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format.
     *
     * Learn more about [available languages in Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-languages-available).
     * @minSize 2
     * @maxSize 64
     * @format LANGUAGE_TAG
     */
    languages?: string[];
}
/** Destination file. Creates a file and generates a download URL. */
interface FileDestination {
    /** File format. */
    format?: FileFormatWithLiterals;
    /**
     * File name.
     * @maxLength 512
     */
    fileName?: string | null;
    /**
     * File download URL.
     * @readonly
     * @maxLength 2048
     */
    url?: string;
}
interface Transformation extends TransformationTransformationOneOf {
}
/** @oneof */
interface TransformationTransformationOneOf {
}
/** When the job's status is `IN_PROGRESS`, the job's progress details. */
interface Progress {
    /**
     * Number of units already processed.
     * @readonly
     */
    current?: number;
    /**
     * Total number of units to move.
     * @readonly
     */
    total?: number | null;
    /** Number of items that failed to move to the destination. */
    itemsRejected?: number;
    /** Number of items successfully moved to the destination. */
    itemsSuccessful?: number;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface PartiallySuccessfulStatusOptions {
    /**
     * Reason the job was partially successful.
     * @maxLength 1000
     */
    cause?: string;
}
interface SubmitJobRequest extends SubmitJobRequestSiteOverrideOneOf {
    /**
     * When moving data from the Wix data collection of a site other than the current one, the source site ID.
     *
     * By default, the source site is the current site. However, you can move data from any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to the Wix data collection of a site other than the current one, the destination site ID.
     *
     * By default, the destination site is the current site. However, you can move data to any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account) by specifying its ID. You can retrieve this ID by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
    /** Source to move data from. */
    source: Source;
    /** Destination to move data to. */
    destination: Destination;
    /**
     * Transformations to apply to the data before moving to the destination.
     * @maxSize 32
     */
    transformations?: Transformation[];
    /** Job name. */
    name?: string;
}
/** @oneof */
interface SubmitJobRequestSiteOverrideOneOf {
    /**
     * When moving data from the Wix data collection of a site other than the current one, the source site ID.
     *
     * By default, the source site is the current site. However, you can move data from any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to the Wix data collection of a site other than the current one, the destination site ID.
     *
     * By default, the destination site is the current site. However, you can move data to any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account) by specifying its ID. You can retrieve this ID by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
}
interface SubmitJobResponse {
    /** Details of the submitted job. */
    job?: DataMovementJob;
}
interface CreateFileUploadUrlRequest {
    /**
     * Name of uploaded file.
     * @maxLength 512
     */
    fileName?: string | null;
}
interface CreateFileUploadUrlResponse {
    /**
     * File ID.
     * @maxLength 512
     */
    fileId?: string;
    /**
     * URL to which you can upload the file.
     * @maxLength 8192
     */
    uploadUrl?: string;
}
interface GetJobRequest {
    /**
     * Job ID.
     * @format GUID
     */
    jobId: string;
}
interface GetJobResponse {
    /** Details of the retrieved job. */
    job?: DataMovementJob;
}
interface ListJobsRequest {
    /** Paging metadata. */
    paging?: CursorPaging;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface ListJobsResponse {
    /** List of jobs. */
    jobs?: DataMovementJob[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface QueryJobsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface QueryJobsResponse {
    /** List of jobs matching the query. */
    jobs?: DataMovementJob[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface TerminateJobRequest {
    /**
     * ID of the job to terminate.
     * @format GUID
     */
    jobId: string;
}
interface TerminateJobResponse {
    /** Details of the terminated job. */
    job?: DataMovementJob;
}
interface ListMovementLogsRequest {
    /**
     * ID of the job for which to list logs.
     * @format GUID
     */
    jobId: string;
    /** Paging metadata. */
    paging?: CursorPaging;
}
interface ListMovementLogsResponse {
    /** Job logs. */
    logs?: MovementLog[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
/**
 * Details about the attempt to move the source item.
 *
 * Logs are generated by the destination for each item that failed to move. Some destination also generate logs for items that successfully moved.
 */
interface MovementLog {
    /**
     * ID of the item in the source, such as a Wix Data Item or a row number in a CSV file.
     * @maxLength 512
     */
    sourceItemId?: string;
    /** Details about the failure if moving the item fails. */
    failure?: ApplicationError;
    /**
     * Additional details provided when moving the item succeeds with details.
     *
     * > **Note**: Each destination type determines the structure of its `details` object.
     */
    details?: Record<string, any> | null;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function submitJob(): __PublicMethodMetaInfo<'POST', {}, SubmitJobRequest$1, SubmitJobRequest, SubmitJobResponse$1, SubmitJobResponse>;
declare function createFileUploadUrl(): __PublicMethodMetaInfo<'POST', {}, CreateFileUploadUrlRequest$1, CreateFileUploadUrlRequest, CreateFileUploadUrlResponse$1, CreateFileUploadUrlResponse>;
declare function getJob(): __PublicMethodMetaInfo<'GET', {
    jobId: string;
}, GetJobRequest$1, GetJobRequest, GetJobResponse$1, GetJobResponse>;
declare function listJobs(): __PublicMethodMetaInfo<'GET', {}, ListJobsRequest$1, ListJobsRequest, ListJobsResponse$1, ListJobsResponse>;
declare function queryJobs(): __PublicMethodMetaInfo<'GET', {}, QueryJobsRequest$1, QueryJobsRequest, QueryJobsResponse$1, QueryJobsResponse>;
declare function terminateJob(): __PublicMethodMetaInfo<'POST', {
    jobId: string;
}, TerminateJobRequest$1, TerminateJobRequest, TerminateJobResponse$1, TerminateJobResponse>;
declare function listMovementLogs(): __PublicMethodMetaInfo<'GET', {
    jobId: string;
}, ListMovementLogsRequest$1, ListMovementLogsRequest, ListMovementLogsResponse$1, ListMovementLogsResponse>;

export { type __PublicMethodMetaInfo, createFileUploadUrl, getJob, listJobs, listMovementLogs, queryJobs, submitJob, terminateJob };
