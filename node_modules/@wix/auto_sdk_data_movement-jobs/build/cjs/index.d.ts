import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { Source, Destination, SubmitJobOptions, SubmitJobResponse, CreateFileUploadUrlOptions, CreateFileUploadUrlResponse, DataMovementJob, ListJobsOptions, ListJobsResponse, JobsQueryBuilder, TerminateJobResponse, ListMovementLogsOptions, ListMovementLogsResponse, JobCreatedEnvelope, JobDeletedEnvelope, JobUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, ApplicationError, BaseEventMetadata, CreateFileUploadUrlRequest, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DataMovementJobLogs, DataMovementJobStatusOptionsOneOf, DestinationDestinationOneOf, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, FailedOptions, Field, FieldType, FileDestination, FileFormat, FileSource, GetJobByIdRequest, GetJobByIdResponse, GetJobRequest, GetJobResponse, IdentificationData, IdentificationDataIdOneOf, InProgressOptions, ItemsSuccessfulInfo, JobCallback, JobCallbackOptionsOneOf, JobStatus, JobsQueryResult, ListJobsRequest, ListMovementLogsRequest, LocalizationDestination, LocalizationSource, MessageEnvelope, MovementLog, Paging, PartiallySuccessfulOptions, PartiallySuccessfulStatusOptions, Progress, QueryJobsRequest, QueryJobsResponse, QueryV2, QueryV2PagingMethodOneOf, RestoreInfo, Schema, SortOrder, Sorting, SourceSourceOneOf, StoresCatalogProductsDestination, SubmitJobOptionsSiteOverrideOneOf, SubmitJobRequest, SubmitJobRequestSiteOverrideOneOf, TerminateJobByIdRequest, TerminateJobByIdResponse, TerminateJobRequest, TestDestination, TestSource, TestTransformation, Transformation, TransformationTransformationOneOf, Units, WebhookIdentityType, WixDataDestination, WixDataEnvironment, WixDataSource, WritePolicy } from './index.typings.js';

type JobNonNullablePaths = `partiallySuccessfulOptions.cause` | `_id` | `status` | `source.wixDataCollection.collectionId` | `source.wixDataCollection.fields` | `source.localization.languages` | `source.file.format` | `source.file.fileId` | `source.file.url` | `destination.wixDataCollection.collectionId` | `destination.wixDataCollection.writePolicy` | `destination.localization.languages` | `destination.file.format` | `destination.file.url` | `name` | `progress.current` | `progress.itemsRejected` | `progress.itemsSuccessful` | `error.code` | `error.description` | `sourceSiteId` | `destinationSiteId` | `logsRecorded`;
declare function submitJob$1(httpClient: HttpClient): SubmitJobSignature;
interface SubmitJobSignature {
    /**
     * Submit a data movement job.
     *
     * > **Note**: By default, the job is submitted for the current site.
     * @param - Source to move data from.
     * @param - Destination to move data to.
     */
    (source: NonNullablePaths<Source, `file.fileId` | `localization.languages` | `wixDataCollection.collectionId`>, destination: NonNullablePaths<Destination, `file.format` | `localization.languages` | `wixDataCollection.collectionId`>, options?: SubmitJobOptions): Promise<NonNullablePaths<SubmitJobResponse, {
        [P in JobNonNullablePaths]: `job.${P}`;
    }[JobNonNullablePaths]>>;
}
declare function createFileUploadUrl$1(httpClient: HttpClient): CreateFileUploadUrlSignature;
interface CreateFileUploadUrlSignature {
    /**
     * Creates an upload URL for a data source file.
     *
     * Before submitting a job to import data from a file to a collection, call this method to generate an upload URL. Use the `uploadUrl` in the response to upload your source file. For example:
     *
     * `curl --request PUT --upload-file "${path_to_file}" "${uploadUrl}"`
     *
     * > **Note**: The URL is valid for 15 minutes.
     */
    (options?: CreateFileUploadUrlOptions): Promise<NonNullablePaths<CreateFileUploadUrlResponse, `fileId` | `uploadUrl`>>;
}
declare function getJob$1(httpClient: HttpClient): GetJobSignature;
interface GetJobSignature {
    /**
     * Retrieves the specified data movement job.
     *
     * > **Note**: You can only retrieve jobs submitted for the current site.
     * @param - Job ID.
     * @returns Details of the retrieved job.
     */
    (jobId: string): Promise<NonNullablePaths<DataMovementJob, JobNonNullablePaths>>;
}
declare function listJobs$1(httpClient: HttpClient): ListJobsSignature;
interface ListJobsSignature {
    /**
     * Lists data movement jobs for the current site.
     *  The `listJobs()` method builds a query to retrieve a list of jobs for the current site, and returns a [`JobsQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/ascending) object.
     *  The returned object contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/find) method.
     *
     *  You can refine the query by chaining `JobsQueryBuilder` methods onto the query. `JobsQueryBuilder` methods enable you to sort, filter, and control the results `listJobs()` returns.
     *
     * `listJobs()` runs with these `JobsQueryBuilder` defaults, which you can override:
     *
     * - [`skipTo`: `0`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/skip-to)
     * - [`limit`: `50`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/limit)
     * - [`ascending`: by `_id`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/ascending)
     *
     * The methods chained to `listJobs()` are applied in the order they're called. For example, if you apply `ascending('firstName')` and then `descending('age')`, the results are sorted first by firstName, and then, if there are multiple results with the same `firstName`, the items are sorted by `age`.
     *
     */
    (options?: ListJobsOptions): Promise<NonNullablePaths<ListJobsResponse, {
        [P in JobNonNullablePaths]: `jobs.${number}.${P}`;
    }[JobNonNullablePaths]>>;
}
declare function queryJobs$1(httpClient: HttpClient): QueryJobsSignature;
interface QueryJobsSignature {
    /**
     * Queries data movement jobs for the current site.
     */
    (): JobsQueryBuilder;
}
declare function terminateJob$1(httpClient: HttpClient): TerminateJobSignature;
interface TerminateJobSignature {
    /**
     * Terminates the specified job.
     * @param - ID of the job to terminate.
     */
    (jobId: string): Promise<NonNullablePaths<TerminateJobResponse, {
        [P in JobNonNullablePaths]: `job.${P}`;
    }[JobNonNullablePaths]>>;
}
declare function listMovementLogs$1(httpClient: HttpClient): ListMovementLogsSignature;
interface ListMovementLogsSignature {
    /**
     * Lists logs for the specified job.
     *
     * Logs are generated by the destination for each item that failed to move. Some destinations also generate logs for items that moved successfully.
     * @param - ID of the job for which to list logs.
     */
    (jobId: string, options?: ListMovementLogsOptions): Promise<NonNullablePaths<ListMovementLogsResponse, `logs` | `logs.${number}.sourceItemId` | `logs.${number}.failure.code` | `logs.${number}.failure.description`>>;
}
declare const onJobCreated$1: EventDefinition<JobCreatedEnvelope, "wix.hub.v1.job_created">;
declare const onJobDeleted$1: EventDefinition<JobDeletedEnvelope, "wix.hub.v1.job_deleted">;
declare const onJobUpdated$1: EventDefinition<JobUpdatedEnvelope, "wix.hub.v1.job_updated">;

declare const submitJob: MaybeContext<BuildRESTFunction<typeof submitJob$1> & typeof submitJob$1>;
declare const createFileUploadUrl: MaybeContext<BuildRESTFunction<typeof createFileUploadUrl$1> & typeof createFileUploadUrl$1>;
declare const getJob: MaybeContext<BuildRESTFunction<typeof getJob$1> & typeof getJob$1>;
declare const listJobs: MaybeContext<BuildRESTFunction<typeof listJobs$1> & typeof listJobs$1>;
declare const queryJobs: MaybeContext<BuildRESTFunction<typeof queryJobs$1> & typeof queryJobs$1>;
declare const terminateJob: MaybeContext<BuildRESTFunction<typeof terminateJob$1> & typeof terminateJob$1>;
declare const listMovementLogs: MaybeContext<BuildRESTFunction<typeof listMovementLogs$1> & typeof listMovementLogs$1>;
/**
 * Triggered when a job is submitted.
 */
declare const onJobCreated: BuildEventDefinition<typeof onJobCreated$1>;
/**
 * Triggered when a job is terminated.
 */
declare const onJobDeleted: BuildEventDefinition<typeof onJobDeleted$1>;
/**
 * Triggered when a job's `status` updates.
 */
declare const onJobUpdated: BuildEventDefinition<typeof onJobUpdated$1>;

export { CreateFileUploadUrlOptions, CreateFileUploadUrlResponse, DataMovementJob, Destination, JobCreatedEnvelope, JobDeletedEnvelope, JobUpdatedEnvelope, JobsQueryBuilder, ListJobsOptions, ListJobsResponse, ListMovementLogsOptions, ListMovementLogsResponse, Source, SubmitJobOptions, SubmitJobResponse, TerminateJobResponse, createFileUploadUrl, getJob, listJobs, listMovementLogs, onJobCreated, onJobDeleted, onJobUpdated, queryJobs, submitJob, terminateJob };
