import { NonNullablePaths } from '@wix/sdk-types';

/** Data movement job object. */
interface DataMovementJob extends DataMovementJobStatusOptionsOneOf {
    /** When the job's `status` is `PARTIALLY_SUCCESSFUL`, the additional details. */
    partiallySuccessfulOptions?: PartiallySuccessfulStatusOptions;
    /**
     * Job ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * When the job was submitted.
     * @readonly
     */
    startedAt?: Date | null;
    /**
     * Current job status.
     * @readonly
     */
    status?: JobStatusWithLiterals;
    /** Source to move data from. */
    source?: Source;
    /** Destination to move data to. */
    destination?: Destination;
    /**
     * Job name.
     * @maxLength 1024
     */
    name?: string;
    /**
     * When the job `status` is `IN_PROGRESS`, the progress details.
     * @readonly
     */
    progress?: Progress;
    /**
     * Job finish time.
     *
     * A job is considered finished when its `status` updates to `COMPLETED`, `FAILED`, or `PARTIALLY_SUCCESSFUL`.
     * @readonly
     */
    finishedAt?: Date | null;
    /**
     * Error information.
     * @readonly
     */
    error?: ApplicationError;
    /**
     * When moving data from a Wix data collection, the source site ID.
     *
     * By default, the source site is the current site. To move data from [any site in the same Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account), specify the site ID, which you can retrieve by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of a source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to a Wix data collection, the destination site ID.
     *
     * By default, the destination site is the current site. To move data to [any site in the same Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account), specify the site ID, which you can retrieve by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of a source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
    /** Number of recorded logs. */
    logsRecorded?: number;
}
/** @oneof */
interface DataMovementJobStatusOptionsOneOf {
    /** When the job's `status` is `PARTIALLY_SUCCESSFUL`, the additional details. */
    partiallySuccessfulOptions?: PartiallySuccessfulStatusOptions;
}
declare enum JobStatus {
    /** Job was submitted but has not yet started. */
    UNINITIALIZED = "UNINITIALIZED",
    /** Job is initializing. */
    INITIALIZING = "INITIALIZING",
    /** Job is in progress. */
    IN_PROGRESS = "IN_PROGRESS",
    /** Job has successfully completed. */
    COMPLETED = "COMPLETED",
    /** Job has failed. */
    FAILED = "FAILED",
    /** Job has completed but was partially successful due to a destination limitation. See `PartiallySuccessfulOptions` for additional details. */
    PARTIALLY_SUCCESSFUL = "PARTIALLY_SUCCESSFUL"
}
/** @enumType */
type JobStatusWithLiterals = JobStatus | 'UNINITIALIZED' | 'INITIALIZING' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | 'PARTIALLY_SUCCESSFUL';
interface Source extends SourceSourceOneOf {
    /**
     * Wix data collection.
     *
     * You can move items from native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataSource;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationSource;
    /**
     * Source file.
     *
     * You can import data from files in CSV or JSONL formats. Uploading a file with an invalid format causes the movement job to fail.
     *
     * To upload a file, call Create File Upload Url ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/movement-jobs/create-file-upload-url) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-movement-jobs/create-file-upload-url)) and use the `uploadUrl` from the response. For example:
     *
     * `curl --request PUT --upload-file "${path_to_file}" "${uploadUrl}"`
     */
    file?: FileSource;
}
/** @oneof */
interface SourceSourceOneOf {
    /**
     * Wix data collection.
     *
     * You can move items from native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataSource;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationSource;
    /**
     * Source file.
     *
     * You can import data from files in CSV or JSONL formats. Uploading a file with an invalid format causes the movement job to fail.
     *
     * To upload a file, call Create File Upload Url ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/movement-jobs/create-file-upload-url) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-movement-jobs/create-file-upload-url)) and use the `uploadUrl` from the response. For example:
     *
     * `curl --request PUT --upload-file "${path_to_file}" "${uploadUrl}"`
     */
    file?: FileSource;
}
declare enum WixDataEnvironment {
    /** Collection's [live environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#sandbox-collections). */
    LIVE = "LIVE",
    /** Collection's [sandbox environment](https://support.wix.com/en/article/cms-about-sandbox-and-live-collections-and-syncing#live-collections). */
    SANDBOX = "SANDBOX"
}
/** @enumType */
type WixDataEnvironmentWithLiterals = WixDataEnvironment | 'LIVE' | 'SANDBOX';
declare enum FileFormat {
    /** Unknown format. */
    UNKNOWN = "UNKNOWN",
    /** CSV format. */
    CSV = "CSV",
    /** JSONL format. */
    JSONL = "JSONL"
}
/** @enumType */
type FileFormatWithLiterals = FileFormat | 'UNKNOWN' | 'CSV' | 'JSONL';
/** Wix data collection. */
interface WixDataSource {
    /**
     * ID of the data collection.
     * @minLength 1
     * @maxLength 256
     */
    collectionId?: string;
    /**
     * Filter to apply to the items. Only items that pass the filter are moved.
     *
     * Learn more about building a query filter using [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /** Item fields to move. If not set, the method moves the full items. */
    fields?: string[];
}
interface LocalizationSource {
    /**
     * Translated CMS content in the specified languages. Content in these languages is exported to the destination, with the first specified language treated as the main one.
     *
     * Use two-letter language codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format. You can also specify a two-letter country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format.
     *
     * Learn more about [available languages in Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-languages-available).
     * @format LANGUAGE_TAG
     * @minSize 2
     * @maxSize 64
     */
    languages?: string[];
}
/**
 * File.
 *
 * To create a file upload URL, call the Create File Upload Url method and use the `uploadURL` in the response to upload the source file.
 */
interface FileSource {
    /** File format. If not specified, automatically determined by Wix. */
    format?: FileFormatWithLiterals;
    /**
     * File ID as returned in the `fileId` property of the Create File Upload URL method's response.
     * @maxLength 512
     */
    fileId?: string;
    /**
     * URL where the source file is uploaded. Automatically generated by Wix.
     * @readonly
     * @maxLength 2048
     */
    url?: string;
}
interface TestSource {
    /**
     * Discriminator value for a particular test source.
     * @maxLength 512
     */
    type?: string;
    /** Test source details. */
    details?: Record<string, any> | null;
}
/** Job logs. */
interface DataMovementJobLogs {
    /**
     * ID of the job from which to export logs.
     * @format GUID
     */
    jobId?: string;
}
interface Destination extends DestinationDestinationOneOf {
    /**
     * Wix data collection.
     *
     * You can move items to native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataDestination;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationDestination;
    /** Downloadable file with the moved items. */
    file?: FileDestination;
}
/** @oneof */
interface DestinationDestinationOneOf {
    /**
     * Wix data collection.
     *
     * You can move items to native Wix collections, [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), and [external database collections](https://dev.wix.com/docs/develop-websites/articles/databases/external-databases/overview/integrating-external-databases-with-your-wix-site).
     */
    wixDataCollection?: WixDataDestination;
    /**
     * Localized CMS content. Available when the site has [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) installed.
     *
     * Learn more about working with [translated CMS content](https://support.wix.com/en/article/wix-multilingual-translating-cms-collection-content).
     */
    localization?: LocalizationDestination;
    /** Downloadable file with the moved items. */
    file?: FileDestination;
}
/** Wix data collection. */
interface WixDataDestination {
    /**
     * ID of the destination collection.
     * @maxLength 256
     */
    collectionId?: string;
    /**
     * When items already exist in the destination collection, the data writing policy.
     *
     * Default: `OVERWRITE`.
     */
    writePolicy?: WritePolicyWithLiterals;
}
declare enum WritePolicy {
    /** When an item with the same ID exists in the collection, overwrite it. */
    OVERWRITE = "OVERWRITE",
    /** When an item with the same ID exists in the collection, skip it. */
    SKIP_EXISTING = "SKIP_EXISTING",
    /** Clear the destination collection before moving data. When the job completes, the collection contains only the moved data. */
    TRUNCATE_BEFORE = "TRUNCATE_BEFORE"
}
/** @enumType */
type WritePolicyWithLiterals = WritePolicy | 'OVERWRITE' | 'SKIP_EXISTING' | 'TRUNCATE_BEFORE';
interface LocalizationDestination {
    /**
     * Translated CMS content in the specified languages. Content in these languages is imported from the source, with the first specified language treated as the main one.
     *
     * Use two-letter language codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format. You can also specify a two-letter country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format.
     *
     * Learn more about [available languages in Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-languages-available).
     * @minSize 2
     * @maxSize 64
     * @format LANGUAGE_TAG
     */
    languages?: string[];
}
/** Destination file. Creates a file and generates a download URL. */
interface FileDestination {
    /** File format. */
    format?: FileFormatWithLiterals;
    /**
     * File name.
     * @maxLength 512
     */
    fileName?: string | null;
    /**
     * File download URL.
     * @readonly
     * @maxLength 2048
     */
    url?: string;
}
/** Schema used to specify item format. */
interface Schema {
    /**
     * Item fields to move to the destination file.
     * @maxSize 1000
     */
    fields?: Field[];
}
interface Field {
    /**
     * Field ID.
     *
     * If the field type is `Array`, specify the item index. If the field type is `Object`, specify the field path. Use dot notation to specify nested fields, for example: `data.address.city`.
     * @maxLength 1024
     */
    key?: string;
    /**
     * Field display name.
     *
     * When moving items to CSV files, use this to set the header of the target column.
     * @maxLength 1024
     */
    displayName?: string;
    /**
     * Field data type. Default: `ANY`.
     *
     * Learn more about [data types in Wix Data](https://dev.wix.com/docs/rest/business-solutions/cms/data-types-in-wix-data).
     */
    fieldType?: FieldTypeWithLiterals;
}
declare enum FieldType {
    /** Any data type. */
    ANY = "ANY",
    /** String. */
    STRING = "STRING",
    /** Number. */
    NUMBER = "NUMBER",
    /** Boolean. */
    BOOLEAN = "BOOLEAN",
    /** Date string in ISO 8601 date format: `YYYY-MM-DD`. */
    DATE = "DATE",
    /** [Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) (SDK) or an object in the following format: `"someFieldKey": { "$date": "YYYY-MM-DDTHH:mm:ss.sssZ"}`. */
    DATETIME = "DATETIME",
    /** Binary file. */
    BINARY = "BINARY",
    /** object. */
    OBJECT = "OBJECT",
    /** Array. */
    ARRAY = "ARRAY",
    /** Web URL. */
    URL = "URL",
    WIX_MEDIA_URL = "WIX_MEDIA_URL",
    WIX_MEDIA_IMAGE_URL = "WIX_MEDIA_IMAGE_URL",
    WIX_MEDIA_VIDEO_URL = "WIX_MEDIA_VIDEO_URL",
    WIX_MEDIA_DOCUMENT_URL = "WIX_MEDIA_DOCUMENT_URL",
    IMAGE_URL = "IMAGE_URL",
    VIDEO_URL = "VIDEO_URL"
}
/** @enumType */
type FieldTypeWithLiterals = FieldType | 'ANY' | 'STRING' | 'NUMBER' | 'BOOLEAN' | 'DATE' | 'DATETIME' | 'BINARY' | 'OBJECT' | 'ARRAY' | 'URL' | 'WIX_MEDIA_URL' | 'WIX_MEDIA_IMAGE_URL' | 'WIX_MEDIA_VIDEO_URL' | 'WIX_MEDIA_DOCUMENT_URL' | 'IMAGE_URL' | 'VIDEO_URL';
interface StoresCatalogProductsDestination {
}
interface TestDestination {
    /**
     * Discriminator value for a particular test destination.
     * @maxLength 512
     */
    type?: string;
    /** Test destination details. */
    details?: Record<string, any> | null;
}
interface Transformation extends TransformationTransformationOneOf {
}
/** @oneof */
interface TransformationTransformationOneOf {
}
interface TestTransformation {
}
/** When the job's status is `IN_PROGRESS`, the job's progress details. */
interface Progress {
    /**
     * Number of units already processed.
     * @readonly
     */
    current?: number;
    /**
     * Total number of units to move.
     * @readonly
     */
    total?: number | null;
    /** Number of items that failed to move to the destination. */
    itemsRejected?: number;
    /** Number of items successfully moved to the destination. */
    itemsSuccessful?: number;
}
interface ItemsSuccessfulInfo {
    /** Number of new items created in the destination. */
    itemsCreated?: number;
    /** Number of existing items updated in the destination. */
    itemsUpdated?: number;
    /**
     * Number of items whose movement was partially successful.
     *
     * > **Note**: Call List Movement Logs for additional details.
     */
    itemsPartiallySuccessful?: number;
}
declare enum Units {
    /** Default value. This value is unused. */
    UNKNOWN_UNITS = "UNKNOWN_UNITS",
    /** Unit of bytes. */
    BYTES = "BYTES",
    /** Unit of items. */
    ITEMS = "ITEMS"
}
/** @enumType */
type UnitsWithLiterals = Units | 'UNKNOWN_UNITS' | 'BYTES' | 'ITEMS';
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface PartiallySuccessfulStatusOptions {
    /**
     * Reason the job was partially successful.
     * @maxLength 1000
     */
    cause?: string;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface SubmitJobRequest extends SubmitJobRequestSiteOverrideOneOf {
    /**
     * When moving data from the Wix data collection of a site other than the current one, the source site ID.
     *
     * By default, the source site is the current site. However, you can move data from any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to the Wix data collection of a site other than the current one, the destination site ID.
     *
     * By default, the destination site is the current site. However, you can move data to any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account) by specifying its ID. You can retrieve this ID by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
    /** Source to move data from. */
    source: Source;
    /** Destination to move data to. */
    destination: Destination;
    /**
     * Transformations to apply to the data before moving to the destination.
     * @maxSize 32
     */
    transformations?: Transformation[];
    /** Job name. */
    name?: string;
}
/** @oneof */
interface SubmitJobRequestSiteOverrideOneOf {
    /**
     * When moving data from the Wix data collection of a site other than the current one, the source site ID.
     *
     * By default, the source site is the current site. However, you can move data from any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to the Wix data collection of a site other than the current one, the destination site ID.
     *
     * By default, the destination site is the current site. However, you can move data to any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account) by specifying its ID. You can retrieve this ID by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
}
interface SubmitJobResponse {
    /** Details of the submitted job. */
    job?: DataMovementJob;
}
interface CreateFileUploadUrlRequest {
    /**
     * Name of uploaded file.
     * @maxLength 512
     */
    fileName?: string | null;
}
interface CreateFileUploadUrlResponse {
    /**
     * File ID.
     * @maxLength 512
     */
    fileId?: string;
    /**
     * URL to which you can upload the file.
     * @maxLength 8192
     */
    uploadUrl?: string;
}
interface GetJobRequest {
    /**
     * Job ID.
     * @format GUID
     */
    jobId: string;
}
interface GetJobResponse {
    /** Details of the retrieved job. */
    job?: DataMovementJob;
}
interface ListJobsRequest {
    /** Paging metadata. */
    paging?: CursorPaging;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and offset the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface ListJobsResponse {
    /** List of jobs. */
    jobs?: DataMovementJob[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface QueryJobsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about [filtering](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about [sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting).
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface QueryJobsResponse {
    /** List of jobs matching the query. */
    jobs?: DataMovementJob[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface TerminateJobRequest {
    /**
     * ID of the job to terminate.
     * @format GUID
     */
    jobId: string;
}
interface TerminateJobResponse {
    /** Details of the terminated job. */
    job?: DataMovementJob;
}
interface ListMovementLogsRequest {
    /**
     * ID of the job for which to list logs.
     * @format GUID
     */
    jobId: string;
    /** Paging metadata. */
    paging?: CursorPaging;
}
interface ListMovementLogsResponse {
    /** Job logs. */
    logs?: MovementLog[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
/**
 * Details about the attempt to move the source item.
 *
 * Logs are generated by the destination for each item that failed to move. Some destination also generate logs for items that successfully moved.
 */
interface MovementLog {
    /**
     * ID of the item in the source, such as a Wix Data Item or a row number in a CSV file.
     * @maxLength 512
     */
    sourceItemId?: string;
    /** Details about the failure if moving the item fails. */
    failure?: ApplicationError;
    /**
     * Additional details provided when moving the item succeeds with details.
     *
     * > **Note**: Each destination type determines the structure of its `details` object.
     */
    details?: Record<string, any> | null;
}
interface JobCallback extends JobCallbackOptionsOneOf {
    /** Options for the callback's `IN_PROGRESS` stage. */
    inProgressOptions?: InProgressOptions;
    /** Options for the callback's `FAILED` stage. */
    failedOptions?: FailedOptions;
    /** Options for the callback's `PARTIALLY_SUCCESSFUL` stage. */
    partiallySuccessfulOptions?: PartiallySuccessfulOptions;
    /**
     * ID of the job that triggered this callback.
     * @format GUID
     */
    jobId?: string;
    /** Job status. */
    status?: JobStatusWithLiterals;
}
/** @oneof */
interface JobCallbackOptionsOneOf {
    /** Options for the callback's `IN_PROGRESS` stage. */
    inProgressOptions?: InProgressOptions;
    /** Options for the callback's `FAILED` stage. */
    failedOptions?: FailedOptions;
    /** Options for the callback's `PARTIALLY_SUCCESSFUL` stage. */
    partiallySuccessfulOptions?: PartiallySuccessfulOptions;
}
interface InProgressOptions {
    /** When the job status is `IN_PROGRESS`, the job progress information. */
    progress?: Progress;
    /**
     * Job movement log. Includes information about failed items or items that succeeded with notes.
     * @maxSize 1024
     */
    log?: MovementLog[];
}
interface FailedOptions {
    /** Details of the failure. */
    error?: ApplicationError;
}
interface PartiallySuccessfulOptions {
    /**
     * Why the job was partially successful.
     * @maxLength 1000
     */
    cause?: string;
}
interface Empty {
}
interface GetJobByIdRequest {
    /**
     * ID of the job to retrieve.
     * @format GUID
     */
    jobId?: string;
}
interface GetJobByIdResponse {
    /** Details of the retrieved job. */
    job?: DataMovementJob;
}
interface TerminateJobByIdRequest {
    /**
     * ID of the job to terminate.
     * @format GUID
     */
    jobId?: string;
}
interface TerminateJobByIdResponse {
    /** Details of the terminated job. */
    job?: DataMovementJob;
}
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
interface JobCreatedEnvelope {
    entity: DataMovementJob;
    metadata: EventMetadata;
}
/**
 * Triggered when a job is submitted.
 * @permissionId WIX_DATA.DATA_JOB_GET
 * @webhook
 * @eventType wix.hub.v1.job_created
 * @slug created
 * @documentationMaturity preview
 */
declare function onJobCreated(handler: (event: JobCreatedEnvelope) => void | Promise<void>): void;
interface JobDeletedEnvelope {
    metadata: EventMetadata;
}
/**
 * Triggered when a job is terminated.
 * @permissionId WIX_DATA.DATA_JOB_GET
 * @webhook
 * @eventType wix.hub.v1.job_deleted
 * @slug deleted
 * @documentationMaturity preview
 */
declare function onJobDeleted(handler: (event: JobDeletedEnvelope) => void | Promise<void>): void;
interface JobUpdatedEnvelope {
    entity: DataMovementJob;
    metadata: EventMetadata;
}
/**
 * Triggered when a job's `status` updates.
 * @permissionId WIX_DATA.DATA_JOB_GET
 * @webhook
 * @eventType wix.hub.v1.job_updated
 * @slug updated
 * @documentationMaturity preview
 */
declare function onJobUpdated(handler: (event: JobUpdatedEnvelope) => void | Promise<void>): void;
type JobNonNullablePaths = `partiallySuccessfulOptions.cause` | `_id` | `status` | `source.wixDataCollection.collectionId` | `source.wixDataCollection.fields` | `source.localization.languages` | `source.file.format` | `source.file.fileId` | `source.file.url` | `destination.wixDataCollection.collectionId` | `destination.wixDataCollection.writePolicy` | `destination.localization.languages` | `destination.file.format` | `destination.file.url` | `name` | `progress.current` | `progress.itemsRejected` | `progress.itemsSuccessful` | `error.code` | `error.description` | `sourceSiteId` | `destinationSiteId` | `logsRecorded`;
/**
 * Submit a data movement job.
 *
 * > **Note**: By default, the job is submitted for the current site.
 * @param source - Source to move data from.
 * @param destination - Destination to move data to.
 * @public
 * @documentationMaturity preview
 * @requiredField destination
 * @requiredField destination.destination
 * @requiredField destination.destination.file.format
 * @requiredField destination.destination.localization.languages
 * @requiredField destination.destination.wixDataCollection.collectionId
 * @requiredField source
 * @requiredField source.source
 * @requiredField source.source.file.fileId
 * @requiredField source.source.localization.languages
 * @requiredField source.source.wixDataCollection.collectionId
 * @permissionId WIX_DATA.DATA_JOB_SUBMIT
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.SubmitJob
 */
declare function submitJob(source: NonNullablePaths<Source, `file.fileId` | `localization.languages` | `wixDataCollection.collectionId`>, destination: NonNullablePaths<Destination, `file.format` | `localization.languages` | `wixDataCollection.collectionId`>, options?: SubmitJobOptions): Promise<NonNullablePaths<SubmitJobResponse, {
    [P in JobNonNullablePaths]: `job.${P}`;
}[JobNonNullablePaths]>>;
interface SubmitJobOptions extends SubmitJobOptionsSiteOverrideOneOf {
    /**
     * Transformations to apply to the data before moving to the destination.
     * @maxSize 32
     */
    transformations?: Transformation[];
    /** Job name. */
    name?: string;
    /**
     * When moving data from the Wix data collection of a site other than the current one, the source site ID.
     *
     * By default, the source site is the current site. However, you can move data from any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to the Wix data collection of a site other than the current one, the destination site ID.
     *
     * By default, the destination site is the current site. However, you can move data to any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account) by specifying its ID. You can retrieve this ID by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
}
/** @oneof */
interface SubmitJobOptionsSiteOverrideOneOf {
    /**
     * When moving data from the Wix data collection of a site other than the current one, the source site ID.
     *
     * By default, the source site is the current site. However, you can move data from any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    sourceSiteId?: string;
    /**
     * When moving data to the Wix data collection of a site other than the current one, the destination site ID.
     *
     * By default, the destination site is the current site. However, you can move data to any site in the same [Wix Account](https://support.wix.com/en/article/managing-multiple-sites-under-one-account) by specifying its ID. You can retrieve this ID by calling Get App Instance ([REST](https://dev.wix.com/docs/rest/app-management/app-instance/get-app-instance) | [SDK](https://dev.wix.com/docs/sdk/backend-modules/app-management/app-instances/get-app-instance)).
     *
     * > **Note**: You can specify the ID of another source site or destination site, but not both.
     * @format GUID
     */
    destinationSiteId?: string;
}
/**
 * Creates an upload URL for a data source file.
 *
 * Before submitting a job to import data from a file to a collection, call this method to generate an upload URL. Use the `uploadUrl` in the response to upload your source file. For example:
 *
 * `curl --request PUT --upload-file "${path_to_file}" "${uploadUrl}"`
 *
 * > **Note**: The URL is valid for 15 minutes.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_DATA.TMP_FILE_UPLOAD_CREATE
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.CreateFileUploadUrl
 */
declare function createFileUploadUrl(options?: CreateFileUploadUrlOptions): Promise<NonNullablePaths<CreateFileUploadUrlResponse, `fileId` | `uploadUrl`>>;
interface CreateFileUploadUrlOptions {
    /**
     * Name of uploaded file.
     * @maxLength 512
     */
    fileName?: string | null;
}
/**
 * Retrieves the specified data movement job.
 *
 * > **Note**: You can only retrieve jobs submitted for the current site.
 * @param jobId - Job ID.
 * @public
 * @documentationMaturity preview
 * @requiredField jobId
 * @permissionId WIX_DATA.DATA_JOB_GET
 * @applicableIdentity APP
 * @returns Details of the retrieved job.
 * @fqn wix.hub.v1.DataMovementService.GetJob
 */
declare function getJob(jobId: string): Promise<NonNullablePaths<DataMovementJob, JobNonNullablePaths>>;
/**
 * Lists data movement jobs for the current site.
 *  The `listJobs()` method builds a query to retrieve a list of jobs for the current site, and returns a [`JobsQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/ascending) object.
 *  The returned object contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/find) method.
 *
 *  You can refine the query by chaining `JobsQueryBuilder` methods onto the query. `JobsQueryBuilder` methods enable you to sort, filter, and control the results `listJobs()` returns.
 *
 * `listJobs()` runs with these `JobsQueryBuilder` defaults, which you can override:
 *
 * - [`skipTo`: `0`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/skip-to)
 * - [`limit`: `50`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/limit)
 * - [`ascending`: by `_id`](https://dev.wix.com/docs/sdk/backend-modules/data/movement-job/jobs-query-builder/ascending)
 *
 * The methods chained to `listJobs()` are applied in the order they're called. For example, if you apply `ascending('firstName')` and then `descending('age')`, the results are sorted first by firstName, and then, if there are multiple results with the same `firstName`, the items are sorted by `age`.
 *
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_DATA.DATA_JOB_LIST
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.ListJobs
 */
declare function listJobs(options?: ListJobsOptions): Promise<NonNullablePaths<ListJobsResponse, {
    [P in JobNonNullablePaths]: `jobs.${number}.${P}`;
}[JobNonNullablePaths]>>;
interface ListJobsOptions {
    /** Paging metadata. */
    paging?: CursorPaging;
}
/**
 * Queries data movement jobs for the current site.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_DATA.DATA_JOB_LIST
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.QueryJobs
 */
declare function queryJobs(): JobsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface JobsQueryResult extends QueryCursorResult {
    items: DataMovementJob[];
    query: JobsQueryBuilder;
    next: () => Promise<JobsQueryResult>;
    prev: () => Promise<JobsQueryResult>;
}
interface JobsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'startedAt' | 'status' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'startedAt' | 'status' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_id' | 'startedAt' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_id' | 'startedAt' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_id' | 'startedAt' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_id' | 'startedAt' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => JobsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'startedAt' | 'status' | 'name' | 'finishedAt', value: any[]) => JobsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'startedAt' | 'status' | 'name' | 'finishedAt', value: any) => JobsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'startedAt' | 'status' | 'name' | 'finishedAt', value: boolean) => JobsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'startedAt' | 'status' | 'name' | 'finishedAt'>) => JobsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'startedAt' | 'status' | 'name' | 'finishedAt'>) => JobsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => JobsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => JobsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<JobsQueryResult>;
}
/**
 * Terminates the specified job.
 * @param jobId - ID of the job to terminate.
 * @public
 * @documentationMaturity preview
 * @requiredField jobId
 * @permissionId WIX_DATA.DATA_JOB_TERMINATE
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.TerminateJob
 */
declare function terminateJob(jobId: string): Promise<NonNullablePaths<TerminateJobResponse, {
    [P in JobNonNullablePaths]: `job.${P}`;
}[JobNonNullablePaths]>>;
/**
 * Lists logs for the specified job.
 *
 * Logs are generated by the destination for each item that failed to move. Some destinations also generate logs for items that moved successfully.
 * @param jobId - ID of the job for which to list logs.
 * @public
 * @documentationMaturity preview
 * @requiredField jobId
 * @permissionId WIX_DATA.DATA_JOB_LIST_LOGS
 * @applicableIdentity APP
 * @fqn wix.hub.v1.DataMovementService.ListMovementLogs
 */
declare function listMovementLogs(jobId: string, options?: ListMovementLogsOptions): Promise<NonNullablePaths<ListMovementLogsResponse, `logs` | `logs.${number}.sourceItemId` | `logs.${number}.failure.code` | `logs.${number}.failure.description`>>;
interface ListMovementLogsOptions {
    /** Paging metadata. */
    paging?: CursorPaging;
}

export { type ActionEvent, type ApplicationError, type BaseEventMetadata, type CreateFileUploadUrlOptions, type CreateFileUploadUrlRequest, type CreateFileUploadUrlResponse, type CursorPaging, type CursorPagingMetadata, type CursorQuery, type CursorQueryPagingMethodOneOf, type Cursors, type DataMovementJob, type DataMovementJobLogs, type DataMovementJobStatusOptionsOneOf, type Destination, type DestinationDestinationOneOf, type DomainEvent, type DomainEventBodyOneOf, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, type FailedOptions, type Field, FieldType, type FieldTypeWithLiterals, type FileDestination, FileFormat, type FileFormatWithLiterals, type FileSource, type GetJobByIdRequest, type GetJobByIdResponse, type GetJobRequest, type GetJobResponse, type IdentificationData, type IdentificationDataIdOneOf, type InProgressOptions, type ItemsSuccessfulInfo, type JobCallback, type JobCallbackOptionsOneOf, type JobCreatedEnvelope, type JobDeletedEnvelope, JobStatus, type JobStatusWithLiterals, type JobUpdatedEnvelope, type JobsQueryBuilder, type JobsQueryResult, type ListJobsOptions, type ListJobsRequest, type ListJobsResponse, type ListMovementLogsOptions, type ListMovementLogsRequest, type ListMovementLogsResponse, type LocalizationDestination, type LocalizationSource, type MessageEnvelope, type MovementLog, type Paging, type PartiallySuccessfulOptions, type PartiallySuccessfulStatusOptions, type Progress, type QueryJobsRequest, type QueryJobsResponse, type QueryV2, type QueryV2PagingMethodOneOf, type RestoreInfo, type Schema, SortOrder, type SortOrderWithLiterals, type Sorting, type Source, type SourceSourceOneOf, type StoresCatalogProductsDestination, type SubmitJobOptions, type SubmitJobOptionsSiteOverrideOneOf, type SubmitJobRequest, type SubmitJobRequestSiteOverrideOneOf, type SubmitJobResponse, type TerminateJobByIdRequest, type TerminateJobByIdResponse, type TerminateJobRequest, type TerminateJobResponse, type TestDestination, type TestSource, type TestTransformation, type Transformation, type TransformationTransformationOneOf, Units, type UnitsWithLiterals, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, type WixDataDestination, WixDataEnvironment, type WixDataEnvironmentWithLiterals, type WixDataSource, WritePolicy, type WritePolicyWithLiterals, createFileUploadUrl, getJob, listJobs, listMovementLogs, onJobCreated, onJobDeleted, onJobUpdated, queryJobs, submitJob, terminateJob };
