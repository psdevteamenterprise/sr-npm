// src/service-plugins-types.ts
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var FieldType = /* @__PURE__ */ ((FieldType2) => {
  FieldType2["UNKNOWN_FIELD_TYPE"] = "UNKNOWN_FIELD_TYPE";
  FieldType2["TEXT"] = "TEXT";
  FieldType2["NUMBER"] = "NUMBER";
  FieldType2["DATE"] = "DATE";
  FieldType2["DATETIME"] = "DATETIME";
  FieldType2["IMAGE"] = "IMAGE";
  FieldType2["BOOLEAN"] = "BOOLEAN";
  FieldType2["DOCUMENT"] = "DOCUMENT";
  FieldType2["URL"] = "URL";
  FieldType2["RICH_TEXT"] = "RICH_TEXT";
  FieldType2["VIDEO"] = "VIDEO";
  FieldType2["ANY"] = "ANY";
  FieldType2["ARRAY_STRING"] = "ARRAY_STRING";
  FieldType2["ARRAY_DOCUMENT"] = "ARRAY_DOCUMENT";
  FieldType2["AUDIO"] = "AUDIO";
  FieldType2["TIME"] = "TIME";
  FieldType2["LANGUAGE"] = "LANGUAGE";
  FieldType2["RICH_CONTENT"] = "RICH_CONTENT";
  FieldType2["MEDIA_GALLERY"] = "MEDIA_GALLERY";
  FieldType2["ADDRESS"] = "ADDRESS";
  FieldType2["REFERENCE"] = "REFERENCE";
  FieldType2["MULTI_REFERENCE"] = "MULTI_REFERENCE";
  FieldType2["OBJECT"] = "OBJECT";
  FieldType2["ARRAY"] = "ARRAY";
  return FieldType2;
})(FieldType || {});
var QueryOperator = /* @__PURE__ */ ((QueryOperator2) => {
  QueryOperator2["EQ"] = "EQ";
  QueryOperator2["LT"] = "LT";
  QueryOperator2["GT"] = "GT";
  QueryOperator2["NE"] = "NE";
  QueryOperator2["LTE"] = "LTE";
  QueryOperator2["GTE"] = "GTE";
  QueryOperator2["STARTS_WITH"] = "STARTS_WITH";
  QueryOperator2["ENDS_WITH"] = "ENDS_WITH";
  QueryOperator2["CONTAINS"] = "CONTAINS";
  QueryOperator2["HAS_SOME"] = "HAS_SOME";
  QueryOperator2["HAS_ALL"] = "HAS_ALL";
  QueryOperator2["EXISTS"] = "EXISTS";
  QueryOperator2["URLIZED"] = "URLIZED";
  return QueryOperator2;
})(QueryOperator || {});
var DataOperation = /* @__PURE__ */ ((DataOperation2) => {
  DataOperation2["QUERY"] = "QUERY";
  DataOperation2["COUNT"] = "COUNT";
  DataOperation2["QUERY_REFERENCED"] = "QUERY_REFERENCED";
  DataOperation2["AGGREGATE"] = "AGGREGATE";
  DataOperation2["DISTINCT"] = "DISTINCT";
  DataOperation2["INSERT"] = "INSERT";
  DataOperation2["UPDATE"] = "UPDATE";
  DataOperation2["REMOVE"] = "REMOVE";
  DataOperation2["TRUNCATE"] = "TRUNCATE";
  DataOperation2["INSERT_REFERENCES"] = "INSERT_REFERENCES";
  DataOperation2["REMOVE_REFERENCES"] = "REMOVE_REFERENCES";
  return DataOperation2;
})(DataOperation || {});
var Role = /* @__PURE__ */ ((Role2) => {
  Role2["ADMIN"] = "ADMIN";
  Role2["SITE_MEMBER_AUTHOR"] = "SITE_MEMBER_AUTHOR";
  Role2["SITE_MEMBER"] = "SITE_MEMBER";
  Role2["ANYONE"] = "ANYONE";
  return Role2;
})(Role || {});
var PagingMode = /* @__PURE__ */ ((PagingMode2) => {
  PagingMode2["UNKNOWN_PAGING_MODE"] = "UNKNOWN_PAGING_MODE";
  PagingMode2["OFFSET"] = "OFFSET";
  PagingMode2["CURSOR"] = "CURSOR";
  return PagingMode2;
})(PagingMode || {});
var Order = /* @__PURE__ */ ((Order2) => {
  Order2["ASC"] = "ASC";
  Order2["DESC"] = "DESC";
  return Order2;
})(Order || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNKNOWN"] = "UNKNOWN";
  Status2["BUILDING"] = "BUILDING";
  Status2["ACTIVE"] = "ACTIVE";
  Status2["DROPPING"] = "DROPPING";
  Status2["DROPPED"] = "DROPPED";
  Status2["FAILED"] = "FAILED";
  Status2["INVALID"] = "INVALID";
  return Status2;
})(Status || {});
var IdentityType = /* @__PURE__ */ ((IdentityType2) => {
  IdentityType2["UNKNOWN"] = "UNKNOWN";
  IdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  IdentityType2["MEMBER"] = "MEMBER";
  IdentityType2["WIX_USER"] = "WIX_USER";
  IdentityType2["APP"] = "APP";
  return IdentityType2;
})(IdentityType || {});

// src/data-externaldatabasespi-v3-main-entity.public.ts
import { ServicePluginDefinition } from "@wix/sdk-types";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";
var provideHandlers = ServicePluginDefinition("EXTERNAL_DATABASE_PROVIDER", [
  {
    name: "queryDataItems",
    primaryHttpMappingPath: "/v3/items/query",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "countDataItems",
    primaryHttpMappingPath: "/v3/items/count",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "aggregateDataItems",
    primaryHttpMappingPath: "/v3/items/aggregate",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "queryDistinctValues",
    primaryHttpMappingPath: "/v3/items/query-distinct-values",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "insertDataItems",
    primaryHttpMappingPath: "/v3/items/insert",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "updateDataItems",
    primaryHttpMappingPath: "/v3/items/update",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "removeDataItems",
    primaryHttpMappingPath: "/v3/items/remove",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "truncateDataItems",
    primaryHttpMappingPath: "/v3/items/truncate",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "queryReferencedDataItems",
    primaryHttpMappingPath: "/v3/items/query-referenced",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "insertDataItemReferences",
    primaryHttpMappingPath: "/v3/items/insert-references",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "removeDataItemReferences",
    primaryHttpMappingPath: "/v3/items/remove-references",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "listCollections",
    primaryHttpMappingPath: "/v3/collections/get",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "createCollection",
    primaryHttpMappingPath: "/v3/collections/create",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "updateCollection",
    primaryHttpMappingPath: "/v3/collections/update",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "deleteCollection",
    primaryHttpMappingPath: "/v3/collections/delete",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  },
  {
    name: "getCapabilities",
    primaryHttpMappingPath: "/v3/capabilities/get",
    transformations: {
      toREST: (payload) => {
        const toRestResponse = payload;
        return renameKeysFromSDKRequestToRESTRequest(toRestResponse);
      },
      fromREST: (payload) => {
        const fromRestRequest = payload;
        return renameKeysFromRESTResponseToSDKResponse(fromRestRequest);
      }
    }
  }
]);

// src/data-externaldatabasespi-v3-main-entity.context.ts
import { createServicePluginModule } from "@wix/sdk-runtime/service-plugin-modules";
var provideHandlers2 = createServicePluginModule(provideHandlers);

// src/service-plugins-error-classes.ts
var ItemAlreadyExistsWixError = class extends Error {
  constructor(data = {}) {
    super("ItemAlreadyExists");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "ITEM_ALREADY_EXISTS";
    this.name = "ItemAlreadyExists";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.ItemAlreadyExistsError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "ItemAlreadyExists",
      applicationCode: "ITEM_ALREADY_EXISTS"
    };
    this.data = data;
  }
};
/** @hidden */
ItemAlreadyExistsWixError.__type = "wix_spi_error";
var ItemNotFoundWixError = class extends Error {
  constructor(data = {}) {
    super("ItemNotFound");
    this.httpCode = 404;
    this.statusCode = "NOT_FOUND";
    this.applicationCode = "ITEM_NOT_FOUND";
    this.name = "ItemNotFound";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.ItemNotFoundError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "ItemNotFound",
      applicationCode: "ITEM_NOT_FOUND"
    };
    this.data = data;
  }
};
/** @hidden */
ItemNotFoundWixError.__type = "wix_spi_error";
var CollectionAlreadyExistsWixError = class extends Error {
  constructor(data = {}) {
    super("CollectionAlreadyExists");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "COLLECTION_ALREADY_EXISTS";
    this.name = "CollectionAlreadyExists";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.CollectionAlreadyExistsError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "CollectionAlreadyExists",
      applicationCode: "COLLECTION_ALREADY_EXISTS"
    };
    this.data = data;
  }
};
/** @hidden */
CollectionAlreadyExistsWixError.__type = "wix_spi_error";
var CollectionNotFoundWixError = class extends Error {
  constructor(data = {}) {
    super("CollectionNotFound");
    this.httpCode = 404;
    this.statusCode = "NOT_FOUND";
    this.applicationCode = "COLLECTION_NOT_FOUND";
    this.name = "CollectionNotFound";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.CollectionNotFoundError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "CollectionNotFound",
      applicationCode: "COLLECTION_NOT_FOUND"
    };
    this.data = data;
  }
};
/** @hidden */
CollectionNotFoundWixError.__type = "wix_spi_error";
var ReferenceAlreadyExistsWixError = class extends Error {
  constructor(data = {}) {
    super("ReferenceAlreadyExists");
    this.httpCode = 409;
    this.statusCode = "ALREADY_EXISTS";
    this.applicationCode = "REFERENCE_ALREADY_EXISTS";
    this.name = "ReferenceAlreadyExists";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.ReferenceAlreadyExistsError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "ReferenceAlreadyExists",
      applicationCode: "REFERENCE_ALREADY_EXISTS"
    };
    this.data = data;
  }
};
/** @hidden */
ReferenceAlreadyExistsWixError.__type = "wix_spi_error";
var ReferenceNotFoundWixError = class extends Error {
  constructor(data = {}) {
    super("ReferenceNotFound");
    this.httpCode = 404;
    this.statusCode = "NOT_FOUND";
    this.applicationCode = "REFERENCE_NOT_FOUND";
    this.name = "ReferenceNotFound";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.ReferenceNotFoundError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "ReferenceNotFound",
      applicationCode: "REFERENCE_NOT_FOUND"
    };
    this.data = data;
  }
};
/** @hidden */
ReferenceNotFoundWixError.__type = "wix_spi_error";
var ValidationWixError = class extends Error {
  constructor(data = {}) {
    super("ValidationError");
    this.httpCode = 400;
    this.statusCode = "INVALID_ARGUMENT";
    this.applicationCode = "VALIDATION_ERROR";
    this.name = "ValidationError";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.ValidationError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "ValidationError",
      applicationCode: "VALIDATION_ERROR"
    };
    this.data = data;
  }
};
/** @hidden */
ValidationWixError.__type = "wix_spi_error";
var CollectionChangeNotSupportedWixError = class extends Error {
  constructor(data = {}) {
    super("CollectionChangeNotSupportedError");
    this.httpCode = 400;
    this.statusCode = "INVALID_ARGUMENT";
    this.applicationCode = "COLLECTION_CHANGE_NOT_SUPPORTED";
    this.name = "CollectionChangeNotSupportedError";
    this.errorSchemaName = "com.wixpress.cloud.externaldatabasespi.v3.CollectionChangeNotSupported";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "CollectionChangeNotSupportedError",
      applicationCode: "COLLECTION_CHANGE_NOT_SUPPORTED"
    };
    this.data = data;
  }
};
/** @hidden */
CollectionChangeNotSupportedWixError.__type = "wix_spi_error";
var BadRequestWixError = class extends Error {
  constructor() {
    super("BadRequestError");
    this.httpCode = 400;
    this.statusCode = "INVALID_ARGUMENT";
    this.applicationCode = "BAD_REQUEST";
    this.name = "BadRequestError";
    this.errorType = "SPI";
    this.spiErrorData = {
      name: "BadRequestError",
      applicationCode: "BAD_REQUEST"
    };
  }
};
/** @hidden */
BadRequestWixError.__type = "wix_spi_error";
export {
  BadRequestWixError,
  CollectionAlreadyExistsWixError,
  CollectionChangeNotSupportedWixError,
  CollectionNotFoundWixError,
  DataOperation,
  FieldType,
  IdentityType,
  ItemAlreadyExistsWixError,
  ItemNotFoundWixError,
  Order,
  PagingMode,
  QueryOperator,
  ReferenceAlreadyExistsWixError,
  ReferenceNotFoundWixError,
  Role,
  SortOrder,
  Status,
  ValidationWixError,
  provideHandlers2 as provideHandlers,
  provideHandlers as publicProvideHandlers
};
//# sourceMappingURL=index.mjs.map