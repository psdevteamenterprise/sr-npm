import { EventDefinition } from '@wix/sdk-types';
import { aggregate as universalAggregate, bulkInsert as universalBulkInsert, bulkPatch as universalBulkPatch, bulkRemove as universalBulkRemove, bulkSave as universalBulkSave, bulkUpdate as universalBulkUpdate, filter as universalFilter, get as universalGet, insert as universalInsert, insertReference as universalInsertReference, isReferenced as universalIsReferenced, patch as universalPatch, query as universalQuery, search as universalSearch, queryReferenced as universalQueryReferenced, remove as universalRemove, removeReference as universalRemoveReference, replaceReferences as universalReplaceReferences, save as universalSave, truncate as universalTruncate, update as universalUpdate, withEnvironment as universalWithEnvironment, } from './data-v2-data-item-items.universal';
import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { decode } from '@wix/wix-data-items-common';
export const __metadata = { PACKAGE_NAME: '@wix/data' };
export function withEnvironment(httpClient) {
    return (environment) => universalWithEnvironment(environment, 
    // @ts-expect-error
    { httpClient });
}
export function insert(httpClient) {
    return (dataCollectionId, dataItem, options) => universalInsert(dataCollectionId, dataItem, options, 
    // @ts-expect-error
    { httpClient });
}
export function update(httpClient) {
    return (dataCollectionId, data, options) => universalUpdate(dataCollectionId, data, options, 
    // @ts-expect-error
    { httpClient });
}
export function save(httpClient) {
    return (dataCollectionId, data, options) => universalSave(dataCollectionId, data, options, 
    // @ts-expect-error
    { httpClient });
}
export function get(httpClient) {
    return (dataCollectionId, dataItemId, options) => universalGet(dataCollectionId, dataItemId, options, 
    // @ts-expect-error
    { httpClient });
}
export function remove(httpClient) {
    return (dataCollectionId, dataItemId, options) => universalRemove(dataCollectionId, dataItemId, options, 
    // @ts-expect-error
    { httpClient });
}
export function truncate(httpClient) {
    return (dataCollectionId) => universalTruncate(dataCollectionId, 
    // @ts-expect-error
    { httpClient });
}
export function bulkInsert(httpClient) {
    return (dataCollectionId, items, options) => universalBulkInsert(dataCollectionId, items, options, 
    // @ts-expect-error
    { httpClient });
}
export function bulkUpdate(httpClient) {
    return (dataCollectionId, items, options) => universalBulkUpdate(dataCollectionId, items, options, 
    // @ts-expect-error
    { httpClient });
}
export function bulkSave(httpClient) {
    return (dataCollectionId, items, options) => universalBulkSave(dataCollectionId, items, options, 
    // @ts-expect-error
    { httpClient });
}
export function bulkRemove(httpClient) {
    return (dataCollectionId, itemIds, options) => universalBulkRemove(dataCollectionId, itemIds, options, 
    // @ts-expect-error
    { httpClient });
}
export function isReferenced(httpClient) {
    return (dataCollectionId, propertyName, referringItem, referencedItem, options) => universalIsReferenced(dataCollectionId, propertyName, referringItem, referencedItem, options, 
    // @ts-expect-error
    { httpClient });
}
export function insertReference(httpClient) {
    return (dataCollectionId, propertyName, referringItem, referencedItem, options) => universalInsertReference(dataCollectionId, propertyName, referringItem, referencedItem, options, 
    // @ts-expect-error
    { httpClient });
}
export function removeReference(httpClient) {
    return (dataCollectionId, propertyName, referringItem, referencedItem, options) => universalRemoveReference(dataCollectionId, propertyName, referringItem, referencedItem, options, 
    // @ts-expect-error
    { httpClient });
}
export function replaceReferences(httpClient) {
    return (dataCollectionId, propertyName, referringItem, referencedItem, options) => universalReplaceReferences(dataCollectionId, propertyName, referringItem, referencedItem, options, 
    // @ts-expect-error
    { httpClient });
}
export function query(httpClient) {
    return (dataCollectionId) => universalQuery(dataCollectionId, 
    // @ts-expect-error
    { httpClient });
}
export function search(httpClient) {
    return (dataCollectionId) => universalSearch(dataCollectionId, 
    // @ts-expect-error
    { httpClient });
}
export function patch(httpClient) {
    return (dataCollectionId, itemId) => universalPatch(dataCollectionId, itemId, 
    // @ts-expect-error
    { httpClient });
}
export function bulkPatch(httpClient) {
    return (dataCollectionId, itemIds) => universalBulkPatch(dataCollectionId, itemIds, 
    // @ts-expect-error
    { httpClient });
}
export function aggregate(httpClient) {
    return (dataCollectionId) => universalAggregate(dataCollectionId, 
    // @ts-expect-error
    { httpClient });
}
export function queryReferenced(httpClient) {
    return (dataCollectionId, holdingItem, relationshipAttribute, options) => universalQueryReferenced(dataCollectionId, holdingItem, relationshipAttribute, options, 
    // @ts-expect-error
    { httpClient });
}
export function filter(httpClient) {
    return () => universalFilter(
    // @ts-expect-error
    { httpClient });
}
export const onDataItemCreated = EventDefinition('wix.data.v2.data_item_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(decode(event), [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
]), ['entity.data']))();
export const onDataItemUpdated = EventDefinition('wix.data.v2.data_item_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(decode(event), [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
]), ['entity.data']))();
export const onDataItemDeleted = EventDefinition('wix.data.v2.data_item_deleted', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(decode(event), [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
]), ['entity.data']))();
export { Environment, } from './data-v2-data-item-items.universal';
export * from './data-v2-data-item-items.types';
//# sourceMappingURL=data-v2-data-item-items.public.js.map