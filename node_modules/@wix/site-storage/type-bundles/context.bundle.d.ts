/**
 * Removes **all** items from local, session, or memory storage.
 */
declare function clear(): Promise<void>;
/**
 * Gets an item from local, session, or memory storage.
 *
 * If an item does not exist, `getItem()` resolves to null.
 * @param key - The key of the item to get.
 * @requiredField key
 * @returns The retrieved item value.
 */
declare function getItem(key: string): Promise<string>;
/**
 * Removes an item from local, session, or memory storage.
 * @param key - The key of the item to remove.
 * @requiredField key
 */
declare function removeItem(key: string): Promise<void>;
/**
 * Stores an item in local, session, or memory storage.
 *  > **Note:** You can store up to 50kb of data in local and session storage and up to
 *  > 1mb in memory storage.
 * @param key - The key of item to set.
 * @requiredField key
 * @param value - The value of the item to set.
 * @requiredField value
 */
declare function setItem(key: string, value: string | number | string[]): Promise<void>;

declare const sessionSdkModuleContext_clear: typeof clear;
declare const sessionSdkModuleContext_getItem: typeof getItem;
declare const sessionSdkModuleContext_removeItem: typeof removeItem;
declare const sessionSdkModuleContext_setItem: typeof setItem;
declare namespace sessionSdkModuleContext {
  export { sessionSdkModuleContext_clear as clear, sessionSdkModuleContext_getItem as getItem, sessionSdkModuleContext_removeItem as removeItem, sessionSdkModuleContext_setItem as setItem };
}

type Methods$2<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const localContext: Methods$2<typeof sessionSdkModuleContext>;

type Methods$1<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const memoryContext: Methods$1<typeof sessionSdkModuleContext>;

type Methods<T> = {
    [P in keyof T as T[P] extends Function ? P : never]: T[P];
};
declare const sessionContext: Methods<typeof sessionSdkModuleContext>;

export { localContext as local, memoryContext as memory, sessionContext as session };
