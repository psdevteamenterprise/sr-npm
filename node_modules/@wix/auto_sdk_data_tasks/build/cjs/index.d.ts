import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { Task, ListTasksOptions, ListTasksResponse, CancelTaskResponse } from './index.typings.js';
export { ActionEvent, ApplicationError, CancelTaskRequest, CopyFieldDataOptions, CreateTaskRequest, CreateTaskResponse, Cursors, DeleteByQueryOptions, DomainEvent, DomainEventBodyOneOf, EditFieldDataOptions, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, Environment, GetTaskRequest, GetTaskResponse, IdentificationData, IdentificationDataIdOneOf, ListTasksRequest, MessageEnvelope, Operation, Operations, Paging, PagingMetadataV2, PublishPluginOptions, Replace, RestoreInfo, ScheduleOperation, Status, TaskOptionsOneOf, Type, UpdatePublishStatusOptions, UpdatePublishStatusOptionsOptionsOneOf, WebhookIdentityType } from './index.typings.js';

type BackgroundTaskNonNullablePaths = `deleteByQueryOptions.dataCollectionId` | `deleteByQueryOptions.environment` | `deleteByQueryOptions.publishPluginOptions.includeDraftItems` | `copyFieldDataOptions.dataCollectionId` | `copyFieldDataOptions.environment` | `copyFieldDataOptions.sourceFieldKey` | `copyFieldDataOptions.targetFieldKey` | `editFieldDataOptions.dataCollectionId` | `editFieldDataOptions.environment` | `editFieldDataOptions.fieldKey` | `editFieldDataOptions.operations.addItems` | `editFieldDataOptions.operations.removeItems` | `editFieldDataOptions.operations.replaceItems` | `editFieldDataOptions.operations.removeDuplicates` | `updatePublishStatusOptions.dataCollectionId` | `updatePublishStatusOptions.environment` | `updatePublishStatusOptions.operation` | `_id` | `type` | `status` | `itemsFailed` | `failures` | `failures.${number}.code` | `failures.${number}.description` | `estimatedItemCount` | `itemsSucceeded`;
declare function createTask$1(httpClient: HttpClient): CreateTaskSignature;
interface CreateTaskSignature {
    /**
     * Creates and runs a new background task.
     * @param - Task to create and run.
     * @returns Created task.
     */
    (task: NonNullablePaths<Task, `copyFieldDataOptions.dataCollectionId` | `copyFieldDataOptions.sourceFieldKey` | `copyFieldDataOptions.targetFieldKey` | `deleteByQueryOptions.dataCollectionId` | `editFieldDataOptions.dataCollectionId` | `editFieldDataOptions.fieldKey` | `type` | `updatePublishStatusOptions.dataCollectionId` | `updatePublishStatusOptions.operation`>): Promise<NonNullablePaths<Task, BackgroundTaskNonNullablePaths>>;
}
declare function listTasks$1(httpClient: HttpClient): ListTasksSignature;
interface ListTasksSignature {
    /**
     * Lists all existing tasks.
     */
    (options?: ListTasksOptions): Promise<NonNullablePaths<ListTasksResponse, {
        [P in BackgroundTaskNonNullablePaths]: `tasks.${number}.${P}`;
    }[BackgroundTaskNonNullablePaths]>>;
}
declare function getTask$1(httpClient: HttpClient): GetTaskSignature;
interface GetTaskSignature {
    /**
     * Retrieves the specified task.
     * @param - Task ID.
     * @returns Retrieved task.
     */
    (taskId: string): Promise<NonNullablePaths<Task, BackgroundTaskNonNullablePaths>>;
}
declare function cancelTask$1(httpClient: HttpClient): CancelTaskSignature;
interface CancelTaskSignature {
    /**
     * Cancels an existing task.
     * @param - Task ID.
     */
    (taskId: string): Promise<NonNullablePaths<CancelTaskResponse, {
        [P in BackgroundTaskNonNullablePaths]: `task.${P}`;
    }[BackgroundTaskNonNullablePaths]>>;
}

declare const createTask: MaybeContext<BuildRESTFunction<typeof createTask$1> & typeof createTask$1>;
declare const listTasks: MaybeContext<BuildRESTFunction<typeof listTasks$1> & typeof listTasks$1>;
declare const getTask: MaybeContext<BuildRESTFunction<typeof getTask$1> & typeof getTask$1>;
declare const cancelTask: MaybeContext<BuildRESTFunction<typeof cancelTask$1> & typeof cancelTask$1>;

export { CancelTaskResponse, ListTasksOptions, ListTasksResponse, Task, cancelTask, createTask, getTask, listTasks };
