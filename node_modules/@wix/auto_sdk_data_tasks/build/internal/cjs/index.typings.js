"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  Environment: () => Environment,
  Operation: () => Operation,
  Status: () => Status,
  Type: () => Type,
  WebhookIdentityType: () => WebhookIdentityType,
  cancelTask: () => cancelTask2,
  createTask: () => createTask2,
  getTask: () => getTask2,
  listTasks: () => listTasks2
});
module.exports = __toCommonJS(index_typings_exports);

// src/data-autocms-v2-background-task-tasks.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/data-autocms-v2-background-task-tasks.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixCloudAutocmsTasksV1TaskServiceUrl(opts) {
  const domainToMappings = {
    "editor._base_domain_": [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/cms/v1/tasks",
        destPath: "/v1"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ],
    _: [
      {
        srcPath: "/_api/autocms/v1/tasks",
        destPath: "/v1"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_data_tasks";
function createTask(payload) {
  function __createTask({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "task.startedAt" },
          { path: "task.finishedAt" },
          {
            path: "task.updatePublishStatusOptions.scheduleDraftStatusOptions.date"
          },
          {
            path: "task.updatePublishStatusOptions.schedulePublishedStatusOptions.date"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.data.autocms.v2.background_task",
      method: "POST",
      methodFqn: "wix.cloud.autocms.tasks.v1.TaskService.CreateTask",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudAutocmsTasksV1TaskServiceUrl({
        protoPath: "/v1",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "task.startedAt" },
            { path: "task.finishedAt" },
            {
              path: "task.updatePublishStatusOptions.scheduleDraftStatusOptions.date"
            },
            {
              path: "task.updatePublishStatusOptions.schedulePublishedStatusOptions.date"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createTask;
}
function listTasks(payload) {
  function __listTasks({ host }) {
    const metadata = {
      entityFqdn: "wix.data.autocms.v2.background_task",
      method: "GET",
      methodFqn: "wix.cloud.autocms.tasks.v1.TaskService.ListTasks",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudAutocmsTasksV1TaskServiceUrl({
        protoPath: "/v1",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "tasks.startedAt" },
            { path: "tasks.finishedAt" },
            {
              path: "tasks.updatePublishStatusOptions.scheduleDraftStatusOptions.date"
            },
            {
              path: "tasks.updatePublishStatusOptions.schedulePublishedStatusOptions.date"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listTasks;
}
function getTask(payload) {
  function __getTask({ host }) {
    const metadata = {
      entityFqdn: "wix.data.autocms.v2.background_task",
      method: "GET",
      methodFqn: "wix.cloud.autocms.tasks.v1.TaskService.GetTask",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudAutocmsTasksV1TaskServiceUrl({
        protoPath: "/v1/{taskId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "task.startedAt" },
            { path: "task.finishedAt" },
            {
              path: "task.updatePublishStatusOptions.scheduleDraftStatusOptions.date"
            },
            {
              path: "task.updatePublishStatusOptions.schedulePublishedStatusOptions.date"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getTask;
}
function cancelTask(payload) {
  function __cancelTask({ host }) {
    const metadata = {
      entityFqdn: "wix.data.autocms.v2.background_task",
      method: "DELETE",
      methodFqn: "wix.cloud.autocms.tasks.v1.TaskService.CancelTask",
      packageName: PACKAGE_NAME,
      url: resolveWixCloudAutocmsTasksV1TaskServiceUrl({
        protoPath: "/v1/{taskId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "task.startedAt" },
            { path: "task.finishedAt" },
            {
              path: "task.updatePublishStatusOptions.scheduleDraftStatusOptions.date"
            },
            {
              path: "task.updatePublishStatusOptions.schedulePublishedStatusOptions.date"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __cancelTask;
}

// src/data-autocms-v2-background-task-tasks.universal.ts
var Type = /* @__PURE__ */ ((Type2) => {
  Type2["UNKNOWN"] = "UNKNOWN";
  Type2["DELETE_BY_QUERY"] = "DELETE_BY_QUERY";
  Type2["COPY_FIELD_DATA"] = "COPY_FIELD_DATA";
  Type2["EDIT_FIELD_DATA"] = "EDIT_FIELD_DATA";
  Type2["UPDATE_PUBLISH_STATUS"] = "UPDATE_PUBLISH_STATUS";
  return Type2;
})(Type || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["NEW"] = "NEW";
  Status2["RUNNING"] = "RUNNING";
  Status2["COMPLETED"] = "COMPLETED";
  Status2["FAILED"] = "FAILED";
  return Status2;
})(Status || {});
var Environment = /* @__PURE__ */ ((Environment2) => {
  Environment2["UNKNOWN_ENVIRONMENT"] = "UNKNOWN_ENVIRONMENT";
  Environment2["SANDBOX"] = "SANDBOX";
  Environment2["SANDBOX_PREFERRED"] = "SANDBOX_PREFERRED";
  Environment2["LIVE"] = "LIVE";
  return Environment2;
})(Environment || {});
var Operation = /* @__PURE__ */ ((Operation2) => {
  Operation2["UNDEFINED"] = "UNDEFINED";
  Operation2["SET_PUBLISHED_STATUS"] = "SET_PUBLISHED_STATUS";
  Operation2["SET_DRAFT_STATUS"] = "SET_DRAFT_STATUS";
  Operation2["SCHEDULE_PUBLISHED_STATUS"] = "SCHEDULE_PUBLISHED_STATUS";
  Operation2["SCHEDULE_DRAFT_STATUS"] = "SCHEDULE_DRAFT_STATUS";
  Operation2["CANCEL_SCHEDULING"] = "CANCEL_SCHEDULING";
  return Operation2;
})(Operation || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createTask2(task) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ task });
  const reqOpts = createTask(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.task;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { task: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["task"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listTasks2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    paging: options?.paging
  });
  const reqOpts = listTasks(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { paging: "$[0].paging" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTask2(taskId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ taskId });
  const reqOpts = getTask(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.task;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taskId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taskId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function cancelTask2(taskId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ taskId });
  const reqOpts = cancelTask(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { taskId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["taskId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Environment,
  Operation,
  Status,
  Type,
  WebhookIdentityType,
  cancelTask,
  createTask,
  getTask,
  listTasks
});
//# sourceMappingURL=index.typings.js.map