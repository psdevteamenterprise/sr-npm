{"version":3,"names":[],"sources":["../../../src/v2/ErrorHandlerPublicAPI.ts"],"sourcesContent":["import { ResolvedError } from './ResolvedError';\nimport { ShowErrorOverrideProps } from './ShowError';\nimport {\n  ErrorCodesMapAuto,\n  ShowErrorMapFunction,\n  StatusCodeMap,\n} from './ErrorCodesMap';\n\nexport interface WithErrorHandlerOptions {\n  /**\n   * Overrides for specific HTTP status codes\n   */\n  statusCodesOverrides?: StatusCodeMap;\n  /**\n   * Override for all server errors (5xx)\n   */\n  serverErrorOverride?: ShowErrorMapFunction;\n}\n\nexport interface ErrorHandlerPublicAPI {\n  withErrorHandler: <T>(\n    fn: () => Promise<T>,\n    /**\n     * Mappings of error codes unique to this request (e.g. validation errors, application errors)\n     */\n    errorCodesMap: ErrorCodesMapAuto<T>,\n    options?: WithErrorHandlerOptions,\n  ) => Promise<T>;\n\n  getResolvedError: <T>(error: unknown) => ResolvedError & Partial<T>;\n\n  reportRetryAttempt: (error: unknown) => void;\n\n  showError: (\n    error: unknown,\n    props?: Partial<ShowErrorOverrideProps> | null,\n  ) => void;\n}\n"],"mappings":"","ignoreList":[]}