{"version":3,"names":[],"sources":["../../../src/v2/ErrorCodesMap.ts"],"sourcesContent":["import { StatusCode } from '../types/StatusCode';\nimport { ShowErrorProps } from './ShowError';\nimport { ApplicationError, FieldViolationBase } from '../types';\n\nexport interface ErrorMetaResponse {\n  __applicationErrorsType?: ApplicationError;\n  __validationErrorsType?: FieldViolationBase;\n}\n\nexport type ShowErrorMapFunction = (error: Error | null) => ShowErrorProps;\n\nexport type StatusCodeMap = Partial<Record<StatusCode, ShowErrorMapFunction>>;\n\nexport type ErrorCodesMap = Partial<Record<string, ShowErrorMapFunction>>;\n\nexport type ApplicationErrorsMap<\n  TApplicationError extends ApplicationError = ApplicationError,\n> = {\n  [K in NonNullable<TApplicationError['code']>]?: ShowErrorMapFunction | false;\n} & {\n  [key: string]: ShowErrorMapFunction | false;\n};\n\nexport type ValidationErrorsMap<\n  TFieldViolation extends FieldViolationBase = FieldViolationBase,\n> = {\n  [K in NonNullable<TFieldViolation['ruleName']>]?:\n    | ShowErrorMapFunction\n    | false;\n} & {\n  [key: string]: ShowErrorMapFunction | false;\n};\n\nexport type ErrorCodesMapConditionalApplicationError<\n  T extends ErrorMetaResponse,\n> = NonNullable<\n  NonNullable<T['__applicationErrorsType']>['code']\n> extends string\n  ? ApplicationErrorsMap<NonNullable<T['__applicationErrorsType']>>\n  : ErrorCodesMap;\n\nexport type ErrorCodesMapConditionalValidationError<\n  T extends ErrorMetaResponse,\n> = NonNullable<\n  NonNullable<T['__validationErrorsType']>['ruleName']\n> extends string\n  ? ValidationErrorsMap<NonNullable<T['__validationErrorsType']>>\n  : ErrorCodesMap;\n\nexport type ErrorCodesMapAuto<T> = T extends ErrorMetaResponse\n  ? ErrorCodesMapConditionalApplicationError<T> &\n      ErrorCodesMapConditionalValidationError<T>\n  : ErrorCodesMap;\n"],"mappings":"","ignoreList":[]}