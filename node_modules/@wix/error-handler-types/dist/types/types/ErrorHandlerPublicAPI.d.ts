import { ErrorCodesMapConditionalEnforcement } from './ErrorCodesMap';
import { ApplicationError } from './ApplicationError';
import { ResolvedError } from './ResolvedError';
import { ShowErrorProps } from './ShowError';
export interface ErrorHandlerPublicAPI {
    withErrorHandler: <T>(fn: () => Promise<T>, options: {
        errorCodesMap: ErrorCodesMapConditionalEnforcement<T>;
    }) => Promise<T>;
    getResolvedError: <TApplicationError extends ApplicationError = ApplicationError>(error: unknown) => ResolvedError<TApplicationError>;
    reportRetryAttempt: (error: unknown) => void;
    showError: (error: unknown, props?: Partial<ShowErrorProps> | null) => void;
}
//# sourceMappingURL=ErrorHandlerPublicAPI.d.ts.map