import { StatusCode } from '../types/StatusCode';
import { ShowErrorProps } from './ShowError';
import { ApplicationError, FieldViolationBase } from '../types';
export interface ErrorMetaResponse {
    __applicationErrorsType?: ApplicationError;
    __validationErrorsType?: FieldViolationBase;
}
export type ShowErrorMapFunction = (error: Error | null) => ShowErrorProps;
export type StatusCodeMap = Partial<Record<StatusCode, ShowErrorMapFunction>>;
export type ErrorCodesMap = Partial<Record<string, ShowErrorMapFunction>>;
export type ApplicationErrorsMap<TApplicationError extends ApplicationError = ApplicationError> = {
    [K in NonNullable<TApplicationError['code']>]?: ShowErrorMapFunction | false;
} & {
    [key: string]: ShowErrorMapFunction | false;
};
export type ValidationErrorsMap<TFieldViolation extends FieldViolationBase = FieldViolationBase> = {
    [K in NonNullable<TFieldViolation['ruleName']>]?: ShowErrorMapFunction | false;
} & {
    [key: string]: ShowErrorMapFunction | false;
};
export type ErrorCodesMapConditionalApplicationError<T extends ErrorMetaResponse> = NonNullable<NonNullable<T['__applicationErrorsType']>['code']> extends string ? ApplicationErrorsMap<NonNullable<T['__applicationErrorsType']>> : ErrorCodesMap;
export type ErrorCodesMapConditionalValidationError<T extends ErrorMetaResponse> = NonNullable<NonNullable<T['__validationErrorsType']>['ruleName']> extends string ? ValidationErrorsMap<NonNullable<T['__validationErrorsType']>> : ErrorCodesMap;
export type ErrorCodesMapAuto<T> = T extends ErrorMetaResponse ? ErrorCodesMapConditionalApplicationError<T> & ErrorCodesMapConditionalValidationError<T> : ErrorCodesMap;
//# sourceMappingURL=ErrorCodesMap.d.ts.map