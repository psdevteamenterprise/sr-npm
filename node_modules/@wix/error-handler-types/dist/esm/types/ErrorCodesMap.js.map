{"version":3,"names":[],"sources":["../../../src/types/ErrorCodesMap.ts"],"sourcesContent":["import { StatusCode } from './StatusCode';\nimport { ShowErrorProps } from './ShowError';\nimport { ApplicationError } from './ApplicationError';\nimport { ApplicationErrorResponse } from './ApplicationErrorResponse';\nimport { FieldViolationBase } from './ValidationError';\n\nexport type ApplicationErrorsShowErrorMapFunction = (\n  applicationError: ApplicationError,\n  error: Error | null,\n) => ShowErrorProps;\n\nexport type ValidationErrorsShowErrorMapFunction = (\n  error: Error | null,\n) => ShowErrorProps;\n\nexport type RuleName = string;\n\nexport type ApplicationErrorsMap<\n  TApplicationError extends ApplicationError = ApplicationError,\n> = {\n  [K in NonNullable<TApplicationError['code']>]:\n    | ApplicationErrorsShowErrorMapFunction\n    | false;\n} & {\n  [key: string]: ApplicationErrorsShowErrorMapFunction | false;\n};\n\nexport type ValidationErrorsMap<\n  TFieldViolation extends FieldViolationBase = FieldViolationBase,\n> = {\n  [K in NonNullable<TFieldViolation['ruleName']>]?:\n    | ValidationErrorsShowErrorMapFunction\n    | false;\n} & {\n  [key: string]: ValidationErrorsShowErrorMapFunction | false;\n};\n\nexport type StatusCodeMap = Partial<\n  Record<StatusCode, (error: Error | null) => ShowErrorProps>\n>;\n\nexport interface ErrorCodesMapBase {\n  /**\n   * When the error is not a validation error or an application error\n   */\n  statusCodeError?: StatusCodeMap;\n\n  /**\n   * When the error is a server error (5xx)\n   */\n  serverError?: (error: Error | null) => ShowErrorProps;\n}\n\nexport interface ErrorCodesMapRequiredApplicationError<\n  TApplicationError extends ApplicationError,\n> extends ErrorCodesMapBase {\n  /**\n   * When the response contains an application error (WixApplicationRuntimeException) - can be any status code (defined in proto)\n   */\n  applicationError: ApplicationErrorsMap<TApplicationError>;\n}\n\nexport interface ErrorCodesMapRequiredValidationError<\n  TFieldViolation extends FieldViolationBase,\n> extends ErrorCodesMapBase {\n  /**\n   * When the response contains a validation error (WixValidationRuntimeException) - can be any status code (defined in proto)\n   */\n  validationError?: ValidationErrorsMap<TFieldViolation>;\n}\n\nexport type ErrorCodesMapConditionalEnforcement<T> =\n  T extends ApplicationErrorResponse\n    ? ErrorCodesMapConditionalApplicationErrorEnforcement<T> &\n        ErrorCodesMapConditionalValidationErrorEnforcement<T>\n    : ErrorCodesMap;\n\nexport type ErrorCodesMapConditionalApplicationErrorEnforcement<\n  T extends ApplicationErrorResponse,\n> = NonNullable<\n  NonNullable<T['data']['__applicationErrorsType']>['code']\n> extends string\n  ? ErrorCodesMapRequiredApplicationError<\n      NonNullable<T['data']['__applicationErrorsType']>\n    >\n  : ErrorCodesMap;\n\nexport type ErrorCodesMapConditionalValidationErrorEnforcement<\n  T extends ApplicationErrorResponse,\n> = NonNullable<\n  NonNullable<T['data']['__validationErrorsType']>['ruleName']\n> extends string\n  ? ErrorCodesMapRequiredValidationError<\n      NonNullable<T['data']['__validationErrorsType']>\n    >\n  : ErrorCodesMap;\n\nexport interface ErrorCodesMap<\n  TApplicationError extends ApplicationError = ApplicationError,\n  TFieldViolation extends FieldViolationBase = FieldViolationBase,\n> extends ErrorCodesMapBase {\n  /**\n   * When the response contains an application error (WixApplicationRuntimeException) - can be any status code (defined in proto)\n   */\n  applicationError?: ApplicationErrorsMap<TApplicationError>;\n\n  /**\n   * When the response contains a validation error (WixValidationRuntimeException) - can be any status code (defined in proto)\n   */\n  validationError?: ValidationErrorsMap<TFieldViolation>;\n}\n"],"mappings":"","ignoreList":[]}