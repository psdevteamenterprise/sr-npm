{"version":3,"names":[],"sources":["../../../src/types/ErrorHandlerPublicAPI.ts"],"sourcesContent":["import { ErrorCodesMapConditionalEnforcement } from './ErrorCodesMap';\nimport { ApplicationError } from './ApplicationError';\nimport { ResolvedError } from './ResolvedError';\nimport { ShowErrorProps } from './ShowError';\n\nexport interface ErrorHandlerPublicAPI {\n  withErrorHandler: <T>(\n    fn: () => Promise<T>,\n    options: {\n      errorCodesMap: ErrorCodesMapConditionalEnforcement<T>;\n    },\n  ) => Promise<T>;\n\n  getResolvedError: <\n    TApplicationError extends ApplicationError = ApplicationError,\n  >(\n    error: unknown,\n  ) => ResolvedError<TApplicationError>;\n\n  reportRetryAttempt: (error: unknown) => void;\n\n  showError: (error: unknown, props?: Partial<ShowErrorProps> | null) => void;\n}\n"],"mappings":"","ignoreList":[]}