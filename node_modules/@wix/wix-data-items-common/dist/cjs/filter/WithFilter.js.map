{"version":3,"names":[],"sources":["../../../src/filter/WithFilter.ts"],"sourcesContent":["type Comparable = string | number | Date\n\n/**\n * Type that allow filter construction.\n * All construction methods return copy of self\n */\nexport default interface WithFilter<Self extends WithFilter<Self>> {\n  /**\n   * Filter JSON, possibly invalid\n   * @internal\n   */\n  readonly filterTree: Record<string, any>\n\n  /**\n   * Validation errors, if empty filterTree is valid\n   * @internal\n   */\n  readonly invalidArguments: string[]\n\n  /**\n   * Refines a query or filter to match items whose specified property value equals the specified value.\n   *\n   * The `eq()` function refines this filter to only\n   * match items where the value of the specified property equals the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If `field` points to a collection field of type Array, `eq()` includes the item\n   * as long as at least one Array element matches the specified `value`.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param value - The value to match against.\n   * @requiredField value\n   * @returns An object representing the refined query.\n   */\n  eq(field: string, value: any): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value does not equal the specified value.\n   *\n   * The `ne()` function refines this filter to only\n   * match items where the value of the specified property does not equal the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type is considered not equal to the same number stored as a Number type.\n   *\n   * Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the `field` property is an Array, `ne()` includes items\n   * in which none of the elements of the Array match the specified `value`.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param value - The value to match against.\n   * @requiredField value\n   * @returns An object representing the refined query.\n   */\n  ne(field: string, value: any): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value is greater than or equal to the specified\n   * value.\n   *\n   * The `ge()` function refines this filter to only\n   * match items where the value of the specified property is greater than or\n   * equal to the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value will be compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically,\n   *   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),\n   *   but `\"ABC\"` is not greater than or equal to `\"abc\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param value - The value to match against.\n   * @requiredField value\n   * @returns An object representing the refined query.\n   */\n  ge(field: string, value: Comparable): Self\n\n  /**\n   * Alias for `ge()`\n   * @internal\n   */\n  gte(field: string, value: Comparable): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value is greater than the specified value.\n   *\n   * The `gt()` function refines this filter to only match\n   * items where the value of the specified property is greater than the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value will be compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param value - The value to match against.\n   * @requiredField value\n   * @returns An object with the query definition, based on the supplied parameters.\n   */\n  gt(field: string, value: Comparable): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value is less than or equal to the specified\n   * value.\n   *\n   * The `le()` function refines this filter to only match\n   * items where the value of the specified property is less than or equal to the\n   * specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value will be compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically,\n   *   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),\n   *   but `\"abc\"` is not less than or equal to `\"ABC\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param value - The value to match against.\n   * @requiredField value\n   * @returns An object representing the refined query.\n   */\n  le(field: string, value: Comparable): Self\n\n  /**\n   * Alias for `le()`\n   * @internal\n   */\n  lte(field: string, value: Comparable): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value is less than the specified value.\n   *\n   * The `lt()` function refines this filter to only match\n   * items where the value of the specified property is less than the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value will be compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param value - The value to match against.\n   * @requiredField value\n   * @returns An object with the query definition, based on the supplied parameters.\n   */\n  lt(field: string, value: Comparable): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property has any value.\n   *\n   * The `isNotEmpty()` function refines this filter to only match items where the\n   * value of the specified property is not `null` or `undefined`.\n   *\n   * If the property contains any value at all for a given item, including the\n   * empty string or an invalid value, that item will match the query.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property in which to check for a value.\n   * @requiredField field\n   * @returns An object representing the refined query.\n   */\n  isNotEmpty(field: string): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property does not exist or does not have any value.\n   *\n   * The `isEmpty()` function refines this filter to only match items where the\n   * value of the specified property is `null` or `undefined` or the property does\n   * not exist.\n   *\n   * If the property contains any value at all for a given item, including the\n   * empty string or an invalid value, that item will match the query.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property in which to check for a value.\n   * @requiredField field\n   * @returns An object representing the refined query.\n   */\n  isEmpty(field: string): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value starts with a specified string.\n   *\n   * The `startsWith()` function refines this filter to\n   * only match items where the value of the specified property starts with the\n   * defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts\n   * with `\"tex\"`.\n   *\n   * You can only use `startsWith()` with a property whose value is a String or Reference.\n   * When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Property whose value will be compared with the `value` parameter.\n   * @requiredField field\n   * @param value - String to look for at the beginning of the specified property value.\n   * @requiredField value\n   * @returns `WixDataQuery` object representing the refined query.\n   */\n  startsWith(field: string, value: string): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value ends with a specified string.\n   *\n   * The `endsWith()` function refines this filter to only\n   * match items where the value of the specified property ends with the specified\n   * `string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends\n   * with `\"ext\"`.\n   *\n   * You can only use `endsWith()` with a property whose value is a String or Reference.\n   * When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Property whose value will be compared with the string.\n   * @requiredField field\n   * @param value - String to look for at the end of the specified property value.\n   * @requiredField value\n   * @returns `WixDataQuery` object representing the refined query.\n   */\n  endsWith(field: string, value: string): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value contains a specified string.\n   *\n   * The `contains()` function refines this filter to\n   * only match items where the value of the specified property contains the\n   * specified `string`. Matching with `contains()` is not case sensitive, so\n   * `\"text\"` does contain `\"Tex\"`.\n   *\n   * You can use `contains()` with a property whose value is a String or a Reference.\n   * For properties of type reference it is recommended that you use the [`eq()`](#eq)\n   * function instead of `contains()`. With properties that are References, `contains()`\n   * matches by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with the string.\n   * @requiredField field\n   * @param value - The string to look for inside the specified property value.\n   * @requiredField value\n   * @returns An object representing the refined query.\n   */\n  contains(field: string, value: string): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value equals any of the specified `values`\n   * parameters.\n   *\n   * The `hasSome()` function refines this filter to\n   * only match items where the value of the specified property equals any of\n   * the specified values.\n   *\n   * Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the specified property is an array, `hasSome()` will match\n   * if any of the elements of that array match any of the specified values.\n   *\n   * If the specified property contains multiple references, pass item IDs in the\n   * `value` property. In such a case, `hasSome()` will match if any of the\n   * multiple references match any of the specified ID values.\n   *\n   * You can specify a list of values to match by providing an array of\n   * String, Number, or Date types as the `value` parameters.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param values - The values to match against.\n   * @requiredField values\n   * @returns An object representing the refined query.\n   */\n  hasSome(field: string, ...values: Comparable[]): Self\n\n  /**\n   * Overload for `hasSome()`\n   * @public\n   * @documentationMaturity preview\n   */\n  hasSome(field: string, values: Comparable[]): Self\n\n  /**\n   * Alias for `hasSome()`\n   * @internal\n   */\n  in(field: string, ...values: Comparable[]): Self\n\n  /**\n   * Alias for `hasSome()`\n   * @internal\n   */\n  in(field: string, values: Comparable[]): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property values equals all of the specified `value`\n   * parameters.\n   *\n   * The `hasAll()` function refines this filter to\n   * only match items where the value of the specified property equals all of\n   * the specified values.\n   *\n   * Matching strings with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the specified property is an array, `hasAll()` will match\n   * if there is a match in the elements of that array for all of the specified\n   * values.\n   *\n   * You can specify a list of values to match by providing an array of\n   * String, Number, or Date types as the `value` parameters.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with `value`.\n   * @requiredField field\n   * @param values - The values to match against.\n   * @requiredField values\n   * @returns An object representing the refined query.\n   */\n  hasAll(field: string, ...values: Comparable[]): Self\n\n  /**\n   * Overload for `hasAll()`\n   * @public\n   * @documentationMaturity preview\n   */\n  hasAll(field: string, values: Comparable[]): Self\n\n  /**\n   * Exists filter.\n   * @returns `current $and (field $exists value)`\n   * @internal\n   */\n  exists(field: string, value: boolean): Self\n\n  /**\n   * Adds an `or` condition to the query or filter.\n   *\n   * The `or()` function adds an inclusive `or` condition to this filter. A query or filter\n   * with an `or` returns all the items that match the query or filter as defined up to\n   * the `or` function, the items that match the query or filter passed to the `or`\n   * function, and the items that match both.\n   *\n   * The collections used by both the initial query and the query passed\n   * to the `or` function must be the same.\n   *\n   * The 'or()' function is designed to work with 2 or more queries or filters.\n   * If you use it on its own, it will return all the items in a collection.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial filter as an `or` condition.\n   * @requiredField filter\n   * @returns Object representing the refined query.\n   */\n  or(filter: WithFilter<any>): Self\n\n  /**\n   * Adds an `and` condition to the query or filter.\n   *\n   * The `and()` function adds an and condition to this query. A query or filter with an `and` returns all the items\n   * that match the query or filter as defined up to the `and` function and also match the query or filter passed to\n   * the `and` function.\n   *\n   * Note that when chaining multiple `WixDataFilter` functions to a query an and condition is assumed. In such cases,\n   * you do not need to add a call to the `and()` function. For example, this query returns results where status is\n   * active **and** age is greater than 25.\n   * ```js\n   * wixData.query(\"myCollection\").eq(\"status\", \"active\").gt(\"age\", 25);\n   * ```\n   *\n   * The `and()` function is needed when performing compound queries. For example, the final query in this set of\n   * queries returns results where status is either pending or rejected **and** age is either less than 25 or greater\n   * than 65.\n   * ```js\n   * let statusQuery = wixData\n   *   .query(\"myCollection\")\n   *   .eq(\"status\", \"pending\")\n   *   .or(wixData.query(\"myCollection\").eq(\"status\", \"rejected\"));\n   *\n   * let ageQuery = wixData\n   *   .query(\"myCollection\")\n   *   .lt(\"age\", 25)\n   *   .or(wixData.query(\"myCollection\").gt(\"age\", 65));\n   *\n   * let statusAndAgeQuery = statusQuery.and(ageQuery);\n   * ```\n   *\n   * The collections referenced by both the initial query and the query passed to the `and` function must be the same.\n   *\n   * The `and()` function is designed to work with 2 or more queries or filters. If you use it on its own, it will\n   * return all the items in a collection.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - A filter to add to the initial query as an `and` condition.\n   * @requiredField filter\n   * @returns An object representing the refined query.\n   */\n  and(filter: WithFilter<any>): Self\n\n  /**\n   * Adds a `not` condition to the query or filter.\n   *\n   * The `not()` function adds a `not` condition to this filter. A query or filter with a `not`\n   * returns all the items that match the query or filter as defined up to the `not`\n   * function, but don't match the query or filter passed to the `not` function.\n   *\n   * If the query or filter only contains a `not()` function, it returns all the items\n   * that don't match the query defined by the `not` method.\n   *\n   * The collections referenced by both the initial query and the query passed\n   * to the `not` function must be the same.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial filter as a `not` condition.\n   * @requiredField filter\n   * @returns Object representing the refined query.\n   */\n  not(filter: WithFilter<any>): Self\n\n  /**\n   * Refines a query or filter to match items whose specified property value is within a specified range.\n   *\n   * The `between()` function refines this query to only match items where the value of the specified property is\n   * greater than or equal to `rangeStart` and less than `rangeEnd`.\n   *\n   * It only matches values of the same type. For example, a number value stored as a String type does not match the\n   * same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value will be compared alphabetically and not numerically. Items\n   * that do not have a value for the specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so\n   *   - `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.\n   *   - `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not.\n   * @public\n   * @documentationMaturity preview\n   * @param field - The property whose value will be compared with rangeStart and rangeEnd.\n   * @requiredField field\n   * @param rangeStart - The beginning value of the range to match against.\n   * @requiredField rangeStart\n   * @param rangeEnd - The ending value of the range to match against.\n   * @requiredField rangeEnd\n   * @returns An object representing the refined query.\n   */\n  between<T extends Comparable>(field: string, rangeStart: T, rangeEnd: T): Self\n}\n"],"mappings":"","ignoreList":[]}