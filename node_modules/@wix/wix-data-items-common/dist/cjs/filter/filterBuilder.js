"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = exports.PlatformizedFilterBuilder = exports.FilterBuilder = void 0;
exports.filterBuilderFactory = filterBuilderFactory;
exports.platformizedFilterBuilder = platformizedFilterBuilder;
var _filterMixin = _interopRequireDefault(require("./filterMixin"));
class FilterBuilder extends (0, _filterMixin.default)() {
  get constructorName() {
    return 'FilterBuilder';
  }
  _build() {
    return this.getFilterModel();
  }
}
exports.FilterBuilder = FilterBuilder;
class PlatformizedFilterBuilder extends (0, _filterMixin.default)() {
  in(...args) {
    return this._AndSetOperand('$in', '.in', args);
  }
  exists(...args) {
    return this._binaryAnd('$exists', '.exists', args);
  }
  gte(field, value) {
    return this.ge(field, value);
  }
  lte(field, value) {
    return this.le(field, value);
  }
  build() {
    return this.getFilterModel();
  }
  hasAnyFilter() {
    var _this$filterTree;
    if (this.filterTree === null || this.filterTree === undefined) {
      return false;
    }
    if (!Object.keys(this.filterTree).every(x => x === '$and')) {
      return false;
    }
    return (((_this$filterTree = this.filterTree) == null || (_this$filterTree = _this$filterTree.$and) == null ? void 0 : _this$filterTree.length) ?? 0) > 0;
  }
}
exports.PlatformizedFilterBuilder = PlatformizedFilterBuilder;
function platformizedFilterBuilder(options = {}) {
  return new PlatformizedFilterBuilder(options);
}
function filterBuilderFactory() {
  return new FilterBuilder({});
}
var _default = exports.default = filterBuilderFactory;
//# sourceMappingURL=filterBuilder.js.map