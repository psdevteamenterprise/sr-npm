{"version":3,"names":["_filter","require","_QueryBase","_errors","_utils","WixDataAggregateImpl","QueryBase","constructor","origin","_defineProperty2","default","limitNumber","skipNumber","aggregates","groupBy","havingBuilder","onRun","ownInvalidArguments","invalidArguments","copy","params","filterBuilder","sort","addAggregates","_this$havingBuilder","run","options","filterTree","build","_error","havingTree","_this$havingBuilder2","_this$havingBuilder3","arguments","collectionName","orderBy","addAggregate","args","type","fieldName","alias","aggregateValidator","arityIsAtLeastOne","typeIsString","typeIsStringIfSet","validateAndAggregate","name","toUpperCase","substr","sum","projectedField","avg","min","max","count","arityIsZero","filter","arityIsOne","filterIsNotSet","group","groupIsNotSet","having","havingIsNotSet","_this$havingBuilder4","limit","isPositiveNumber","isInteger","skip","isNonNegativeNumber","operatorName","AggregationValidator","exports","MAX_SAFE_INTEGER","AggregatingValidator","previousInvalidArguments","addValidation","PlatformizedFilterBuilder","messages","aggregateValidations","filterMustBeBuilder","undefined","hasAnyFilter","filterIsAlreadySet","length","groupIsAlreadySet","_isNumber","specifier","operand","isNumber","queryValidations","Number","isNaN","isFinite","value","isString","filterValidations"],"sources":["../../../../src/api/impl/WixDataAggregateImpl.ts"],"sourcesContent":["import { PlatformizedFilterBuilder } from '../../filter'\nimport { QueryBase } from '../QueryBase'\nimport { Sort } from '../../sort/sortMixin'\nimport { AggregatingValidator, messages } from '../../errors'\nimport { isNumber, isString } from '../../utils'\nimport { WixDataResult } from '../WixDataResult'\nimport { WixDataAggregateOptions } from '../types'\nimport { WixDataAggregate } from '../WixDataAggregate'\n\ninterface Aggregate {\n  name: string\n  // one of\n  avg?: string\n  min?: string\n  max?: string\n  sum?: string\n  count?: true\n}\n\ninterface AggregateParams {\n  collectionName: string\n  invalidArguments: string[]\n  filterTree?: Record<string, any>\n  havingTree?: Record<string, any>\n  aggregates: Aggregate[]\n  groupBy: string[]\n  limitNumber?: number\n  skipNumber: number\n  orderBy: { [field: string]: 'asc' | 'desc' }[]\n}\ntype OnRun = (\n  args: IArguments,\n  params: AggregateParams,\n  options?: WixDataAggregateOptions\n) => Promise<WixDataResult<Record<string, any>>>\n\nexport class WixDataAggregateImpl\n  extends QueryBase<WixDataAggregateImpl>\n  implements WixDataAggregate\n{\n  readonly limitNumber?: number\n\n  readonly skipNumber: number\n\n  readonly aggregates: Aggregate[]\n\n  readonly groupBy: string[]\n\n  private readonly havingBuilder?: PlatformizedFilterBuilder\n  private readonly onRun: OnRun\n  private readonly ownInvalidArguments: string[]\n\n  constructor(origin: {\n    collectionName: string\n    filter?: PlatformizedFilterBuilder\n    invalidArguments?: string[]\n    sort?: Sort\n    limitNumber?: number\n    skipNumber?: number\n    aggregates?: Aggregate[]\n    groupBy?: string[]\n    havingBuilder?: PlatformizedFilterBuilder\n    onRun: OnRun\n  }) {\n    super(origin)\n    this.limitNumber = origin.limitNumber\n    this.skipNumber = origin.skipNumber ?? 0\n    this.aggregates = origin.aggregates ?? []\n    this.groupBy = origin.groupBy ?? []\n    this.havingBuilder = origin.havingBuilder\n    this.onRun = origin.onRun\n    this.ownInvalidArguments = origin.invalidArguments ?? []\n  }\n\n  protected override copy(params: {\n    limitNumber?: number\n    skipNumber?: number\n    addAggregates?: Aggregate[]\n    groupBy?: string[]\n    havingBuilder?: PlatformizedFilterBuilder\n    filterBuilder?: PlatformizedFilterBuilder\n    sort?: Sort\n    invalidArguments?: string[]\n  }): WixDataAggregateImpl {\n    return new WixDataAggregateImpl({\n      ...this,\n      limitNumber: params.limitNumber ?? this.limitNumber,\n      skipNumber: params.skipNumber ?? this.skipNumber,\n      havingBuilder: params.havingBuilder ?? this.havingBuilder,\n      filterBuilder: params.filterBuilder ?? this.filterBuilder,\n      sort: params.sort ?? this.sort,\n      invalidArguments: params.invalidArguments ?? this.ownInvalidArguments,\n      groupBy: params.groupBy ?? this.groupBy,\n      aggregates: [...this.aggregates, ...(params.addAggregates ?? [])],\n      onRun: this.onRun,\n    })\n  }\n\n  get invalidArguments(): string[] {\n    return [\n      ...this.ownInvalidArguments,\n      ...this.filterBuilder.invalidArguments,\n      ...(this.havingBuilder?.invalidArguments ?? []),\n      ...this.sort.invalidArguments,\n    ]\n  }\n\n  run(\n    options?: WixDataAggregateOptions\n  ): Promise<WixDataResult<Record<string, any>>> {\n    let filterTree\n    try {\n      // optimized filter if no errors\n      filterTree = this.filterBuilder.build()\n    } catch (_error: unknown) {\n      filterTree = this.filterBuilder.filterTree\n    }\n    let havingTree\n    try {\n      // optimized filter if no errors\n      havingTree = this.havingBuilder?.build()\n    } catch (_error: unknown) {\n      havingTree = this.havingBuilder?.filterTree\n    }\n\n    return this.onRun(\n      arguments,\n      {\n        collectionName: this.collectionName,\n        invalidArguments: this.invalidArguments,\n        filterTree,\n        havingTree,\n        aggregates: this.aggregates,\n        groupBy: this.groupBy,\n        limitNumber: this.limitNumber,\n        skipNumber: this.skipNumber,\n        orderBy: this.orderBy,\n      },\n      options\n    )\n  }\n\n  // --- accumulators ---\n\n  private addAggregate(\n    args: IArguments,\n    type: 'sum' | 'avg' | 'min' | 'max',\n    fieldName: string,\n    alias?: string\n  ) {\n    const [invalidArguments] = this.aggregateValidator(type)\n      .arityIsAtLeastOne(args)\n      .typeIsString(fieldName)\n      .typeIsStringIfSet(alias)\n      .validateAndAggregate()\n\n    return this.copy({\n      invalidArguments,\n      addAggregates: [\n        {\n          name:\n            alias ?? `${fieldName}${type[0].toUpperCase()}${type.substr(1)}`,\n          [type]: fieldName,\n        },\n      ],\n    })\n  }\n\n  sum(fieldName: string, projectedField?: string): WixDataAggregate {\n    return this.addAggregate(arguments, 'sum', fieldName, projectedField)\n  }\n\n  avg(fieldName: string, projectedField?: string): WixDataAggregate {\n    return this.addAggregate(arguments, 'avg', fieldName, projectedField)\n  }\n\n  min(fieldName: string, projectedField?: string): WixDataAggregate {\n    return this.addAggregate(arguments, 'min', fieldName, projectedField)\n  }\n\n  max(fieldName: string, projectedField?: string): WixDataAggregate {\n    return this.addAggregate(arguments, 'max', fieldName, projectedField)\n  }\n\n  count(projectedField: string = 'count'): WixDataAggregate {\n    const [invalidArguments] = this.aggregateValidator('count')\n      .arityIsZero(arguments)\n      .typeIsString(projectedField)\n      .validateAndAggregate()\n\n    return this.copy({\n      invalidArguments,\n      addAggregates: [\n        {\n          name: projectedField,\n          count: true,\n        },\n      ],\n    })\n  }\n\n  filter(filterBuilder: PlatformizedFilterBuilder): WixDataAggregate {\n    const [invalidArguments] = this.aggregateValidator('.filter')\n      .arityIsOne(arguments)\n      .filterIsNotSet(this.filterBuilder)\n      .filterBuilder(filterBuilder)\n      .validateAndAggregate()\n\n    return this.copy({\n      filterBuilder,\n      invalidArguments,\n    })\n  }\n\n  group(...fieldName: string[]): WixDataAggregate {\n    const [invalidArguments] = this.aggregateValidator('.group')\n      .arityIsAtLeastOne(arguments)\n      .groupIsNotSet(this.groupBy)\n      .validateAndAggregate()\n\n    return this.copy({\n      groupBy: fieldName,\n      invalidArguments,\n    })\n  }\n\n  having(filterBuilder: PlatformizedFilterBuilder): WixDataAggregate {\n    const [invalidArguments] = this.aggregateValidator('.having')\n      .arityIsOne(arguments)\n      .havingIsNotSet(this.havingBuilder)\n      .filterBuilder(filterBuilder)\n      .validateAndAggregate()\n\n    return this.copy({\n      havingBuilder: filterBuilder,\n      invalidArguments,\n    })\n  }\n\n  get havingTree(): Record<string, any> {\n    return this.havingBuilder?.filterTree\n  }\n\n  limit(limitNumber: number) {\n    const [invalidArguments] = this.aggregateValidator('.limit')\n      .arityIsOne(arguments)\n      .isPositiveNumber(limitNumber)\n      .isInteger(limitNumber)\n      .validateAndAggregate()\n\n    return this.copy({\n      invalidArguments,\n      limitNumber,\n    })\n  }\n\n  skip(skipNumber: number) {\n    const [invalidArguments] = this.aggregateValidator('.skip')\n      .arityIsOne(arguments)\n      .isNonNegativeNumber(skipNumber)\n      .isInteger(skipNumber)\n      .validateAndAggregate()\n\n    return this.copy({\n      invalidArguments,\n      skipNumber,\n    })\n  }\n\n  private aggregateValidator(operatorName: string) {\n    return new AggregationValidator(operatorName, this.ownInvalidArguments)\n  }\n}\n\nconst MAX_SAFE_INTEGER = 9007199254740991\n\nclass AggregationValidator extends AggregatingValidator {\n  constructor(public operatorName: string, previousInvalidArguments: string[]) {\n    super(previousInvalidArguments)\n    this.operatorName = operatorName\n  }\n\n  filterBuilder(filter: any) {\n    return this.addValidation(\n      () => filter instanceof PlatformizedFilterBuilder,\n      () => messages.aggregateValidations.filterMustBeBuilder(this.operatorName)\n    )\n  }\n\n  filterIsNotSet(filter?: PlatformizedFilterBuilder) {\n    return this.addValidation(\n      () => filter === undefined || !filter.hasAnyFilter(),\n      () => messages.aggregateValidations.filterIsAlreadySet(this.operatorName)\n    )\n  }\n\n  havingIsNotSet(filter?: PlatformizedFilterBuilder) {\n    return this.addValidation(\n      () => filter === undefined || !filter.hasAnyFilter(),\n      () => messages.aggregateValidations.filterIsAlreadySet(this.operatorName)\n    )\n  }\n\n  groupIsNotSet(groupBy: string[]) {\n    return this.addValidation(\n      () => groupBy.length === 0,\n      () => messages.aggregateValidations.groupIsAlreadySet(this.operatorName)\n    )\n  }\n\n  _isNumber(specifier: string, operand: any) {\n    return this.addValidation(\n      () => isNumber(operand),\n      () =>\n        messages.queryValidations.isNumber(\n          this.operatorName,\n          specifier,\n          operand\n        )\n    )\n  }\n\n  isPositiveNumber(operand: any) {\n    return this._isNumber('positive', operand).addValidation(\n      () => !Number.isNaN(operand) && operand > 0,\n      () =>\n        messages.queryValidations.isPositiveNumber(this.operatorName, operand)\n    )\n  }\n\n  isNonNegativeNumber(operand: any) {\n    return this._isNumber('non-negative', operand).addValidation(\n      () => !Number.isNaN(operand) && operand >= 0,\n      () =>\n        messages.queryValidations.isNonNegativeNumber(\n          this.operatorName,\n          operand\n        )\n    )\n  }\n\n  isInteger(operand: any) {\n    return this.addValidation(\n      () =>\n        !Number.isNaN(operand) &&\n        Number.isFinite(operand) &&\n        Number.isInteger(operand) &&\n        operand < MAX_SAFE_INTEGER &&\n        operand > -MAX_SAFE_INTEGER,\n      () => messages.queryValidations.isInteger(this.operatorName, operand)\n    )\n  }\n\n  typeIsString(value: any) {\n    return this.addValidation(\n      () => isString(value),\n      () => messages.filterValidations.typeIsString(this.operatorName, value)\n    )\n  }\n\n  typeIsStringIfSet(value: any) {\n    return this.addValidation(\n      () => value === undefined || isString(value),\n      () => messages.filterValidations.typeIsString(this.operatorName, value)\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AAEA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AAgCO,MAAMI,oBAAoB,SACvBC,oBAAS,CAEnB;EAaEC,WAAWA,CAACC,MAWX,EAAE;IACD,KAAK,CAACA,MAAM,CAAC;IAAA,IAAAC,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IACb,IAAI,CAACC,WAAW,GAAGH,MAAM,CAACG,WAAW;IACrC,IAAI,CAACC,UAAU,GAAGJ,MAAM,CAACI,UAAU,IAAI,CAAC;IACxC,IAAI,CAACC,UAAU,GAAGL,MAAM,CAACK,UAAU,IAAI,EAAE;IACzC,IAAI,CAACC,OAAO,GAAGN,MAAM,CAACM,OAAO,IAAI,EAAE;IACnC,IAAI,CAACC,aAAa,GAAGP,MAAM,CAACO,aAAa;IACzC,IAAI,CAACC,KAAK,GAAGR,MAAM,CAACQ,KAAK;IACzB,IAAI,CAACC,mBAAmB,GAAGT,MAAM,CAACU,gBAAgB,IAAI,EAAE;EAC1D;EAEmBC,IAAIA,CAACC,MASvB,EAAwB;IACvB,OAAO,IAAIf,oBAAoB,CAAC;MAC9B,GAAG,IAAI;MACPM,WAAW,EAAES,MAAM,CAACT,WAAW,IAAI,IAAI,CAACA,WAAW;MACnDC,UAAU,EAAEQ,MAAM,CAACR,UAAU,IAAI,IAAI,CAACA,UAAU;MAChDG,aAAa,EAAEK,MAAM,CAACL,aAAa,IAAI,IAAI,CAACA,aAAa;MACzDM,aAAa,EAAED,MAAM,CAACC,aAAa,IAAI,IAAI,CAACA,aAAa;MACzDC,IAAI,EAAEF,MAAM,CAACE,IAAI,IAAI,IAAI,CAACA,IAAI;MAC9BJ,gBAAgB,EAAEE,MAAM,CAACF,gBAAgB,IAAI,IAAI,CAACD,mBAAmB;MACrEH,OAAO,EAAEM,MAAM,CAACN,OAAO,IAAI,IAAI,CAACA,OAAO;MACvCD,UAAU,EAAE,CAAC,GAAG,IAAI,CAACA,UAAU,EAAE,IAAIO,MAAM,CAACG,aAAa,IAAI,EAAE,CAAC,CAAC;MACjEP,KAAK,EAAE,IAAI,CAACA;IACd,CAAC,CAAC;EACJ;EAEA,IAAIE,gBAAgBA,CAAA,EAAa;IAAA,IAAAM,mBAAA;IAC/B,OAAO,CACL,GAAG,IAAI,CAACP,mBAAmB,EAC3B,GAAG,IAAI,CAACI,aAAa,CAACH,gBAAgB,EACtC,IAAI,EAAAM,mBAAA,OAAI,CAACT,aAAa,qBAAlBS,mBAAA,CAAoBN,gBAAgB,KAAI,EAAE,CAAC,EAC/C,GAAG,IAAI,CAACI,IAAI,CAACJ,gBAAgB,CAC9B;EACH;EAEAO,GAAGA,CACDC,OAAiC,EACY;IAC7C,IAAIC,UAAU;IACd,IAAI;MACF;MACAA,UAAU,GAAG,IAAI,CAACN,aAAa,CAACO,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOC,MAAe,EAAE;MACxBF,UAAU,GAAG,IAAI,CAACN,aAAa,CAACM,UAAU;IAC5C;IACA,IAAIG,UAAU;IACd,IAAI;MAAA,IAAAC,oBAAA;MACF;MACAD,UAAU,IAAAC,oBAAA,GAAG,IAAI,CAAChB,aAAa,qBAAlBgB,oBAAA,CAAoBH,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOC,MAAe,EAAE;MAAA,IAAAG,oBAAA;MACxBF,UAAU,IAAAE,oBAAA,GAAG,IAAI,CAACjB,aAAa,qBAAlBiB,oBAAA,CAAoBL,UAAU;IAC7C;IAEA,OAAO,IAAI,CAACX,KAAK,CACfiB,SAAS,EACT;MACEC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnChB,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCS,UAAU;MACVG,UAAU;MACVjB,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBH,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BuB,OAAO,EAAE,IAAI,CAACA;IAChB,CAAC,EACDT,OACF,CAAC;EACH;;EAEA;;EAEQU,YAAYA,CAClBC,IAAgB,EAChBC,IAAmC,EACnCC,SAAiB,EACjBC,KAAc,EACd;IACA,MAAM,CAACtB,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAACH,IAAI,CAAC,CACrDI,iBAAiB,CAACL,IAAI,CAAC,CACvBM,YAAY,CAACJ,SAAS,CAAC,CACvBK,iBAAiB,CAACJ,KAAK,CAAC,CACxBK,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfD,gBAAgB;MAChBK,aAAa,EAAE,CACb;QACEuB,IAAI,EACFN,KAAK,IAAI,GAAGD,SAAS,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACS,WAAW,CAAC,CAAC,GAAGT,IAAI,CAACU,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,CAACV,IAAI,GAAGC;MACV,CAAC;IAEL,CAAC,CAAC;EACJ;EAEAU,GAAGA,CAACV,SAAiB,EAAEW,cAAuB,EAAoB;IAChE,OAAO,IAAI,CAACd,YAAY,CAACH,SAAS,EAAE,KAAK,EAAEM,SAAS,EAAEW,cAAc,CAAC;EACvE;EAEAC,GAAGA,CAACZ,SAAiB,EAAEW,cAAuB,EAAoB;IAChE,OAAO,IAAI,CAACd,YAAY,CAACH,SAAS,EAAE,KAAK,EAAEM,SAAS,EAAEW,cAAc,CAAC;EACvE;EAEAE,GAAGA,CAACb,SAAiB,EAAEW,cAAuB,EAAoB;IAChE,OAAO,IAAI,CAACd,YAAY,CAACH,SAAS,EAAE,KAAK,EAAEM,SAAS,EAAEW,cAAc,CAAC;EACvE;EAEAG,GAAGA,CAACd,SAAiB,EAAEW,cAAuB,EAAoB;IAChE,OAAO,IAAI,CAACd,YAAY,CAACH,SAAS,EAAE,KAAK,EAAEM,SAAS,EAAEW,cAAc,CAAC;EACvE;EAEAI,KAAKA,CAACJ,cAAsB,GAAG,OAAO,EAAoB;IACxD,MAAM,CAAChC,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAAC,OAAO,CAAC,CACxDc,WAAW,CAACtB,SAAS,CAAC,CACtBU,YAAY,CAACO,cAAc,CAAC,CAC5BL,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfD,gBAAgB;MAChBK,aAAa,EAAE,CACb;QACEuB,IAAI,EAAEI,cAAc;QACpBI,KAAK,EAAE;MACT,CAAC;IAEL,CAAC,CAAC;EACJ;EAEAE,MAAMA,CAACnC,aAAwC,EAAoB;IACjE,MAAM,CAACH,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAAC,SAAS,CAAC,CAC1DgB,UAAU,CAACxB,SAAS,CAAC,CACrByB,cAAc,CAAC,IAAI,CAACrC,aAAa,CAAC,CAClCA,aAAa,CAACA,aAAa,CAAC,CAC5BwB,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfE,aAAa;MACbH;IACF,CAAC,CAAC;EACJ;EAEAyC,KAAKA,CAAC,GAAGpB,SAAmB,EAAoB;IAC9C,MAAM,CAACrB,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAAC,QAAQ,CAAC,CACzDC,iBAAiB,CAACT,SAAS,CAAC,CAC5B2B,aAAa,CAAC,IAAI,CAAC9C,OAAO,CAAC,CAC3B+B,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfL,OAAO,EAAEyB,SAAS;MAClBrB;IACF,CAAC,CAAC;EACJ;EAEA2C,MAAMA,CAACxC,aAAwC,EAAoB;IACjE,MAAM,CAACH,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAAC,SAAS,CAAC,CAC1DgB,UAAU,CAACxB,SAAS,CAAC,CACrB6B,cAAc,CAAC,IAAI,CAAC/C,aAAa,CAAC,CAClCM,aAAa,CAACA,aAAa,CAAC,CAC5BwB,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfJ,aAAa,EAAEM,aAAa;MAC5BH;IACF,CAAC,CAAC;EACJ;EAEA,IAAIY,UAAUA,CAAA,EAAwB;IAAA,IAAAiC,oBAAA;IACpC,QAAAA,oBAAA,GAAO,IAAI,CAAChD,aAAa,qBAAlBgD,oBAAA,CAAoBpC,UAAU;EACvC;EAEAqC,KAAKA,CAACrD,WAAmB,EAAE;IACzB,MAAM,CAACO,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAAC,QAAQ,CAAC,CACzDgB,UAAU,CAACxB,SAAS,CAAC,CACrBgC,gBAAgB,CAACtD,WAAW,CAAC,CAC7BuD,SAAS,CAACvD,WAAW,CAAC,CACtBkC,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfD,gBAAgB;MAChBP;IACF,CAAC,CAAC;EACJ;EAEAwD,IAAIA,CAACvD,UAAkB,EAAE;IACvB,MAAM,CAACM,gBAAgB,CAAC,GAAG,IAAI,CAACuB,kBAAkB,CAAC,OAAO,CAAC,CACxDgB,UAAU,CAACxB,SAAS,CAAC,CACrBmC,mBAAmB,CAACxD,UAAU,CAAC,CAC/BsD,SAAS,CAACtD,UAAU,CAAC,CACrBiC,oBAAoB,CAAC,CAAC;IAEzB,OAAO,IAAI,CAAC1B,IAAI,CAAC;MACfD,gBAAgB;MAChBN;IACF,CAAC,CAAC;EACJ;EAEQ6B,kBAAkBA,CAAC4B,YAAoB,EAAE;IAC/C,OAAO,IAAIC,oBAAoB,CAACD,YAAY,EAAE,IAAI,CAACpD,mBAAmB,CAAC;EACzE;AACF;AAACsD,OAAA,CAAAlE,oBAAA,GAAAA,oBAAA;AAED,MAAMmE,gBAAgB,GAAG,gBAAgB;AAEzC,MAAMF,oBAAoB,SAASG,4BAAoB,CAAC;EACtDlE,WAAWA,CAAQ8D,YAAoB,EAAEK,wBAAkC,EAAE;IAC3E,KAAK,CAACA,wBAAwB,CAAC;IAAA,KADdL,YAAoB,GAApBA,YAAoB;IAErC,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEAhD,aAAaA,CAACmC,MAAW,EAAE;IACzB,OAAO,IAAI,CAACmB,aAAa,CACvB,MAAMnB,MAAM,YAAYoB,iCAAyB,EACjD,MAAMC,gBAAQ,CAACC,oBAAoB,CAACC,mBAAmB,CAAC,IAAI,CAACV,YAAY,CAC3E,CAAC;EACH;EAEAX,cAAcA,CAACF,MAAkC,EAAE;IACjD,OAAO,IAAI,CAACmB,aAAa,CACvB,MAAMnB,MAAM,KAAKwB,SAAS,IAAI,CAACxB,MAAM,CAACyB,YAAY,CAAC,CAAC,EACpD,MAAMJ,gBAAQ,CAACC,oBAAoB,CAACI,kBAAkB,CAAC,IAAI,CAACb,YAAY,CAC1E,CAAC;EACH;EAEAP,cAAcA,CAACN,MAAkC,EAAE;IACjD,OAAO,IAAI,CAACmB,aAAa,CACvB,MAAMnB,MAAM,KAAKwB,SAAS,IAAI,CAACxB,MAAM,CAACyB,YAAY,CAAC,CAAC,EACpD,MAAMJ,gBAAQ,CAACC,oBAAoB,CAACI,kBAAkB,CAAC,IAAI,CAACb,YAAY,CAC1E,CAAC;EACH;EAEAT,aAAaA,CAAC9C,OAAiB,EAAE;IAC/B,OAAO,IAAI,CAAC6D,aAAa,CACvB,MAAM7D,OAAO,CAACqE,MAAM,KAAK,CAAC,EAC1B,MAAMN,gBAAQ,CAACC,oBAAoB,CAACM,iBAAiB,CAAC,IAAI,CAACf,YAAY,CACzE,CAAC;EACH;EAEAgB,SAASA,CAACC,SAAiB,EAAEC,OAAY,EAAE;IACzC,OAAO,IAAI,CAACZ,aAAa,CACvB,MAAM,IAAAa,eAAQ,EAACD,OAAO,CAAC,EACvB,MACEV,gBAAQ,CAACY,gBAAgB,CAACD,QAAQ,CAChC,IAAI,CAACnB,YAAY,EACjBiB,SAAS,EACTC,OACF,CACJ,CAAC;EACH;EAEAtB,gBAAgBA,CAACsB,OAAY,EAAE;IAC7B,OAAO,IAAI,CAACF,SAAS,CAAC,UAAU,EAAEE,OAAO,CAAC,CAACZ,aAAa,CACtD,MAAM,CAACe,MAAM,CAACC,KAAK,CAACJ,OAAO,CAAC,IAAIA,OAAO,GAAG,CAAC,EAC3C,MACEV,gBAAQ,CAACY,gBAAgB,CAACxB,gBAAgB,CAAC,IAAI,CAACI,YAAY,EAAEkB,OAAO,CACzE,CAAC;EACH;EAEAnB,mBAAmBA,CAACmB,OAAY,EAAE;IAChC,OAAO,IAAI,CAACF,SAAS,CAAC,cAAc,EAAEE,OAAO,CAAC,CAACZ,aAAa,CAC1D,MAAM,CAACe,MAAM,CAACC,KAAK,CAACJ,OAAO,CAAC,IAAIA,OAAO,IAAI,CAAC,EAC5C,MACEV,gBAAQ,CAACY,gBAAgB,CAACrB,mBAAmB,CAC3C,IAAI,CAACC,YAAY,EACjBkB,OACF,CACJ,CAAC;EACH;EAEArB,SAASA,CAACqB,OAAY,EAAE;IACtB,OAAO,IAAI,CAACZ,aAAa,CACvB,MACE,CAACe,MAAM,CAACC,KAAK,CAACJ,OAAO,CAAC,IACtBG,MAAM,CAACE,QAAQ,CAACL,OAAO,CAAC,IACxBG,MAAM,CAACxB,SAAS,CAACqB,OAAO,CAAC,IACzBA,OAAO,GAAGf,gBAAgB,IAC1Be,OAAO,GAAG,CAACf,gBAAgB,EAC7B,MAAMK,gBAAQ,CAACY,gBAAgB,CAACvB,SAAS,CAAC,IAAI,CAACG,YAAY,EAAEkB,OAAO,CACtE,CAAC;EACH;EAEA5C,YAAYA,CAACkD,KAAU,EAAE;IACvB,OAAO,IAAI,CAAClB,aAAa,CACvB,MAAM,IAAAmB,eAAQ,EAACD,KAAK,CAAC,EACrB,MAAMhB,gBAAQ,CAACkB,iBAAiB,CAACpD,YAAY,CAAC,IAAI,CAAC0B,YAAY,EAAEwB,KAAK,CACxE,CAAC;EACH;EAEAjD,iBAAiBA,CAACiD,KAAU,EAAE;IAC5B,OAAO,IAAI,CAAClB,aAAa,CACvB,MAAMkB,KAAK,KAAKb,SAAS,IAAI,IAAAc,eAAQ,EAACD,KAAK,CAAC,EAC5C,MAAMhB,gBAAQ,CAACkB,iBAAiB,CAACpD,YAAY,CAAC,IAAI,CAAC0B,YAAY,EAAEwB,KAAK,CACxE,CAAC;EACH;AACF","ignoreList":[]}