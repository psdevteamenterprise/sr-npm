"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.WixDataResultImpl = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _errors = require("../../errors");
class WixDataResultImpl {
  constructor(items, paging, fetch, context, origin, currentPage) {
    this.paging = paging;
    this.fetch = fetch;
    (0, _defineProperty2.default)(this, "items", void 0);
    (0, _defineProperty2.default)(this, "totalCount", void 0);
    (0, _defineProperty2.default)(this, "pageSize", void 0);
    (0, _defineProperty2.default)(this, "currentPage", void 0);
    (0, _defineProperty2.default)(this, "collectionName", void 0);
    (0, _defineProperty2.default)(this, "skipNumber", void 0);
    (0, _defineProperty2.default)(this, "allowOffsetBackwards", void 0);
    this.items = items;
    this.currentPage = currentPage;
    this.collectionName = context.collectionName;
    this.skipNumber = context.skipNumber ?? (origin == null ? void 0 : origin.skipNumber);
    if (origin) {
      this.pageSize = origin.pageSize;
      this.totalCount = origin.totalCount;
      this.allowOffsetBackwards = (currentPage ?? 0) > 0;
    } else {
      // first time query â€“ paging may have total size
      this.totalCount = paging.total ?? undefined;
      this.allowOffsetBackwards = (context.skipNumber ?? 0) > 0;
      if (context.limitNumber !== undefined) {
        this.pageSize = context.limitNumber;
      } else {
        // try to eval pageSize from items size
        const len = items.length;
        if (len > 0 && (context.skipNumber !== undefined && len + context.skipNumber <= (this.totalCount ?? 0) || paging.hasNext)) {
          this.pageSize = len;
        }
      }
      if (this.pageSize && items.length > 0) {
        // current page is not 0 if offset used
        this.currentPage = Math.ceil((context.skipNumber ?? 0) / this.pageSize);
      }
    }
  }
  get length() {
    return this.items.length;
  }

  /**
   * Can be iterated as array of items
   */
  [Symbol.iterator]() {
    return this.items[Symbol.iterator]();
  }
  get totalPages() {
    if (this.totalCount === 0) {
      return 0;
    }
    const pageSize = this.pageSize;
    if (pageSize !== undefined && this.totalCount !== undefined) {
      return Math.ceil(this.totalCount / pageSize);
    }
    if (this.totalCount !== undefined && this.skipNumber !== undefined && this.length > 0 && this.length + this.skipNumber <= this.totalCount) {
      return Math.ceil(this.totalCount / this.length);
    }
    return undefined;
  }
  async next() {
    if (!this.hasNext()) {
      throw (0, _errors.validationError)(_errors.messages.queryValidations.noNextPage(this.collectionName));
    }
    const offset = (this.skipNumber ?? 0) + (this.pageSize ?? 50);
    const [items, paging] = await this.fetch(this.nextCursor ?? offset);
    return new WixDataResultImpl(items, paging, this.fetch, {
      skipNumber: this.nextCursor ? undefined : offset,
      collectionName: this.collectionName
    }, this, (this.currentPage ?? 0) + 1);
  }
  async prev() {
    if (!this.hasPrev()) {
      throw (0, _errors.validationError)(_errors.messages.queryValidations.noPrevPage(this.collectionName));
    }
    const offset = Math.max((this.skipNumber ?? 0) - (this.pageSize ?? 50), 0);
    const [items, paging] = await this.fetch(this.prevCursor ?? offset);
    return new WixDataResultImpl(items, paging, this.fetch, {
      skipNumber: this.nextCursor ? undefined : offset,
      collectionName: this.collectionName
    }, this, Math.max((this.currentPage ?? 0) - 1, 0) // in case if paged by cursor but on page 0
    );
  }
  get nextCursor() {
    var _this$paging$cursors;
    return ((_this$paging$cursors = this.paging.cursors) == null ? void 0 : _this$paging$cursors.next) ?? undefined;
  }
  get prevCursor() {
    var _this$paging$cursors2;
    return ((_this$paging$cursors2 = this.paging.cursors) == null ? void 0 : _this$paging$cursors2.prev) ?? undefined;
  }
  hasNext() {
    return this.paging.hasNext ?? false;
  }
  hasPrev() {
    var _this$paging$cursors3;
    return this.allowOffsetBackwards && (this.currentPage ?? 0) > 0 || typeof ((_this$paging$cursors3 = this.paging.cursors) == null ? void 0 : _this$paging$cursors3.prev) === 'string';
  }
  toJSON() {
    return {
      items: this.items,
      totalCount: this.totalCount,
      pageSize: this.pageSize,
      currentPage: this.currentPage,
      length: this.length,
      totalPages: this.totalPages
    };
  }
}
exports.WixDataResultImpl = WixDataResultImpl;
//# sourceMappingURL=WixDataResultImpl.js.map