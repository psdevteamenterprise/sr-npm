"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.WixDataPatchImpl = exports.WixDataBulkPatchImpl = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _errors = require("../../errors");
var _utils = require("../../utils");
class WixDataPatchBase {
  constructor(origin) {
    (0, _defineProperty2.default)(this, "fieldModifications", void 0);
    (0, _defineProperty2.default)(this, "collectionName", void 0);
    (0, _defineProperty2.default)(this, "ownInvalidArguments", void 0);
    this.ownInvalidArguments = origin.invalidArguments ?? [];
    this.fieldModifications = origin.fieldModifications ?? [];
    this.collectionName = origin.collectionName;
  }
  incrementField(fieldName, by) {
    const [invalidArguments] = this.patchValidator('.incrementField').arityIsTwo(arguments).isNumber(fieldName, by).validateAndAggregate();
    return this.copy({
      invalidArguments,
      addFieldModification: {
        fieldPath: fieldName,
        action: 'INCREMENT_FIELD',
        actionOptions: by
      }
    });
  }
  setField(fieldName, value) {
    const [invalidArguments] = this.patchValidator('.setField').arityIsTwo(arguments).validateAndAggregate();
    return this.copy({
      invalidArguments,
      addFieldModification: {
        fieldPath: fieldName,
        action: 'SET_FIELD',
        actionOptions: value
      }
    });
  }
  appendToArray(fieldName, value) {
    const [invalidArguments] = this.patchValidator('.appendToArray').arityIsTwo(arguments).validateAndAggregate();
    return this.copy({
      invalidArguments,
      addFieldModification: {
        fieldPath: fieldName,
        action: 'APPEND_TO_ARRAY',
        actionOptions: value
      }
    });
  }
  removeFromArray(fieldName, value) {
    const [invalidArguments] = this.patchValidator('.removeFromArray').arityIsTwo(arguments).validateAndAggregate();
    return this.copy({
      invalidArguments,
      addFieldModification: {
        fieldPath: fieldName,
        action: 'REMOVE_FROM_ARRAY',
        actionOptions: value
      }
    });
  }
  removeField(fieldName) {
    const [invalidArguments] = this.patchValidator('.removeField').arityIsTwo(arguments).validateAndAggregate();
    return this.copy({
      invalidArguments,
      addFieldModification: {
        fieldPath: fieldName,
        action: 'REMOVE_FIELD'
      }
    });
  }
  patchValidator(operatorName) {
    return new PatchValidator(operatorName, this.ownInvalidArguments);
  }
}
class WixDataBulkPatchImpl extends WixDataPatchBase {
  constructor(origin) {
    super(origin);
    (0, _defineProperty2.default)(this, "onRun", void 0);
    (0, _defineProperty2.default)(this, "itemIds", void 0);
    this.onRun = origin.onRun;
    this.itemIds = origin.itemIds;
  }
  copy(params) {
    return new WixDataBulkPatchImpl({
      ...this,
      invalidArguments: params.invalidArguments ?? this.ownInvalidArguments,
      fieldModifications: [...this.fieldModifications, ...[params.addFieldModification]],
      onRun: this.onRun
    });
  }
  run(options) {
    return this.onRun(arguments, {
      collectionName: this.collectionName,
      itemIds: this.itemIds,
      invalidArguments: this.ownInvalidArguments,
      fieldModifications: this.fieldModifications
    }, options);
  }
}
exports.WixDataBulkPatchImpl = WixDataBulkPatchImpl;
class WixDataPatchImpl extends WixDataPatchBase {
  constructor(origin) {
    super(origin);
    (0, _defineProperty2.default)(this, "onRun", void 0);
    (0, _defineProperty2.default)(this, "itemId", void 0);
    this.onRun = origin.onRun;
    this.itemId = origin.itemId;
  }
  copy(params) {
    return new WixDataPatchImpl({
      ...this,
      invalidArguments: params.invalidArguments ?? this.ownInvalidArguments,
      fieldModifications: [...this.fieldModifications, ...[params.addFieldModification]],
      onRun: this.onRun
    });
  }
  run(options) {
    return this.onRun(arguments, {
      collectionName: this.collectionName,
      itemId: this.itemId,
      invalidArguments: this.ownInvalidArguments,
      fieldModifications: this.fieldModifications
    }, options);
  }
}
exports.WixDataPatchImpl = WixDataPatchImpl;
class PatchValidator extends _errors.AggregatingValidator {
  constructor(operatorName, previousInvalidArguments) {
    super(previousInvalidArguments);
    this.operatorName = operatorName;
    this.operatorName = operatorName;
  }
  isNumber(specifier, operand) {
    return this.addValidation(() => (0, _utils.isNumber)(operand), () => _errors.messages.queryValidations.isNumber(this.operatorName, specifier, operand));
  }
}
//# sourceMappingURL=WixDataPatchImpl.js.map