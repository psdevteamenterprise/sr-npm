{"version":3,"names":["_filter","require","_sortMixin","_common","QueryBase","constructor","origin","_defineProperty2","default","args","withFilter","map","extractFilter","collectionName","filterBuilder","filterTree","sort","Sort","setFilterModel","filter","invalidArguments","validateFilterTree","copy","getFilterModel","build","apply","value","orderBy","ascending","fields","descending","exports"],"sources":["../../../src/api/QueryBase.ts"],"sourcesContent":["import {\n  WithFilter,\n  PlatformizedFilterBuilder,\n  validateFilterTree,\n  FilterTree,\n} from '../filter'\nimport { Sort } from '../sort/sortMixin'\nimport { filterBuilder } from './common'\n\nexport abstract class QueryBase<Self extends WithFilter<Self>>\n  implements WithFilter<Self>\n{\n  /**\n   * @internal\n   */\n  protected readonly filterBuilder: PlatformizedFilterBuilder\n\n  /**\n   * @internal\n   */\n  protected readonly sort: Sort\n\n  /**\n   * @internal\n   */\n  readonly collectionName: string\n\n  protected constructor(origin: {\n    collectionName: string\n    filterBuilder?: PlatformizedFilterBuilder\n    sort?: Sort\n  }) {\n    this.collectionName = origin.collectionName\n    this.filterBuilder =\n      origin?.filterBuilder ?? filterBuilder({ filterTree: {} })\n    this.sort = origin?.sort ?? new Sort()\n  }\n\n  /**\n   * @internal\n   */\n  protected abstract copy(params: {\n    filterBuilder?: PlatformizedFilterBuilder\n    sort?: Sort\n  }): Self\n\n  // --- filter ---\n\n  abstract get invalidArguments(): string[]\n\n  get filterTree(): Record<string, any> {\n    return this.filterBuilder.filterTree\n  }\n\n  /**\n   * @internal\n   */\n  setFilterModel(filterTree: Record<string, any>): Self {\n    const filter = filterBuilder({\n      filterTree,\n      invalidArguments: validateFilterTree(filterTree),\n    })\n    return this.copy({ filterBuilder: filter })\n  }\n\n  /**\n   * @internal\n   */\n  getFilterModel(): FilterTree {\n    return this.filterBuilder.build()\n  }\n\n  private withFilter<F extends keyof PlatformizedFilterBuilder>(\n    filter: F,\n    args: Parameters<PlatformizedFilterBuilder[F]>\n  ): Self {\n    return this.copy({\n      filterBuilder: this.filterBuilder[filter].apply(this.filterBuilder, args),\n    })\n  }\n\n  // filterMethod: WithFilter<Self>['filterMethod'] allows keeping type signature while capturing\n  // all args as an array\n\n  eq: WithFilter<Self>['eq'] = (...args) => {\n    return this.withFilter('eq', args)\n  }\n  ne: WithFilter<Self>['ne'] = (...args) => {\n    return this.withFilter('ne', args)\n  }\n  ge: WithFilter<Self>['ge'] = (...args) => {\n    return this.withFilter('ge', args)\n  }\n  gt: WithFilter<Self>['gt'] = (...args) => {\n    return this.withFilter('gt', args)\n  }\n  gte: WithFilter<Self>['gte'] = (...args) => {\n    return this.withFilter('gte', args)\n  }\n  le: WithFilter<Self>['le'] = (...args) => {\n    return this.withFilter('le', args)\n  }\n  lt: WithFilter<Self>['lt'] = (...args) => {\n    return this.withFilter('lt', args)\n  }\n  lte: WithFilter<Self>['lte'] = (...args) => {\n    return this.withFilter('lte', args)\n  }\n  isNotEmpty: WithFilter<Self>['isNotEmpty'] = (...args) => {\n    return this.withFilter('isNotEmpty', args)\n  }\n  isEmpty: WithFilter<Self>['isEmpty'] = (...args) => {\n    return this.withFilter('isEmpty', args)\n  }\n  startsWith: WithFilter<Self>['startsWith'] = (...args) => {\n    return this.withFilter('startsWith', args)\n  }\n  endsWith: WithFilter<Self>['endsWith'] = (...args) => {\n    return this.withFilter('endsWith', args)\n  }\n  contains: WithFilter<Self>['contains'] = (...args) => {\n    return this.withFilter('contains', args)\n  }\n  hasSome: WithFilter<Self>['hasSome'] = (...args) => {\n    return this.withFilter('hasSome', args)\n  };\n  in: WithFilter<Self>['in'] = (...args) => {\n    return this.withFilter('in', args)\n  }\n  hasAll: WithFilter<Self>['hasAll'] = (...args) => {\n    return this.withFilter('hasAll', args)\n  }\n  exists: WithFilter<Self>['exists'] = (...args) => {\n    return this.withFilter('exists', args)\n  }\n  or: WithFilter<Self>['or'] = (...args) => {\n    // @ts-expect-error\n    return this.withFilter('or', args.map(this.extractFilter))\n  }\n  and: WithFilter<Self>['and'] = (...args) => {\n    // @ts-expect-error\n    return this.withFilter('and', args.map(this.extractFilter))\n  }\n  not: WithFilter<Self>['not'] = (...args) => {\n    // @ts-expect-error\n    return this.withFilter('not', args.map(this.extractFilter))\n  }\n  between: WithFilter<Self>['between'] = (...args) => {\n    return this.withFilter('between', args)\n  }\n\n  private extractFilter(value: any): any {\n    return value?.filterBuilder ? value.filterBuilder : value\n  }\n\n  // --- sort ---\n\n  get orderBy(): { [field: string]: 'asc' | 'desc' }[] {\n    return this.sort.orderBy\n  }\n\n  /**\n   * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\n   *\n   * The `ascending()` function refines this query in ascending order of the specified properties. If you specify more\n   * than one property, `ascending()` sorts the results in ascending order by each property in the order they are listed.\n   *\n   * You can sort the following types:\n   * - Number: Sorts numerically.\n   * - Date: Sorts by date and time.\n   * - String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   *\n   * If a property contains a number as a String, that value will be sorted alphabetically and not numerically.\n   * Items that do not have a value for the specified sort property are ranked lowest.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - The properties used in the sort.\n   * @requiredField fields\n   * @returns An object representing the refined query.\n   */\n  ascending(...fields: string[]): Self\n  ascending(fields: string[]): Self\n\n  ascending(...fields: any) {\n    return this.copy({ sort: this.sort.ascending(...fields) })\n  }\n\n  /**\n   * Adds a sort to a query or sort, sorting by the specified properties in descending order.\n   *\n   * The `descending()` function refines this query to sort in descending order of the specified properties. If you\n   * specify more than one property, descending() sorts the results in descending order by each property in the order\n   * they are listed.\n   *\n   * You can sort the following types:\n   *\n   * Number: Sorts numerically.\n   * - Date: Sorts by date and time.\n   * - String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   *\n   * If a property contains a number as a String, that value will be sorted alphabetically and not numerically. Items\n   * that do not have a value for the specified sort property are ranked lowest.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - The properties used in the sort.\n   * @requiredField fields\n   * @returns An object representing the refined query.\n   */\n  descending(...fields: string[]): Self\n  descending(fields: string[]): Self\n\n  descending(...fields: any) {\n    return this.copy({ sort: this.sort.descending(...fields) })\n  }\n}\n"],"mappings":"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","ignoreList":[]}