"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.ApiClient = void 0;
exports.apiRequestInterceptor = apiRequestInterceptor;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("../utils");
var _errors = require("../errors");
var _errors2 = require("./errors");
const SUPPORTS_GET_METHOD = {
  'com.wixpress.cloud.data.api.data.DataItemService.QueryDataItems': true
};
function apiRequestInterceptor(allowGet) {
  return request => {
    const preferGet = allowGet && SUPPORTS_GET_METHOD[request.methodFqn ?? ''];
    const data = (0, _utils.encode)(request.data);
    if (preferGet) {
      // https://github.com/wix-private/server-infra/tree/master/framework/grpc/rest#complex-requests-messages-with-get-mappings
      const url = `${request.url}?.r=${(0, _utils.base64url)(data)}`;
      if (url.length <= 2048) {
        return {
          ...request,
          method: 'GET',
          url,
          data: undefined
        };
      }
    }
    return {
      ...request,
      data
    };
  };
}
class ApiClient {
  constructor(clientFactory, allowGet) {
    (0, _defineProperty2.default)(this, "httpApiClient", void 0);
    this.httpApiClient = clientFactory(apiRequestInterceptor(allowGet));
  }
  async getDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.getDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async insertDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.insertDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async saveDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.saveDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async updateDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.updateDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async patchDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.patchDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkPatchDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkPatchDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async removeDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.removeDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async countDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.countDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async queryDistinctValues(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.queryDistinctValues(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async queryDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.queryDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async aggregateDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.aggregateDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkInsertDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkInsertDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkUpdateDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkUpdateDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkSaveDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkSaveDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkRemoveDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkRemoveDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async queryReferencedDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.queryReferencedDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkInsertDataItemReferences(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkInsertDataItemReferences(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async replaceDataItemReferences(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.replaceDataItemReferences(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async bulkRemoveDataItemReferences(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.bulkRemoveDataItemReferences(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async isReferencedDataItem(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.isReferencedDataItem(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async truncateDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.truncateDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async searchDataItems(r) {
    return this.withErrorHandling(async () => {
      const response = await this.httpApiClient.searchDataItems(r);
      return (0, _utils.decode)(response.data);
    });
  }
  async withErrorHandling(call) {
    try {
      return await call();
    } catch (error) {
      if ((0, _errors2.isHttpError)(error)) {
        var _error$response, _error$response2;
        if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 413) {
          throw (0, _errors.wixDataError)(_errors.messages.payloadIsTooLarge(), 'WDE0109');
        }
        const parsedError = (0, _errors2.parseError)((_error$response2 = error.response) == null ? void 0 : _error$response2.data);
        if (parsedError) {
          throw parsedError;
        }
      }
      throw (0, _errors.wixDataError)(_errors.messages.internalError('Unknown error.'), _errors.codes.UnknownError);
    }
  }
}
exports.ApiClient = ApiClient;
//# sourceMappingURL=ApiClient.js.map