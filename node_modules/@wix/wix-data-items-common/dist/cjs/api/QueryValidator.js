"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.QueryValidator = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("../utils");
var _errors = require("../errors");
const MAX_SAFE_INTEGER = 9007199254740991;
class QueryValidator extends _errors.AggregatingValidator {
  constructor(operatorName, previousInvalidArguments) {
    super(previousInvalidArguments);
    (0, _defineProperty2.default)(this, "operatorName", void 0);
    this.operatorName = operatorName;
  }
  _isNumber(specifier, operand) {
    return this.addValidation(() => (0, _utils.isNumber)(operand), () => _errors.messages.queryValidations.isNumber(this.operatorName, specifier, operand));
  }
  isPositiveNumber(operand) {
    return this._isNumber('positive', operand).addValidation(() => !Number.isNaN(operand) && operand > 0, () => _errors.messages.queryValidations.isPositiveNumber(this.operatorName, operand));
  }
  isNonNegativeNumber(operand) {
    return this._isNumber('non-negative', operand).addValidation(() => !Number.isNaN(operand) && operand >= 0, () => _errors.messages.queryValidations.isNonNegativeNumber(this.operatorName, operand));
  }
  isInteger(operand) {
    return this.addValidation(() => !Number.isNaN(operand) && Number.isFinite(operand) && Number.isInteger(operand) && operand < MAX_SAFE_INTEGER && operand > -MAX_SAFE_INTEGER, () => _errors.messages.queryValidations.isInteger(this.operatorName, operand));
  }
  notGreaterThan(operand, value) {
    return this.addValidation(() => operand <= value, () => _errors.messages.queryValidations.notGreaterThan(this.operatorName, operand, value));
  }
  nonEmptyString(operand) {
    return this.addValidation(() => typeof operand === 'string' && operand.length > 0, () => _errors.messages.queryValidations.isNonEmptyString(this.operatorName));
  }
}
exports.QueryValidator = QueryValidator;
//# sourceMappingURL=QueryValidator.js.map