{"version":3,"names":["_utils","require","_errors","MAX_SAFE_INTEGER","QueryValidator","AggregatingValidator","constructor","operatorName","previousInvalidArguments","_defineProperty2","default","_isNumber","specifier","operand","addValidation","isNumber","messages","queryValidations","isPositiveNumber","Number","isNaN","isNonNegativeNumber","isInteger","isFinite","notGreaterThan","value","nonEmptyString","length","isNonEmptyString","exports"],"sources":["../../../src/api/QueryValidator.ts"],"sourcesContent":["import { isNumber } from '../utils'\nimport { AggregatingValidator, messages } from '../errors'\n\nconst MAX_SAFE_INTEGER = 9007199254740991\n\nexport class QueryValidator extends AggregatingValidator {\n  operatorName: any\n\n  constructor(operatorName: string, previousInvalidArguments: string[]) {\n    super(previousInvalidArguments)\n    this.operatorName = operatorName\n  }\n\n  _isNumber(specifier: string, operand: any) {\n    return this.addValidation(\n      () => isNumber(operand),\n      () =>\n        messages.queryValidations.isNumber(\n          this.operatorName,\n          specifier,\n          operand\n        )\n    )\n  }\n\n  isPositiveNumber(operand: number) {\n    return this._isNumber('positive', operand).addValidation(\n      () => !Number.isNaN(operand) && operand > 0,\n      () =>\n        messages.queryValidations.isPositiveNumber(this.operatorName, operand)\n    )\n  }\n\n  isNonNegativeNumber(operand: number) {\n    return this._isNumber('non-negative', operand).addValidation(\n      () => !Number.isNaN(operand) && operand >= 0,\n      () =>\n        messages.queryValidations.isNonNegativeNumber(\n          this.operatorName,\n          operand\n        )\n    )\n  }\n\n  isInteger(operand: number) {\n    return this.addValidation(\n      () =>\n        !Number.isNaN(operand) &&\n        Number.isFinite(operand) &&\n        Number.isInteger(operand) &&\n        operand < MAX_SAFE_INTEGER &&\n        operand > -MAX_SAFE_INTEGER,\n      () => messages.queryValidations.isInteger(this.operatorName, operand)\n    )\n  }\n\n  notGreaterThan(operand: number, value: number) {\n    return this.addValidation(\n      () => operand <= value,\n      () =>\n        messages.queryValidations.notGreaterThan(\n          this.operatorName,\n          operand,\n          value\n        )\n    )\n  }\n\n  nonEmptyString(operand: any) {\n    return this.addValidation(\n      () => typeof operand === 'string' && operand.length > 0,\n      () => messages.queryValidations.isNonEmptyString(this.operatorName)\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA,MAAME,gBAAgB,GAAG,gBAAgB;AAElC,MAAMC,cAAc,SAASC,4BAAoB,CAAC;EAGvDC,WAAWA,CAACC,YAAoB,EAAEC,wBAAkC,EAAE;IACpE,KAAK,CAACA,wBAAwB,CAAC;IAAA,IAAAC,gBAAA,CAAAC,OAAA;IAC/B,IAAI,CAACH,YAAY,GAAGA,YAAY;EAClC;EAEAI,SAASA,CAACC,SAAiB,EAAEC,OAAY,EAAE;IACzC,OAAO,IAAI,CAACC,aAAa,CACvB,MAAM,IAAAC,eAAQ,EAACF,OAAO,CAAC,EACvB,MACEG,gBAAQ,CAACC,gBAAgB,CAACF,QAAQ,CAChC,IAAI,CAACR,YAAY,EACjBK,SAAS,EACTC,OACF,CACJ,CAAC;EACH;EAEAK,gBAAgBA,CAACL,OAAe,EAAE;IAChC,OAAO,IAAI,CAACF,SAAS,CAAC,UAAU,EAAEE,OAAO,CAAC,CAACC,aAAa,CACtD,MAAM,CAACK,MAAM,CAACC,KAAK,CAACP,OAAO,CAAC,IAAIA,OAAO,GAAG,CAAC,EAC3C,MACEG,gBAAQ,CAACC,gBAAgB,CAACC,gBAAgB,CAAC,IAAI,CAACX,YAAY,EAAEM,OAAO,CACzE,CAAC;EACH;EAEAQ,mBAAmBA,CAACR,OAAe,EAAE;IACnC,OAAO,IAAI,CAACF,SAAS,CAAC,cAAc,EAAEE,OAAO,CAAC,CAACC,aAAa,CAC1D,MAAM,CAACK,MAAM,CAACC,KAAK,CAACP,OAAO,CAAC,IAAIA,OAAO,IAAI,CAAC,EAC5C,MACEG,gBAAQ,CAACC,gBAAgB,CAACI,mBAAmB,CAC3C,IAAI,CAACd,YAAY,EACjBM,OACF,CACJ,CAAC;EACH;EAEAS,SAASA,CAACT,OAAe,EAAE;IACzB,OAAO,IAAI,CAACC,aAAa,CACvB,MACE,CAACK,MAAM,CAACC,KAAK,CAACP,OAAO,CAAC,IACtBM,MAAM,CAACI,QAAQ,CAACV,OAAO,CAAC,IACxBM,MAAM,CAACG,SAAS,CAACT,OAAO,CAAC,IACzBA,OAAO,GAAGV,gBAAgB,IAC1BU,OAAO,GAAG,CAACV,gBAAgB,EAC7B,MAAMa,gBAAQ,CAACC,gBAAgB,CAACK,SAAS,CAAC,IAAI,CAACf,YAAY,EAAEM,OAAO,CACtE,CAAC;EACH;EAEAW,cAAcA,CAACX,OAAe,EAAEY,KAAa,EAAE;IAC7C,OAAO,IAAI,CAACX,aAAa,CACvB,MAAMD,OAAO,IAAIY,KAAK,EACtB,MACET,gBAAQ,CAACC,gBAAgB,CAACO,cAAc,CACtC,IAAI,CAACjB,YAAY,EACjBM,OAAO,EACPY,KACF,CACJ,CAAC;EACH;EAEAC,cAAcA,CAACb,OAAY,EAAE;IAC3B,OAAO,IAAI,CAACC,aAAa,CACvB,MAAM,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACc,MAAM,GAAG,CAAC,EACvD,MAAMX,gBAAQ,CAACC,gBAAgB,CAACW,gBAAgB,CAAC,IAAI,CAACrB,YAAY,CACpE,CAAC;EACH;AACF;AAACsB,OAAA,CAAAzB,cAAA,GAAAA,cAAA","ignoreList":[]}