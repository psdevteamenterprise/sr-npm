{"version":3,"names":[],"sources":["../../../src/api/WixDataQuery.ts"],"sourcesContent":["import { WixDataQueryOptions, WixDataReadOptions } from './types'\nimport { WixDataResult } from './WixDataResult'\nimport { WixDataFilter } from './WixDataFilter'\n\n/**\n * @builder\n */\nexport interface WixDataQuery {\n  /**\n   * Adds a sort to a query or sort, sorting by the specified properties in descending order.\n   *\n   * The `descending()` method refines this query to sort in descending order of the specified properties. If you\n   * specify more than one property, descending() sorts the results in descending order by each property in the order\n   * they are listed.\n   *\n   * You can sort the following types:\n   *\n   * Number: Sorts numerically.\n   * - Date: Sorts by date and time.\n   * - String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   *\n   * If a property contains a number as a String, that value is sorted alphabetically and not numerically. Items\n   * that do not have a value for the specified sort property are ranked lowest.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Fields used in the sort.\n   * @requiredField fields\n   * @returns Refined query.\n   */\n  descending(...fields: string[]): WixDataQuery\n\n  descending(fields: string[]): WixDataQuery\n\n  descending(...fields: any): WixDataQuery\n\n  /**\n   * Adds a sort to a query or sort, sorting by the specified properties in ascending order.\n   *\n   * The `ascending()` method refines this query in ascending order of the specified properties. If you specify more\n   * than one property, `ascending()` sorts the results in ascending order by each property in the order they are listed.\n   *\n   * You can sort the following types:\n   * - Number: Sorts numerically.\n   * - Date: Sorts by date and time.\n   * - String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   *\n   * If a property contains a number as a String, that value is sorted alphabetically and not numerically.\n   * Items that do not have a value for the specified sort property are ranked lowest.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Fields used in the sort.\n   * @requiredField fields\n   * @returns Refined query.\n   */\n  ascending(...fields: string[]): WixDataQuery\n\n  ascending(fields: string[]): WixDataQuery\n\n  ascending(...fields: any): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value equals the specified value.\n   *\n   * The `eq()` method refines this query to only\n   * match items where Value of the specified property equals the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If `field` points to a collection field of type array, `eq()` includes the item\n   * as long as at least one array element matches the specified `value`.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns Refined query.\n   */\n  eq(field: string, value: any): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value does not equal the specified value.\n   *\n   * The `ne()` method refines this query to only\n   * match items where the value of the specified property does not equal the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type is considered not equal to the same number stored as a Number type.\n   *\n   * Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the `field` property is an array, `ne()` includes items\n   * in which none of the elements of the array match the specified `value`.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns Refined query.\n   */\n  ne(field: string, value: any): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value is greater than or equal to the specified\n   * value.\n   *\n   * The `ge()` method refines this query to only\n   * match items where the value of the specified property is greater than or\n   * equal to the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically,\n   *   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),\n   *   but `\"ABC\"` is not greater than or equal to `\"abc\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns Refined query.\n   */\n  ge(field: string, value: string | number | Date): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value is greater than the specified value.\n   *\n   * The `gt()` method refines this query to only match\n   * items where the value of the specified property is greater than the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns An object with the query definition, based on the supplied parameters.\n   */\n  gt(field: string, value: string | number | Date): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value is less than or equal to the specified\n   * value.\n   *\n   * The `le()` method refines this query to only match\n   * items where the value of the specified property is less than or equal to the\n   * specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically,\n   *   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),\n   *   but `\"abc\"` is not less than or equal to `\"ABC\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns Refined query.\n   */\n  le(field: string, value: string | number | Date): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value is less than the specified value.\n   *\n   * The `lt()` method refines this query to only match\n   * items where the value of the specified property is less than the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns An object with the query definition, based on the supplied parameters.\n   */\n  lt(field: string, value: string | number | Date): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property has any value.\n   *\n   * The `isNotEmpty()` method refines this query to only match items where the\n   * value of the specified property is not `null` or `undefined`.\n   *\n   * If the property contains any value at all for a given item, including the\n   * empty string or an invalid value, that item will match the query.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field in which to check for a value.\n   * @requiredField field\n   * @returns Refined query.\n   */\n  isNotEmpty(field: string): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property does not exist or does not have any value.\n   *\n   * The `isEmpty()` method refines this query to only match items where the\n   * value of the specified property is `null` or `undefined` or the property does\n   * not exist.\n   *\n   * If the property contains any value at all for a given item, including the\n   * empty string or an invalid value, that item will match the query.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field in which to check for a value.\n   * @requiredField field\n   * @returns Refined query.\n   */\n  isEmpty(field: string): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value starts with a specified string.\n   *\n   * The `startsWith()` method refines this query to\n   * only match items where the value of the specified property starts with the\n   * defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts\n   * with `\"tex\"`.\n   *\n   * You can only use `startsWith()` with a property whose value is a String or Reference.\n   * When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the `value` parameter.\n   * @requiredField field\n   * @param value - String to look for at the beginning of the specified property value.\n   * @requiredField value\n   * @returns `WixDataQuery` object representing the refined query.\n   */\n  startsWith(field: string, value: string): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value ends with a specified string.\n   *\n   * The `endsWith()` method refines this query to only\n   * match items where the value of the specified property ends with the specified\n   * `string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends\n   * with `\"ext\"`.\n   *\n   * You can only use `endsWith()` with a property whose value is a String or Reference.\n   * When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the string.\n   * @requiredField field\n   * @param value - String to look for at the end of the specified property value.\n   * @requiredField value\n   * @returns `WixDataQuery` object representing the refined query.\n   */\n  endsWith(field: string, value: string): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value contains a specified string.\n   *\n   * The `contains()` method refines this query to\n   * only match items where the value of the specified property contains the\n   * specified `string`. Matching with `contains()` is not case sensitive, so\n   * `\"text\"` does contain `\"Tex\"`.\n   *\n   * You can use `contains()` with a property whose value is a String or a Reference.\n   * For properties of type reference it is recommended that you use the [`eq()`](#eq)\n   * method instead of `contains()`. With properties that are References, `contains()`\n   * matches by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the string.\n   * @requiredField field\n   * @param value - The string to look for inside the specified property value.\n   * @requiredField value\n   * @returns Refined query.\n   */\n  contains(field: string, value: string): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value equals any of the specified `values`\n   * parameters.\n   *\n   * The `hasSome()` method refines this query to\n   * only match items where the value of the specified property equals any of\n   * the specified values.\n   *\n   * Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the specified property is an array, `hasSome()` will match\n   * if any of the elements of that array match any of the specified values.\n   *\n   * If the specified property contains multiple references, pass item IDs in the\n   * `value` property. In such a case, `hasSome()` will match if any of the\n   * multiple references match any of the specified ID values.\n   *\n   * You can specify a list of values to match by providing an array of\n   * String, Number, or Date types as the `value` parameters.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param values - Values to match.\n   * @requiredField values\n   * @returns Refined query.\n   */\n  hasSome(field: string, ...values: string[] | number[] | Date[]): WixDataQuery\n\n  /**\n   * Overload for `hasSome()`\n   * @public\n   * @documentationMaturity preview\n   */\n  hasSome(field: string, values: string[] | number[] | Date[]): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property values equals all of the specified `value`\n   * parameters.\n   *\n   * The `hasAll()` method refines this query to\n   * only match items where the value of the specified property equals all of\n   * the specified values.\n   *\n   * Matching strings with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the specified property is an array, `hasAll()` will match\n   * if there is a match in the elements of that array for all of the specified\n   * values.\n   *\n   * You can specify a list of values to match by providing an array of\n   * String, Number, or Date types as the `value` parameters.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param values - Values to match.\n   * @requiredField values\n   * @returns Refined query.\n   */\n  hasAll(field: string, ...values: string[] | number[] | Date[]): WixDataQuery\n\n  /**\n   * Overload for `hasAll()`\n   * @public\n   * @documentationMaturity preview\n   */\n  hasAll(field: string, values: string[] | number[] | Date[]): WixDataQuery\n\n  /**\n   * Adds an `or` condition to the query or filter.\n   *\n   * The `or()` method adds an inclusive `or` condition to this filter. A query or filter\n   * with an `or` returns all the items that match the query or filter as defined up to\n   * the `or` method, the items that match the query or filter passed to the `or`\n   * method, and the items that match both.\n   *\n   * The `or()` method is designed to work with 2 or more queries or filters. Used on its own, it returns all the items in a collection.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial filter as an `or` condition.\n   * @requiredField filter\n   * @returns Refined query.\n   */\n  or(filter: WixDataFilter): WixDataQuery\n\n  /**\n   * Adds an `and` condition to the query or filter.\n   *\n   * The `and()` method adds an and condition to this query. A query or filter with an `and` returns all the items\n   * that match the query or filter as defined up to the `and` method and also match the query or filter passed to\n   * the `and` method.\n   *\n   * Note that when chaining multiple `WixDataFilter` methods to a query an and condition is assumed. In such cases,\n   * you do not need to add a call to the `and()` method. For example, this query returns results where status is\n   * active **and** age is greater than 25.\n   * ```js\n   * items.query(\"myCollection\").eq(\"status\", \"active\").gt(\"age\", 25);\n   * ```\n   *\n   * The `and()` method is needed when performing compound queries. For example, the final query in this set of\n   * queries returns results where status is either pending or rejected **and** age is either less than 25 or greater\n   * than 65.\n   * ```js\n   * let statusQuery = items\n   *   .query(\"myCollection\")\n   *   .eq(\"status\", \"pending\")\n   *   .or(items.filter().eq(\"status\", \"rejected\"));\n   *\n   * let ageQuery = items\n   *   .filter()\n   *   .lt(\"age\", 25)\n   *   .or(items.filter().gt(\"age\", 65));\n   *\n   * let statusAndAgeQuery = statusQuery.and(ageQuery);\n   * ```\n   *\n   * The `and()` method is designed to work with 2 or more queries or filters. When used on its own, it returns all the items in a collection.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial query as an `and` condition.\n   * @requiredField filter\n   * @returns Refined query.\n   */\n  and(filter: WixDataFilter): WixDataQuery\n\n  /**\n   * Adds a `not` condition to the query or filter.\n   *\n   * The `not()` method adds a `not` condition to this query. A query with a `not`\n   * returns all the items that match the query as defined up to the `not`\n   * method, but don't match the filter passed to the `not` method.\n   *\n   * If the query only contains a `not()` method, it returns all the items\n   * that don't match the filter defined by the `not` method.\n   *\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial filter as a `not` condition.\n   * @requiredField filter\n   * @returns Refined query.\n   */\n  not(filter: WixDataFilter): WixDataQuery\n\n  /**\n   * Refines a query to match items whose specified property value is within a specified range.\n   *\n   * The `between()` method refines this query to only match items where the value of the specified property is\n   * greater than or equal to `rangeStart` and less than `rangeEnd`.\n   *\n   * It only matches values of the same type. For example, a number value stored as a String type does not match the\n   * same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared alphabetically and not numerically. Items\n   * that do not have a value for the specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so\n   *   - `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.\n   *   - `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with rangeStart and rangeEnd.\n   * @requiredField field\n   * @param rangeStart - Starting value of the range to match.\n   * @requiredField rangeStart\n   * @param rangeEnd - Ending value of the range to match.\n   * @requiredField rangeEnd\n   * @returns Refined query.\n   */\n  between(\n    field: string,\n    rangeStart: string | number | Date,\n    rangeEnd: string | number | Date\n  ): WixDataQuery\n\n  /**\n   * Returns the number of items that match the query.\n   *\n   * The `count()` method returns a Promise that resolves to the number of\n   * items that match the query. The Promise is rejected if `count()` is called\n   * with incorrect permissions or if any of the methods used to refine the\n   * query is invalid.\n   *\n   * Calling the `count()` method triggers the [`beforeCount()`](https://dev.wix.com/docs/velo/api-reference/wix-data/hooks/before-count) and [`afterCount()`](https://dev.wix.com/docs/velo/api-reference/wix-data/hooks/after-count) hooks if they have been defined.\n   *\n   * Use the `options` parameter to run `count()` without checking for permissions\n   * or without its registered hooks.\n   *\n   * Any method that does not filter query results (e.g., [`ascending()`](#ascending))\n   * does not affect the result of `count()`.\n   *\n   * If you build a query and don't refine it with any `WixDataQuery` methods,\n   * `count()` returns the total number of items in the collection.\n   *\n   * > **Note**: You can also retrieve the number of query results by calling `find()` and setting the `options.returnTotalCount` property to `true`.\n   *\n   * @public\n   * @documentationMaturity preview\n   * @param options - Options to use when processing this operation.\n   * @returns Number of items that match the query.\n   */\n  count(options?: WixDataReadOptions): Promise<number>\n\n  /**\n   * Returns the distinct values that match the query, without duplicates.\n   *\n   * The `distinct()` method returns a Promise that resolves to:\n   * - The distinct values found in the specified field when running the query.\n   * - Additional information about the results, such as the number of values that match the query.\n   *\n   * Unlike `find()`, which returns all item objects that match the query, `distinct()` returns matching field values,\n   * and eliminates duplicate field values from the query result. You cannot use `find()` and `distinct()` together.\n   *\n   * For an item to be resolved as distinct, only the specified field must be distinct. Other fields for that item in\n   * the collection are not evaluated when resolving the promise.\n   *\n   * The Promise is rejected if `distinct()` is called with incorrect permissions or if any of the\n   * methods used to refine the query is invalid.\n   *\n   * >**Note:** Only site visitors with [Data Read](https://support.wix.com/en/article/collection-permissions-an-overview#permissions) permissions can retrieve and view data. You can override the permissions by calling this method with [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions).\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared for distinct values.\n   * @requiredField field\n   * @param options - Configuration options for building the query.\n   * @returns Promise that resolves to the results of the query.\n   */\n  distinct(\n    field: string,\n    options?: WixDataQueryOptions\n  ): Promise<WixDataResult<any>>\n\n  /**\n   * Returns the items that match the query.\n   *\n   * The `find()` method returns a Promise that resolves to the results found\n   * by the query and some information about the results. The Promise is\n   * rejected if `find()` is called with incorrect permissions or if any of the\n   * methods used to refine the query is invalid.\n   *\n   * Calling the `find()` method triggers the [`beforeQuery()`](https://dev.wix.com/docs/velo/api-reference/wix-data/hooks/before-query) and [`afterQuery()`](https://dev.wix.com/docs/velo/api-reference/wix-data/hooks/after-query) hooks if they have been defined.\n   *\n   * > **Note:**\n   * > Calling `find()` triggers hooks for the specified collection only. It doesn't trigger hooks for referenced collections.\n   *\n   * Use the `options` parameter to override default preferences:\n   * - Ensure the most up-to-date data is retrieved with `consistentRead`.\n   * - Prevent hooks from running with `suppressHooks`.\n   * - Get a count of all the items that match the query by setting `returnTotalCount` to `true`.\n   *\n   * If you build a query and don't refine it with any `wixDataQuery` methods,\n   * `find()` returns the entire collection.\n   * @public\n   * @documentationMaturity preview\n   * @param options - Configuration options for building the query.\n   * @returns Promise that resolves to the results of the query.\n   */\n  find(options?: WixDataQueryOptions): Promise<WixDataResult>\n\n  /**\n   * Lists the fields to return in a query's results.\n   *\n   * The `fields()` method returns only the specified fields in the query's results.\n   *\n   * You can use `include()` in conjunction with `fields()` to get referenced items.\n   *\n   * When `fields()` receives an empty or invalid property, the query behaves as follows:\n   * - When no fields are specified, the query returns all fields.\n   * - When multiple fields are specified but some are invalid, invalid fields are ignored and valid fields are returned.\n   * - When only invalid fields are specified, only the default `_id` field is returned.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Properties to return.\n   * @requiredField fields\n   * @returns A `WixDataQuery` object representing the query.\n   */\n  fields(...fields: string[]): WixDataQuery\n\n  /**\n   * Limits the number of items the query returns.\n   *\n   * The `limit()` method defines the number of results a query returns in each\n   * page. Only one page of results is retrieved at a time. The `next()`\n   * and `prev()` methods are used to\n   * navigate the pages of a query result.\n   *\n   * By default, `limit` is set to `50`.\n   *\n   * The maximum value that `limit()` can accept is `1000`.\n   *\n   * Note that for some [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), the maximum value `limit()` can accept is\n   * less than `1000`. For example, the maximum limit for the Wix `Stores/Product` collection is 100.\n   * @public\n   * @documentationMaturity preview\n   * @param limitNumber - Number of items to return, which is also the `pageSize` of the results object.\n   * @requiredField limitNumber\n   * @returns `WixDataQuery` object representing the refined query.\n   */\n  limit(limitNumber: number): WixDataQuery\n\n  /**\n   * Sets the number of items to skip before returning query results.\n   *\n   * The `skip()` method defines the number of results to skip in the query\n   * results before returning new query results.\n   *\n   * For example, if you query a collection and 50 items match your query, but\n   * you set `skip` to 10, the results returned will skip the first 10 items\n   * that match and return the 11th through 50th items.\n   *\n   * By default, `skip` is set to 0.\n   * @public\n   * @documentationMaturity preview\n   * @param skipCount - Number of items to skip in the query results before returning the results.\n   * @requiredField skipCount\n   * @returns `WixDataQuery` object representing the refined query.\n   */\n  skip(skipCount: number): WixDataQuery\n\n  /**\n   * Includes referenced items for the specified properties in a query's results.\n   *\n   * The `include()` method refines a query so that the items returned in the\n   * query's results include the full referenced items for the specified properties.\n   *\n   * For example, suppose you have a **books** collection with an **author**\n   * field that references an **authors** collection. Querying the **books**\n   * collection with an `include(\"author\")` returns the relevant book items\n   * and each item will include the full referenced author item in the book's\n   * `author` property.\n   *\n   * When querying a collection that contains a reference field without using the\n   * `include()` method:\n   * - Single reference field: returned items contain only the ID of the\n   *   referenced item, and not the full referenced items.\n   * - Multiple reference field: returned items do not contain the multiple\n   *   reference field at all.\n   *\n   *  When including a property with multiple references, the following limitations\n   *  apply:\n   *  - Only one property with multiple references can be included.\n   *  - The query will return an error if more than 50 items are returned, regardless\n   *    of any query limit set using the `limit()` method.\n   *  - Each returned item can include up to 50 referenced items. If there are more\n   *    than 50 referenced items, only 50 are returned when the query is run\n   *    and the `partialIncludes`\n   *    property of the returned `WixDataQueryResult`\n   *    is `true`. To retrieve more than 50 referenced items, use the\n   *    `queryReferenced()` method.\n   *\n   * For a discussion of when to use the similar `queryReferenced()`\n   * method and when to use `include()`, see [Querying Items that Reference Other Items](https://support.wix.com/en/article/including-referenced-data-when-filtering).\n   *\n   * > **Note:** The `include()` method is not supported for [single-item collections](https://support.wix.com/en/article/cms-adding-and-setting-up-a-single-item-collection).\n   *\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Fields for which to include referenced items.\n   * @requiredField fields\n   * @returns A `WixDataQuery` object representing the query.\n   */\n  include(...fields: string[]): WixDataQuery\n\n  /**\n   * Overload for `include()`\n   * @public\n   * @documentationMaturity preview\n   */\n  include(field: string, limit?: number): WixDataQuery\n\n  /**\n   * Overload for `include()`\n   * @public\n   * @documentationMaturity preview\n   */\n  include(field1: string, field2: string, limit?: number): WixDataQuery\n\n  /**\n   * Overload for `include()`\n   * @public\n   * @documentationMaturity preview\n   */\n  include(\n    field1: string,\n    field2: string,\n    field3: string,\n    limit?: number\n  ): WixDataQuery\n\n  /**\n   * Overload for `include()`\n   * @public\n   * @documentationMaturity preview\n   */\n  include(\n    field1: string,\n    field2: string,\n    field3: string,\n    field4: string,\n    limit?: number\n  ): WixDataQuery\n\n  /**\n   * Overload for `include()`\n   * @public\n   * @documentationMaturity preview\n   */\n  include(\n    field1: string,\n    field2: string,\n    field3: string,\n    field4: string,\n    field5: string,\n    limit?: number\n  ): WixDataQuery\n\n  /**\n   * Overload for `include()`\n   * @public\n   * @documentationMaturity preview\n   */\n  include(...fieldNamesAndLimit: [...string[], number]): WixDataQuery\n}\n"],"mappings":"","ignoreList":[]}