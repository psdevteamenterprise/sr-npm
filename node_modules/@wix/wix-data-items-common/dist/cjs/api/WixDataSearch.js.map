{"version":3,"names":[],"sources":["../../../src/api/WixDataSearch.ts"],"sourcesContent":["import { WixDataResult } from './WixDataResult'\nimport { WixDataReadOptions } from './types'\nimport { WixDataFilter } from './WixDataFilter'\n\n/**\n * @builder\n * Represents a search operation to be performed on a WixData collection.\n * Allows for building complex search requests by specifying search expressions,\n * modes, filters, sorting, and pagination.\n */\nexport interface WixDataSearch {\n  /**\n   * Sets the text to search for in the collection.\n   * @param queryText The text to search for.\n   * @returns The current WixDataSearch instance for chaining.\n   */\n  expression(queryText: string): WixDataSearch\n\n  /**\n   * Sets the search mode to fuzzy.\n   * Fuzzy search allows for approximate matches, while exact search requires precise matches.\n   * @returns The current WixDataSearch instance for chaining.\n   */\n  fuzzy(): WixDataSearch\n\n  /**\n   * Sets the search mode to \"AND\".\n   * When in \"AND\" mode, all specified search terms or filter conditions must be met for an item to be included in the results.\n   * @returns The current WixDataSearch instance for chaining.\n   */\n  andMode(): WixDataSearch\n\n  /**\n   * Sets the search mode to \"OR\".\n   * When in \"OR\" mode, an item is included in the results if it meets any of the specified search terms or filter conditions.\n   * @returns The current WixDataSearch instance for chaining.\n   */\n  orMode(): WixDataSearch\n\n  /**\n   * Performs a full-text search across the collection based on the configured expression, modes, and filters.\n   * @param options - Options for the search operation, such as read consistency.\n   * @returns A Promise that resolves to a WixDataResult containing the matching items and search metadata.\n   */\n  run(options?: WixDataReadOptions): Promise<WixDataResult>\n\n  /**\n   * Adds a sort to a search, sorting by the specified properties in descending order.\n   *\n   * The `descending()` method refines this search to sort in descending order of the specified properties. If you\n   * specify more than one property, descending() sorts the results in descending order by each property in the order\n   * they are listed.\n   *\n   * You can sort the following types:\n   *\n   * - Number: Sorts numerically.\n   * - Date: Sorts by date and time.\n   * - String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   *\n   * If a property contains a number as a String, that value is sorted alphabetically and not numerically. Items\n   * that do not have a value for the specified sort property are ranked lowest.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Fields used in the sort.\n   * @requiredField fields\n   * @returns The current WixDataSearch instance, refined with the specified sort order.\n   */\n  descending(...fields: string[]): WixDataSearch\n  /**\n   * @param fields - An array of fields to sort by in descending order.\n   * @returns The current WixDataSearch instance, refined with the specified sort order.\n   */\n  descending(fields: string[]): WixDataSearch\n  /**\n   * @param fields - Fields used in the sort.\n   * @returns The current WixDataSearch instance, refined with the specified sort order.\n   */\n  descending(...fields: any): WixDataSearch\n\n  /**\n   * Adds a sort to a search, sorting by the specified properties in ascending order.\n   *\n   * The `ascending()` method refines this search in ascending order of the specified properties. If you specify more\n   * than one property, `ascending()` sorts the results in ascending order by each property in the order they are listed.\n   *\n   * You can sort the following types:\n   * - Number: Sorts numerically.\n   * - Date: Sorts by date and time.\n   * - String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   *\n   * If a property contains a number as a String, that value is sorted alphabetically and not numerically.\n   * Items that do not have a value for the specified sort property are ranked lowest.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Fields used in the sort.\n   * @requiredField fields\n   * @returns The current WixDataSearch instance, refined with the specified sort order.\n   */\n  ascending(...fields: string[]): WixDataSearch\n  /**\n   * @param fields - An array of fields to sort by in ascending order.\n   * @returns The current WixDataSearch instance, refined with the specified sort order.\n   */\n  ascending(fields: string[]): WixDataSearch\n  /**\n   * @param fields - Fields used in the sort.\n   * @returns The current WixDataSearch instance, refined with the specified sort order.\n   */\n  ascending(...fields: any): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value equals the specified value.\n   *\n   * The `eq()` method refines this search to only\n   * match items where the value of the specified property equals the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If `field` points to a collection field of type array, `eq()` includes the item\n   * as long as at least one array element matches the specified `value`.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to match.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the equality filter.\n   */\n  eq(field: string, value: any): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value does not equal the specified value.\n   *\n   * The `ne()` method refines this search to only\n   * match items where the value of the specified property does not equal the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type is considered not equal to the same number stored as a Number type.\n   *\n   * Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the `field` property is an array, `ne()` includes items\n   * in which none of the elements of the array match the specified `value`.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to not match.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the inequality filter.\n   */\n  ne(field: string, value: any): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value is greater than or equal to the specified\n   * value.\n   *\n   * The `ge()` method refines this search to only\n   * match items where the value of the specified property is greater than or\n   * equal to the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically,\n   *   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),\n   *   but `\"ABC\"` is not greater than or equal to `\"abc\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to compare against.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the 'greater than or equal' filter.\n   */\n  ge(field: string, value: string | number | Date): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value is greater than the specified value.\n   *\n   * The `gt()` method refines this search to only match\n   * items where the value of the specified property is greater than the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to compare against.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the 'greater than' filter.\n   */\n  gt(field: string, value: string | number | Date): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value is less than or equal to the specified\n   * value.\n   *\n   * The `le()` method refines this search to only match\n   * items where the value of the specified property is less than or equal to the\n   * specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically,\n   *   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),\n   *   but `\"abc\"` is not less than or equal to `\"ABC\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to compare against.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the 'less than or equal' filter.\n   */\n  le(field: string, value: string | number | Date): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value is less than the specified value.\n   *\n   * The `lt()` method refines this search to only match\n   * items where the value of the specified property is less than the specified `value`.\n   *\n   * It only matches values of the same type. For example, a number value stored\n   * as a String type does not match the same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared\n   * alphabetically and not numerically. Items that do not have a value for the\n   * specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.\n   * - Reference: Compares by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param value - Value to compare against.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the 'less than' filter.\n   */\n  lt(field: string, value: string | number | Date): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property has any value (is not null or undefined).\n   *\n   * The `isNotEmpty()` method refines this search to only match items where the\n   * value of the specified property is not `null` or `undefined`.\n   *\n   * If the property contains any value at all for a given item, including the\n   * empty string or an invalid value, that item will match the search filter.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field in which to check for a non-empty value.\n   * @requiredField field\n   * @returns The current WixDataSearch instance, refined with the 'is not empty' filter.\n   */\n  isNotEmpty(field: string): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property does not exist or does not have any value (is null or undefined).\n   *\n   * The `isEmpty()` method refines this search to only match items where the\n   * value of the specified property is `null` or `undefined` or the property does\n   * not exist.\n   *\n   * If the property contains any value at all for a given item, including the\n   * empty string or an invalid value, that item will not match the search filter.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field in which to check for an empty or non-existent value.\n   * @requiredField field\n   * @returns The current WixDataSearch instance, refined with the 'is empty' filter.\n   */\n  isEmpty(field: string): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value starts with a specified string.\n   *\n   * The `startsWith()` method refines this search to\n   * only match items where the value of the specified property starts with the\n   * defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts\n   * with `\"tex\"`.\n   *\n   * You can only use `startsWith()` with a property whose value is a String or Reference.\n   * When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the `value` parameter.\n   * @requiredField field\n   * @param value - String to look for at the beginning of the specified property value.\n   * @requiredField value\n   * @returns The current `WixDataSearch` instance, refined with the 'starts with' filter.\n   */\n  startsWith(field: string, value: string): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value ends with a specified string.\n   *\n   * The `endsWith()` method refines this search to only\n   * match items where the value of the specified property ends with the specified\n   * `string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends\n   * with `\"ext\"`.\n   *\n   * You can only use `endsWith()` with a property whose value is a String or Reference.\n   * When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the string.\n   * @requiredField field\n   * @param value - String to look for at the end of the specified property value.\n   * @requiredField value\n   * @returns The current `WixDataSearch` instance, refined with the 'ends with' filter.\n   */\n  endsWith(field: string, value: string): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value contains a specified string.\n   *\n   * The `contains()` method refines this search to\n   * only match items where the value of the specified property contains the\n   * specified `string`. Matching with `contains()` is not case sensitive, so\n   * `\"text\"` does contain `\"Tex\"`.\n   *\n   * You can use `contains()` with a property whose value is a String or a Reference.\n   * For properties of type reference it is recommended that you use the [`eq()`](#eq)\n   * method instead of `contains()`. With properties that are References, `contains()`\n   * matches by the ID of the referenced item as a String.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the string.\n   * @requiredField field\n   * @param value - The string to look for inside the specified property value.\n   * @requiredField value\n   * @returns The current WixDataSearch instance, refined with the 'contains' filter.\n   */\n  contains(field: string, value: string): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value equals any of the specified `values`\n   * parameters.\n   *\n   * The `hasSome()` method refines this search to\n   * only match items where the value of the specified property equals any of\n   * the specified values.\n   *\n   * Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the specified property is an array, `hasSome()` will match\n   * if any of the elements of that array match any of the specified values.\n   *\n   * If the specified property contains multiple references, pass item IDs in the\n   * `value` property. In such a case, `hasSome()` will match if any of the\n   * multiple references match any of the specified ID values.\n   *\n   * You can specify a list of values to match by providing an array of\n   * String, Number, or Date types as the `value` parameters.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param values - Values to match.\n   * @requiredField values\n   * @returns The current WixDataSearch instance, refined with the 'has some' filter.\n   */\n  hasSome(field: string, ...values: string[] | number[] | Date[]): WixDataSearch\n\n  /**\n   * Overload for `hasSome()`. Refines a search to match items whose specified property value equals any of the specified values.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the provided values.\n   * @requiredField field\n   * @param values - An array of values to match.\n   * @requiredField values\n   * @returns The current WixDataSearch instance, refined with the 'has some' filter.\n   */\n  hasSome(field: string, values: string[] | number[] | Date[]): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property values equals all of the specified `value`\n   * parameters.\n   *\n   * The `hasAll()` method refines this search to\n   * only match items where the value of the specified property equals all of\n   * the specified values.\n   *\n   * Matching strings with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\n   *\n   * If the value of the specified property is an array, `hasAll()` will match\n   * if there is a match in the elements of that array for all of the specified\n   * values.\n   *\n   * You can specify a list of values to match by providing an array of\n   * String, Number, or Date types as the `value` parameters.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with `value`.\n   * @requiredField field\n   * @param values - Values to match. All specified values must be present.\n   * @requiredField values\n   * @returns The current WixDataSearch instance, refined with the 'has all' filter.\n   */\n  hasAll(field: string, ...values: string[] | number[] | Date[]): WixDataSearch\n\n  /**\n   * Overload for `hasAll()`. Refines a search to match items whose specified property values equals all of the specified values.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with the provided values.\n   * @requiredField field\n   * @param values - An array of values to match. All values in the array must be present.\n   * @requiredField values\n   * @returns The current WixDataSearch instance, refined with the 'has all' filter.\n   */\n  hasAll(field: string, values: string[] | number[] | Date[]): WixDataSearch\n\n  /**\n   * Adds an `or` condition to the search filter.\n   *\n   * The `or()` method adds an inclusive `or` condition to this search filter. A search\n   * with an `or` returns all the items that match the filter as defined up to\n   * the `or` method, the items that match the filter passed to the `or`\n   * method, and the items that match both.\n   *\n   * The `or()` method is designed to work with 2 or more filters. Used on its own, it may not produce expected results.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial filter as an `or` condition.\n   * @requiredField filter\n   * @returns The current WixDataSearch instance, refined with the 'or' condition.\n   */\n  or(filter: WixDataFilter): WixDataSearch\n\n  /**\n   * Adds an `and` condition to the search filter.\n   *\n   * The `and()` method adds an `and` condition to this search filter. A search with an `and` returns all the items\n   * that match the filter as defined up to the `and` method and also match the filter passed to\n   * the `and` method.\n   *\n   * Note that when chaining multiple filter methods to a search, an `and` condition is often assumed by default.\n   * For example, this search returns results where status is active **and** age is greater than 25:\n   * ```javascript\n   * wixData.search(\"myCollection\").expression(\"some text\").eq(\"status\", \"active\").gt(\"age\", 25);\n   * ```\n   *\n   * The `and()` method is needed when performing compound filters. For example, the final search in this set of\n   * operations returns results where status is either pending or rejected **and** age is either less than 25 or greater\n   * than 65.\n   * ```javascript\n   * let statusFilter = wixData.filter().eq(\"status\", \"pending\").or(wixData.filter().eq(\"status\", \"rejected\"));\n   * let ageFilter = wixData.filter().lt(\"age\", 25).or(wixData.filter().gt(\"age\", 65));\n   *\n   * let finalSearch = wixData.search(\"myCollection\").expression(\"some text\").and(statusFilter).and(ageFilter);\n   * ```\n   *\n   * The `and()` method is designed to work with 2 or more filters.\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial search filter as an `and` condition.\n   * @requiredField filter\n   * @returns The current WixDataSearch instance, refined with the 'and' condition.\n   */\n  and(filter: WixDataFilter): WixDataSearch\n\n  /**\n   * Adds a `not` condition to the search filter.\n   *\n   * The `not()` method adds a `not` condition to this search filter. A search with a `not`\n   * returns all the items that match the filter as defined up to the `not`\n   * method, but don't match the filter passed to the `not` method.\n   *\n   * If the search filter only contains a `not()` method, it returns all the items\n   * that don't match the filter defined by the `not` method.\n   *\n   * @public\n   * @documentationMaturity preview\n   * @param filter - Filter to add to the initial filter as a `not` condition.\n   * @requiredField filter\n   * @returns The current WixDataSearch instance, refined with the 'not' condition.\n   */\n  not(filter: WixDataFilter): WixDataSearch\n\n  /**\n   * Refines a search to match items whose specified property value is within a specified range.\n   *\n   * The `between()` method refines this search to only match items where the value of the specified property is\n   * greater than or equal to `rangeStart` and less than `rangeEnd`.\n   *\n   * It only matches values of the same type. For example, a number value stored as a String type does not match the\n   * same number stored as a Number type.\n   *\n   * If a property contains a number as a String, that value is compared alphabetically and not numerically. Items\n   * that do not have a value for the specified property are ranked lowest.\n   *\n   * The following types of properties can be compared:\n   * - Number: Compares numerically.\n   * - Date: Compares JavaScript Date objects.\n   * - String: Compares lexicographically, so\n   *   - `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.\n   *   - `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field whose value is compared with rangeStart and rangeEnd.\n   * @requiredField field\n   * @param rangeStart - Starting value of the range to match (inclusive).\n   * @requiredField rangeStart\n   * @param rangeEnd - Ending value of the range to match (exclusive).\n   * @requiredField rangeEnd\n   * @returns The current WixDataSearch instance, refined with the 'between' filter.\n   */\n  between(\n    field: string,\n    rangeStart: string | number | Date,\n    rangeEnd: string | number | Date\n  ): WixDataSearch\n\n  /**\n   * Lists the fields to return in a search's results.\n   *\n   * The `fields()` method specifies which fields to return in the search results.\n   *\n   * You can use `include()` in conjunction with `fields()` to get referenced items.\n   *\n   * When `fields()` receives an empty or invalid property, the search behaves as follows:\n   * - When no fields are specified, the search returns all fields.\n   * - When multiple fields are specified but some are invalid, invalid fields are ignored and valid fields are returned.\n   * - When only invalid fields are specified, only the default `_id` field is returned.\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Properties to return.\n   * @requiredField fields\n   * @returns The current `WixDataSearch` instance, configured to return specified fields.\n   */\n  fields(...fields: string[]): WixDataSearch\n\n  /**\n   * Limits the number of items the search returns.\n   *\n   * The `limit()` method defines the number of results a search returns in each\n   * page. Only one page of results is retrieved at a time. The `next()`\n   * and `prev()` methods of the `WixDataResult` object are used to\n   * navigate the pages of a search result.\n   *\n   * By default, `limit` is set to `50`.\n   *\n   * The maximum value that `limit()` can accept is `1000`.\n   *\n   * Note that for some [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), the maximum value `limit()` can accept is\n   * less than `1000`. For example, the maximum limit for the Wix `Stores/Product` collection is 100.\n   * @public\n   * @documentationMaturity preview\n   * @param limitNumber - Number of items to return, which is also the `pageSize` of the results object.\n   * @requiredField limitNumber\n   * @returns The current `WixDataSearch` instance, refined with the specified limit.\n   */\n  limit(limitNumber: number): WixDataSearch\n\n  /**\n   * Sets the number of items to skip before returning search results.\n   *\n   * The `skip()` method defines the number of results to skip in the search\n   * results before returning new search results.\n   *\n   * For example, if your search matches 50 items, but\n   * you set `skip` to 10, the results returned will skip the first 10 items\n   * that match and return the 11th through 50th items.\n   *\n   * By default, `skip` is set to 0.\n   * @public\n   * @documentationMaturity preview\n   * @param skipCount - Number of items to skip in the search results before returning the results.\n   * @requiredField skipCount\n   * @returns The current `WixDataSearch` instance, refined with the specified skip count.\n   */\n  skip(skipCount: number): WixDataSearch\n\n  /**\n   * Includes referenced items for the specified properties in a search's results.\n   *\n   * The `include()` method refines a search so that the items returned in the\n   * search's results include the full referenced items for the specified properties.\n   *\n   * For example, suppose you have a **books** collection with an **author**\n   * field that references an **authors** collection. Searching the **books**\n   * collection with an `include(\"author\")` returns the relevant book items\n   * and each item will include the full referenced author item in the book's\n   * `author` property.\n   *\n   * When searching a collection that contains a reference field without using the\n   * `include()` method:\n   * - Single reference field: returned items contain only the ID of the\n   *   referenced item, and not the full referenced items.\n   * - Multiple reference field: returned items do not contain the multiple\n   *   reference field at all.\n   *\n   *  When including a property with multiple references, the following limitations\n   *  apply:\n   *  - Only one property with multiple references can be included.\n   *  - The search will return an error if more than 50 items are returned, regardless\n   *    of any search limit set using the `limit()` method.\n   *  - Each returned item can include up to 50 referenced items. If there are more\n   *    than 50 referenced items, only 50 are returned when the search is run\n   *    and the `partialIncludes` property of the returned `WixDataResult` is `true`.\n   *\n   * > **Note:** The `include()` method is not supported for [single-item collections](https://support.wix.com/en/article/cms-adding-and-setting-up-a-single-item-collection).\n   *\n   * @public\n   * @documentationMaturity preview\n   * @param fields - Fields for which to include referenced items.\n   * @requiredField fields\n   * @returns The current `WixDataSearch` instance, configured to include referenced items.\n   */\n  include(...fields: string[]): WixDataSearch\n\n  /**\n   * Overload for `include()`. Includes referenced items for the specified property in a search's results.\n   * @public\n   * @documentationMaturity preview\n   * @param field - Field for which to include referenced items.\n   * @param limit - Optional limit for the number of referenced items to include (behavior may vary).\n   * @returns The current `WixDataSearch` instance.\n   */\n  include(field: string, limit?: number): WixDataSearch\n\n  /**\n   * Overload for `include()`. Includes referenced items for the specified properties in a search's results.\n   * @public\n   * @documentationMaturity preview\n   * @param field1 - First field for which to include referenced items.\n   * @param field2 - Second field for which to include referenced items.\n   * @param limit - Optional limit for the number of referenced items to include (behavior may vary).\n   * @returns The current `WixDataSearch` instance.\n   */\n  include(field1: string, field2: string, limit?: number): WixDataSearch\n\n  /**\n   * Overload for `include()`. Includes referenced items for the specified properties in a search's results.\n   * @public\n   * @documentationMaturity preview\n   * @param field1 - First field.\n   * @param field2 - Second field.\n   * @param field3 - Third field.\n   * @param limit - Optional limit.\n   * @returns The current `WixDataSearch` instance.\n   */\n  include(\n    field1: string,\n    field2: string,\n    field3: string,\n    limit?: number\n  ): WixDataSearch\n\n  /**\n   * Overload for `include()`. Includes referenced items for the specified properties in a search's results.\n   * @public\n   * @documentationMaturity preview\n   * @param field1 - First field.\n   * @param field2 - Second field.\n   * @param field3 - Third field.\n   * @param field4 - Fourth field.\n   * @param limit - Optional limit.\n   * @returns The current `WixDataSearch` instance.\n   */\n  include(\n    field1: string,\n    field2: string,\n    field3: string,\n    field4: string,\n    limit?: number\n  ): WixDataSearch\n\n  /**\n   * Overload for `include()`. Includes referenced items for the specified properties in a search's results.\n   * @public\n   * @documentationMaturity preview\n   * @param field1 - First field.\n   * @param field2 - Second field.\n   * @param field3 - Third field.\n   * @param field4 - Fourth field.\n   * @param field5 - Fifth field.\n   * @param limit - Optional limit.\n   * @returns The current `WixDataSearch` instance.\n   */\n  include(\n    field1: string,\n    field2: string,\n    field3: string,\n    field4: string,\n    field5: string,\n    limit?: number\n  ): WixDataSearch\n\n  /**\n   * Overload for `include()`. Includes referenced items for the specified properties in a search's results.\n   * Allows specifying multiple field names and an optional limit.\n   * @public\n   * @documentationMaturity preview\n   * @param fieldNamesAndLimit - An array of field names, optionally followed by a limit number.\n   * @returns The current `WixDataSearch` instance.\n   */\n  include(...fieldNamesAndLimit: [...string[], number]): WixDataSearch\n}\n"],"mappings":"","ignoreList":[]}