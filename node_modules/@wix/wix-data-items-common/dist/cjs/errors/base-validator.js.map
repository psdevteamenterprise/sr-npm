{"version":3,"names":["_utils","require","_errors","BaseValidator","constructor","_defineProperty2","default","_validations","arityIsZero","args","addValidation","length","messages","arityValidations","operatorName","arityIsOne","arityIsTwo","arityIsThree","arityIsAtLeastTwo","arityIsAtLeastOne","predicateFn","messageFn","push","AggregatingValidator","previousInvalidArguments","_invalidArguments","clone","validateAndAggregate","valid","every","_appendIfInvalid","message","exports","DistinctingValidator","RejectingValidator","buildError","validationError","validateAndReject","Promise","resolve","then","forEach","validateAndReturn","errors"],"sources":["../../../src/errors/base-validator.ts"],"sourcesContent":["/* eslint-disable  @typescript-eslint/no-explicit-any */\nimport { clone } from '../utils'\nimport { messages, validationError } from './errors'\n\ninterface Validation {\n  predicateFn: () => boolean\n  messageFn: () => string\n}\nclass BaseValidator {\n  public _validations: Validation[]\n  public operatorName?: string\n\n  constructor() {\n    this._validations = []\n  }\n\n  arityIsZero(args: IArguments) {\n    return this.addValidation(\n      () => args.length === 0,\n      () => messages.arityValidations.arityIsZero(this.operatorName ?? '')\n    )\n  }\n\n  arityIsOne(args: IArguments) {\n    return this.addValidation(\n      () => args.length === 1,\n      () => messages.arityValidations.arityIsOne(this.operatorName ?? '')\n    )\n  }\n\n  arityIsTwo(args: IArguments) {\n    return this.addValidation(\n      () => args.length === 2,\n      () => messages.arityValidations.arityIsTwo(this.operatorName ?? '')\n    )\n  }\n\n  arityIsThree(args: IArguments) {\n    return this.addValidation(\n      () => args.length === 3,\n      () => messages.arityValidations.arityIsThree(this.operatorName ?? '')\n    )\n  }\n\n  arityIsAtLeastTwo(args: IArguments) {\n    return this.addValidation(\n      () => args.length >= 2,\n      () => messages.arityValidations.arityIsAtLeastTwo(this.operatorName ?? '')\n    )\n  }\n\n  arityIsAtLeastOne(args: IArguments | any[]) {\n    return this.addValidation(\n      () => args.length >= 1,\n      () => messages.arityValidations.arityIsAtLeastOne(this.operatorName ?? '')\n    )\n  }\n\n  addValidation(\n    predicateFn: Validation['predicateFn'],\n    messageFn: Validation['messageFn']\n  ) {\n    this._validations.push({\n      predicateFn,\n      messageFn,\n    })\n    return this\n  }\n}\n\nexport class AggregatingValidator extends BaseValidator {\n  private _invalidArguments: string[]\n\n  constructor(previousInvalidArguments?: string[]) {\n    super()\n    this._invalidArguments = clone(previousInvalidArguments)\n  }\n\n  validateAndAggregate(): [string[], boolean] {\n    const valid = this._validations.every(({ predicateFn, messageFn }) =>\n      this._appendIfInvalid(predicateFn(), messageFn())\n    )\n    return [this._invalidArguments, valid]\n  }\n\n  _appendIfInvalid(valid: boolean, message: string) {\n    if (!valid) {\n      this._invalidArguments.push(message)\n      return false\n    }\n    return true\n  }\n}\n\nexport class DistinctingValidator extends BaseValidator {\n  private _invalidArguments: string[]\n\n  constructor(previousInvalidArguments?: string[]) {\n    super()\n    this._invalidArguments = clone(previousInvalidArguments)\n  }\n\n  validateAndAggregate(): [string[], boolean] {\n    const valid = this._validations.every(({ predicateFn, messageFn }) =>\n      this._appendIfInvalid(predicateFn(), messageFn())\n    )\n    return [this._invalidArguments, valid]\n  }\n\n  _appendIfInvalid(valid: boolean, message: string) {\n    if (!valid) {\n      this._invalidArguments.push(message)\n      return false\n    }\n    return true\n  }\n}\n\nexport class RejectingValidator extends BaseValidator {\n  constructor(private buildError: (s: string) => Error = validationError) {\n    super()\n  }\n\n  validateAndReject(): Promise<void> {\n    return Promise.resolve().then(() => {\n      this._validations.forEach(({ predicateFn, messageFn }) => {\n        if (!predicateFn()) {\n          throw this.buildError(messageFn())\n        }\n      })\n    })\n  }\n\n  validateAndReturn(): string[] {\n    const errors: string[] = []\n    this._validations.forEach(({ predicateFn, messageFn }) => {\n      if (!predicateFn()) {\n        errors.push(messageFn())\n      }\n    })\n    return errors\n  }\n}\n"],"mappings":"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","ignoreList":[]}