"use strict";

exports.__esModule = true;
exports.apiValidator = apiValidator;
var _errors = require("./errors");
var _utils = require("../utils");
var _baseValidator = require("./base-validator");
class ApiValidator extends _baseValidator.RejectingValidator {
  arity(method, args, from, to) {
    return this.addValidation(() => args.length <= to && args.length >= from, () => _errors.messages.invalidArgumentLength(method, from, to, args.length));
  }
  _isObject(item, collectionName) {
    return this.addValidation(() => (0, _utils.isObject)(item), () => _errors.messages.itemMustBeAnObject(item, collectionName));
  }
  item(item, collectionName, requireId) {
    return this._isObject(item, collectionName).addValidation(() => item._id !== undefined ? (0, _utils.isString)(item._id) : !requireId, () => _errors.messages.updateItemInvalid());
  }
  items(items, collectionName) {
    return this.addValidation(() => (0, _utils.isArray)(items) && items.every(item => (0, _utils.isObject)(item) && (item._id === undefined || item._id === null || (0, _utils.isString)(item._id))), () => _errors.messages.itemsMustBeArrayOfObjects(collectionName)).addValidation(() => items.length <= 1000, () => _errors.messages.itemsMustBeLessThanThousand(collectionName));
  }
  fieldName(fieldName) {
    return this.addValidation(() => (0, _utils.isString)(fieldName), () => _errors.messages.fieldNameMustBeAString());
  }
  itemId(itemId) {
    return this.addValidation(() => (0, _utils.isString)(itemId), () => _errors.messages.itemIdMustBeAString());
  }
  itemIds(itemIds, collectionName) {
    return this.addValidation(() => (0, _utils.isArray)(itemIds) && itemIds.every(itemId => (0, _utils.isString)(itemId)), () => _errors.messages.itemIdsMustBeArrayOfStrings()).addValidation(() => itemIds.length <= 1000, () => _errors.messages.removeItemsMustBeLessThanThousand(collectionName));
  }
  _options(options, flags) {
    return this.addValidation(() => {
      const validOptions = (0, _utils.isObject)(options) && flags.every(flag => {
        if (flag === 'language') {
          return isNonEmptyStringIfDefined(options[flag]);
        } else {
          return isBooleanIfDefined(options[flag]);
        }
      });
      return options == null || validOptions;
    }, () => _errors.messages.optionsInvalid(flags));
  }
  referenceRemoveParameters(parameters) {
    return this.addValidation(() => (0, _utils.isArray)(parameters) && parameters.every(isRemoveReferenceParameter), _errors.messages.referenceOperationParameterError);
  }
  referenceParameters(parameters) {
    return this.addValidation(() => (0, _utils.isArray)(parameters) && parameters.every(isReferenceParameter), _errors.messages.referenceOperationParameterError);
  }
  referenceParameter(parameter) {
    return this.addValidation(() => isReferenceParameter(parameter), _errors.messages.referenceOperationParameterError);
  }
  isNonEmptyString(operand, operandName) {
    return this.addValidation(() => typeof operand === 'string' && operand.length > 0, () => _errors.messages.queryValidations.isNonEmptyString(operandName));
  }
  references(refs) {
    return this.addValidation(() => (0, _utils.isArray)(refs) && refs.every(ref => (0, _utils.isString)(ref.relationshipName) && isReferenceParameter(ref.left) && isReferenceParameter(ref.right)), _errors.messages.invalidReferenceError);
  }
  options(options) {
    return this._options(options, ['suppressAuth', 'suppressHooks', 'showDrafts', 'consistentRead', 'language']);
  }
  bulkInsertOptions(options) {
    return this._options(options, ['suppressAuth', 'suppressHooks', 'overrideExisting']);
  }
  bulkUpdateOptions(options) {
    return this._options(options, ['suppressAuth', 'suppressHooks', 'showDrafts']);
  }
  bulkRemoveOptions(options) {
    return this._options(options, ['suppressAuth', 'suppressHooks', 'showDrafts']);
  }
  truncateOptions(options) {
    return this._options(options, ['suppressAuth']);
  }
  collectionName(collectionName) {
    return this.addValidation(() => (0, _utils.isString)(collectionName), () => _errors.messages.collectionNameMustBeAString());
  }
}
function apiValidator(errorBuilder) {
  return new ApiValidator(errorBuilder);
}
function isNonEmptyStringIfDefined(value) {
  return value == null || (0, _utils.isString)(value) && value.length > 0;
}
function isBooleanIfDefined(value) {
  return value == null || (0, _utils.isBoolean)(value);
}
function isReferenceParameter(parameter) {
  return (0, _utils.isString)(parameter) && parameter !== '' || (0, _utils.isObject)(parameter) && parameter.hasOwnProperty('_id');
}
function isRemoveReferenceParameter(parameter) {
  return (0, _utils.isString)(parameter) || (0, _utils.isObject)(parameter) && parameter.hasOwnProperty('_id');
}
//# sourceMappingURL=validations.js.map