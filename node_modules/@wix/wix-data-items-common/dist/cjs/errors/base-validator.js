"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.RejectingValidator = exports.DistinctingValidator = exports.AggregatingValidator = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("../utils");
var _errors = require("./errors");
/* eslint-disable  @typescript-eslint/no-explicit-any */

class BaseValidator {
  constructor() {
    (0, _defineProperty2.default)(this, "_validations", void 0);
    (0, _defineProperty2.default)(this, "operatorName", void 0);
    this._validations = [];
  }
  arityIsZero(args) {
    return this.addValidation(() => args.length === 0, () => _errors.messages.arityValidations.arityIsZero(this.operatorName ?? ''));
  }
  arityIsOne(args) {
    return this.addValidation(() => args.length === 1, () => _errors.messages.arityValidations.arityIsOne(this.operatorName ?? ''));
  }
  arityIsTwo(args) {
    return this.addValidation(() => args.length === 2, () => _errors.messages.arityValidations.arityIsTwo(this.operatorName ?? ''));
  }
  arityIsThree(args) {
    return this.addValidation(() => args.length === 3, () => _errors.messages.arityValidations.arityIsThree(this.operatorName ?? ''));
  }
  arityIsAtLeastTwo(args) {
    return this.addValidation(() => args.length >= 2, () => _errors.messages.arityValidations.arityIsAtLeastTwo(this.operatorName ?? ''));
  }
  arityIsAtLeastOne(args) {
    return this.addValidation(() => args.length >= 1, () => _errors.messages.arityValidations.arityIsAtLeastOne(this.operatorName ?? ''));
  }
  addValidation(predicateFn, messageFn) {
    this._validations.push({
      predicateFn,
      messageFn
    });
    return this;
  }
}
class AggregatingValidator extends BaseValidator {
  constructor(previousInvalidArguments) {
    super();
    (0, _defineProperty2.default)(this, "_invalidArguments", void 0);
    this._invalidArguments = (0, _utils.clone)(previousInvalidArguments);
  }
  validateAndAggregate() {
    const valid = this._validations.every(({
      predicateFn,
      messageFn
    }) => this._appendIfInvalid(predicateFn(), messageFn()));
    return [this._invalidArguments, valid];
  }
  _appendIfInvalid(valid, message) {
    if (!valid) {
      this._invalidArguments.push(message);
      return false;
    }
    return true;
  }
}
exports.AggregatingValidator = AggregatingValidator;
class DistinctingValidator extends BaseValidator {
  constructor(previousInvalidArguments) {
    super();
    (0, _defineProperty2.default)(this, "_invalidArguments", void 0);
    this._invalidArguments = (0, _utils.clone)(previousInvalidArguments);
  }
  validateAndAggregate() {
    const valid = this._validations.every(({
      predicateFn,
      messageFn
    }) => this._appendIfInvalid(predicateFn(), messageFn()));
    return [this._invalidArguments, valid];
  }
  _appendIfInvalid(valid, message) {
    if (!valid) {
      this._invalidArguments.push(message);
      return false;
    }
    return true;
  }
}
exports.DistinctingValidator = DistinctingValidator;
class RejectingValidator extends BaseValidator {
  constructor(buildError = _errors.validationError) {
    super();
    this.buildError = buildError;
  }
  validateAndReject() {
    return Promise.resolve().then(() => {
      this._validations.forEach(({
        predicateFn,
        messageFn
      }) => {
        if (!predicateFn()) {
          throw this.buildError(messageFn());
        }
      });
    });
  }
  validateAndReturn() {
    const errors = [];
    this._validations.forEach(({
      predicateFn,
      messageFn
    }) => {
      if (!predicateFn()) {
        errors.push(messageFn());
      }
    });
    return errors;
  }
}
exports.RejectingValidator = RejectingValidator;
//# sourceMappingURL=base-validator.js.map