export type FilterTree = FieldFilter | {
    $and?: FilterTree[];
} | {
    $or?: FilterTree[];
} | {
    $not?: FilterTree | [FilterTree];
};
export type FieldFilter = {
    [field: string]: Operator | Value;
};
type DateValue = Date | {
    $date: string;
};
type ComparableValue = string | number | DateValue;
type Value = any;
export type Operator = {
    $eq?: Value;
} | {
    $ne?: Value;
} | {
    $gt?: ComparableValue;
} | {
    $gte?: ComparableValue;
} | {
    $lt?: ComparableValue;
} | {
    $lte?: ComparableValue;
} | {
    $startsWith?: string;
} | {
    $endsWith?: string;
} | {
    $contains?: string;
} | {
    $exists?: boolean;
} | {
    $hasSome?: ComparableValue[];
} | {
    $in?: ComparableValue[];
} | {
    $hasAll?: ComparableValue[];
} | {
    $matches?: {
        specs: {
            type: 'literal' | 'anyOf';
            value: string;
        }[];
        ignoreCase: true;
    };
} | {
    $not?: Operator;
};
export declare function validateFilterOrThrow(tree: unknown): tree is FilterTree;
export declare function validateFilterTree(tree: unknown, path?: string): string[];
export {};
//# sourceMappingURL=FilterTree.d.ts.map