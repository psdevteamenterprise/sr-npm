import type { RequestInterceptor, Request, HttpApiClientFactory } from '../types/api';
import { AggregateDataItemsRequest, AggregateDataItemsResponse, BulkInsertDataItemReferencesRequest, BulkInsertDataItemReferencesResponse, BulkInsertDataItemsRequest, BulkInsertDataItemsResponse, BulkPatchDataItemsRequest, BulkPatchDataItemsResponse, BulkRemoveDataItemReferencesRequest, BulkRemoveDataItemReferencesResponse, BulkRemoveDataItemsRequest, BulkRemoveDataItemsResponse, BulkSaveDataItemsRequest, BulkSaveDataItemsResponse, BulkUpdateDataItemsRequest, BulkUpdateDataItemsResponse, CountDataItemsRequest, CountDataItemsResponse, GetDataItemRequest, GetDataItemResponse, InsertDataItemRequest, InsertDataItemResponse, IsReferencedDataItemRequest, IsReferencedDataItemResponse, PatchDataItemRequest, PatchDataItemResponse, QueryDataItemsRequest, QueryDataItemsResponse, QueryDistinctValuesRequest, QueryDistinctValuesResponse, QueryReferencedDataItemsRequest, QueryReferencedDataItemsResponse, RemoveDataItemRequest, RemoveDataItemResponse, ReplaceDataItemReferencesRequest, ReplaceDataItemReferencesResponse, SaveDataItemRequest, SaveDataItemResponse, TruncateDataItemsRequest, TruncateDataItemsResponse, UpdateDataItemRequest, UpdateDataItemResponse, SearchDataItemsRequest, SearchDataItemsResponse } from '../types/data-item-types';
export declare function apiRequestInterceptor<R extends Request>(allowGet: boolean): RequestInterceptor<R>;
export declare class ApiClient {
    private httpApiClient;
    constructor(clientFactory: HttpApiClientFactory<any>, allowGet: boolean);
    getDataItem(r: GetDataItemRequest): Promise<GetDataItemResponse>;
    insertDataItem(r: InsertDataItemRequest): Promise<InsertDataItemResponse>;
    saveDataItem(r: SaveDataItemRequest): Promise<SaveDataItemResponse>;
    updateDataItem(r: UpdateDataItemRequest): Promise<UpdateDataItemResponse>;
    patchDataItem(r: PatchDataItemRequest): Promise<PatchDataItemResponse>;
    bulkPatchDataItems(r: BulkPatchDataItemsRequest): Promise<BulkPatchDataItemsResponse>;
    removeDataItem(r: RemoveDataItemRequest): Promise<RemoveDataItemResponse>;
    countDataItems(r: CountDataItemsRequest): Promise<CountDataItemsResponse>;
    queryDistinctValues(r: QueryDistinctValuesRequest): Promise<QueryDistinctValuesResponse>;
    queryDataItems(r: QueryDataItemsRequest): Promise<QueryDataItemsResponse>;
    aggregateDataItems(r: AggregateDataItemsRequest): Promise<AggregateDataItemsResponse>;
    bulkInsertDataItems(r: BulkInsertDataItemsRequest): Promise<BulkInsertDataItemsResponse>;
    bulkUpdateDataItems(r: BulkUpdateDataItemsRequest): Promise<BulkUpdateDataItemsResponse>;
    bulkSaveDataItems(r: BulkSaveDataItemsRequest): Promise<BulkSaveDataItemsResponse>;
    bulkRemoveDataItems(r: BulkRemoveDataItemsRequest): Promise<BulkRemoveDataItemsResponse>;
    queryReferencedDataItems(r: QueryReferencedDataItemsRequest): Promise<QueryReferencedDataItemsResponse>;
    bulkInsertDataItemReferences(r: BulkInsertDataItemReferencesRequest): Promise<BulkInsertDataItemReferencesResponse>;
    replaceDataItemReferences(r: ReplaceDataItemReferencesRequest): Promise<ReplaceDataItemReferencesResponse>;
    bulkRemoveDataItemReferences(r: BulkRemoveDataItemReferencesRequest): Promise<BulkRemoveDataItemReferencesResponse>;
    isReferencedDataItem(r: IsReferencedDataItemRequest): Promise<IsReferencedDataItemResponse>;
    truncateDataItems(r: TruncateDataItemsRequest): Promise<TruncateDataItemsResponse>;
    searchDataItems(r: SearchDataItemsRequest): Promise<SearchDataItemsResponse>;
    private withErrorHandling;
}
//# sourceMappingURL=ApiClient.d.ts.map