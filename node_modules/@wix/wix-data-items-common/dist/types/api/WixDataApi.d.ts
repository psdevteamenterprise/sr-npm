import { HttpApiClientFactory } from '../types';
import * as apiTypes from '../types/data-item-types';
import { Provider, WixDataBulkResult, WixDataItem, WixDataItemOrId, WixDataOptions, WixDataQueryReferencedOptions, WixDataReadOptions, WixDataReadWithProjectionOptions, WixDataReference, WixDataUpdateOptions } from './types';
import { WixDataQuery } from './WixDataQuery';
import { WixDataResultImpl } from './impl/WixDataResultImpl';
import { WixDataPatch, WixDataBulkPatch } from './WixDataPatch';
import { WixDataAggregate } from './WixDataAggregate';
import { WixDataFilter } from './WixDataFilter';
import { WixDataResult } from './WixDataResult';
import { WixDataSearch } from './WixDataSearch';
type ProvidedOpt<T> = T | undefined | Provider<T | undefined>;
type TraceWith = (label: string, opts?: object) => <T>(fn: () => Promise<T>) => Promise<T>;
export declare class WixDataApi {
    private readonly environment?;
    private readonly gridAppId?;
    private readonly tracer?;
    private client;
    constructor(clientFactory: HttpApiClientFactory<any>, allowGet: boolean, environment?: apiTypes.Environment | undefined, gridAppId?: ProvidedOpt<string>, tracer?: TraceWith | undefined);
    get wixData(): WixDataApi;
    get filter(): WixDataFilter;
    truncate: (collectionName: string, options?: WixDataOptions | undefined) => Promise<void>;
    get: (collectionName: string, itemId: string, options?: WixDataReadWithProjectionOptions | undefined) => Promise<WixDataItem | null>;
    insert: (collectionName: string, item: Partial<WixDataItem>, options?: WixDataUpdateOptions | undefined) => Promise<WixDataItem>;
    save: (collectionName: string, item: Partial<WixDataItem>, options?: WixDataUpdateOptions | undefined) => Promise<WixDataItem>;
    update: (collectionName: string, item: WixDataItem, options?: WixDataUpdateOptions | undefined) => Promise<WixDataItem>;
    remove: (collectionName: string, itemId: string, options?: WixDataOptions | undefined) => Promise<WixDataItem | null>;
    private toFieldModificationApi;
    patch: (collectionName: string, itemId: string) => WixDataPatch;
    bulkPatch: (collectionName: string, itemIds: string[]) => WixDataBulkPatch;
    query: (collectionName: string) => WixDataQuery;
    search: (collectionName: string) => WixDataSearch;
    fetch: (collectionName: string, cursor: string, limit?: number | undefined, options?: WixDataReadOptions | undefined) => Promise<WixDataResult<WixDataItem>>;
    aggregate: (collectionName: string) => WixDataAggregate;
    fetchAggregate: (collectionName: string, cursor: string, limit?: number | undefined, options?: WixDataReadOptions | undefined) => Promise<WixDataResultImpl<Record<string, any>>>;
    bulkRemove: (collectionName: string, itemIds: string[], options?: WixDataOptions | undefined) => Promise<WixDataBulkResult>;
    private runBulkSave;
    bulkInsert: (collectionName: string, items: Partial<WixDataItem>[], options?: (WixDataOptions & {
        overrideExisting?: boolean | undefined;
    }) | undefined) => Promise<WixDataBulkResult>;
    bulkSave: (collectionName: string, items: Partial<WixDataItem>[], options?: WixDataOptions | undefined) => Promise<WixDataBulkResult>;
    bulkUpdate: (collectionName: string, items: WixDataItem[], options?: WixDataOptions | undefined) => Promise<WixDataBulkResult>;
    fetchReferenced: (collectionName: string, cursor: string, limit?: number | undefined, options?: WixDataReadWithProjectionOptions | undefined) => Promise<WixDataResult<string | WixDataItem>>;
    queryReferenced: (collectionName: string, holdingItem: WixDataItemOrId, relationshipAttribute: string, options?: WixDataQueryReferencedOptions | undefined) => Promise<WixDataResult<WixDataItem>>;
    insertReference: {
        (collectionName: string, refs: WixDataReference[], options?: WixDataOptions): Promise<void>;
        (collectionName: string, relationshipAttribute: string, left: WixDataItemOrId, right: WixDataItemOrId | WixDataItemOrId[], options?: WixDataOptions): Promise<void>;
    };
    replaceReferences: (collectionName: string, relationshipAttribute: string, left: WixDataItemOrId, right: WixDataItemOrId | WixDataItemOrId[], options?: WixDataOptions | undefined) => Promise<void>;
    removeReference: (collectionName: string, relationshipAttribute: string, left: WixDataItemOrId, right: WixDataItemOrId | WixDataItemOrId[], options?: WixDataOptions | undefined) => Promise<void>;
    isReferenced: (collectionName: string, relationshipAttribute: string, left: WixDataItemOrId, right: WixDataItemOrId, options?: WixDataReadOptions | undefined) => Promise<boolean>;
    private trace;
}
export {};
//# sourceMappingURL=WixDataApi.d.ts.map