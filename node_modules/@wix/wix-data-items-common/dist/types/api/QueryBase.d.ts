import { WithFilter, PlatformizedFilterBuilder, FilterTree } from '../filter';
import { Sort } from '../sort/sortMixin';
export declare abstract class QueryBase<Self extends WithFilter<Self>> implements WithFilter<Self> {
    /**
     * @internal
     */
    protected readonly filterBuilder: PlatformizedFilterBuilder;
    /**
     * @internal
     */
    protected readonly sort: Sort;
    /**
     * @internal
     */
    readonly collectionName: string;
    protected constructor(origin: {
        collectionName: string;
        filterBuilder?: PlatformizedFilterBuilder;
        sort?: Sort;
    });
    /**
     * @internal
     */
    protected abstract copy(params: {
        filterBuilder?: PlatformizedFilterBuilder;
        sort?: Sort;
    }): Self;
    abstract get invalidArguments(): string[];
    get filterTree(): Record<string, any>;
    /**
     * @internal
     */
    setFilterModel(filterTree: Record<string, any>): Self;
    /**
     * @internal
     */
    getFilterModel(): FilterTree;
    private withFilter;
    eq: WithFilter<Self>['eq'];
    ne: WithFilter<Self>['ne'];
    ge: WithFilter<Self>['ge'];
    gt: WithFilter<Self>['gt'];
    gte: WithFilter<Self>['gte'];
    le: WithFilter<Self>['le'];
    lt: WithFilter<Self>['lt'];
    lte: WithFilter<Self>['lte'];
    isNotEmpty: WithFilter<Self>['isNotEmpty'];
    isEmpty: WithFilter<Self>['isEmpty'];
    startsWith: WithFilter<Self>['startsWith'];
    endsWith: WithFilter<Self>['endsWith'];
    contains: WithFilter<Self>['contains'];
    hasSome: WithFilter<Self>['hasSome'];
    in: WithFilter<Self>['in'];
    hasAll: WithFilter<Self>['hasAll'];
    exists: WithFilter<Self>['exists'];
    or: WithFilter<Self>['or'];
    and: WithFilter<Self>['and'];
    not: WithFilter<Self>['not'];
    between: WithFilter<Self>['between'];
    private extractFilter;
    get orderBy(): {
        [field: string]: 'asc' | 'desc';
    }[];
    /**
     * Adds a sort to a query or sort, sorting by the specified properties in ascending order.
     *
     * The `ascending()` function refines this query in ascending order of the specified properties. If you specify more
     * than one property, `ascending()` sorts the results in ascending order by each property in the order they are listed.
     *
     * You can sort the following types:
     * - Number: Sorts numerically.
     * - Date: Sorts by date and time.
     * - String: Sorts lexicographically, so `"abc"` comes after `"XYZ"`.
     * - Reference: Compares by the ID of the referenced item as a String.
     *
     * If a property contains a number as a String, that value will be sorted alphabetically and not numerically.
     * Items that do not have a value for the specified sort property are ranked lowest.
     * @public
     * @documentationMaturity preview
     * @param fields - The properties used in the sort.
     * @requiredField fields
     * @returns An object representing the refined query.
     */
    ascending(...fields: string[]): Self;
    ascending(fields: string[]): Self;
    /**
     * Adds a sort to a query or sort, sorting by the specified properties in descending order.
     *
     * The `descending()` function refines this query to sort in descending order of the specified properties. If you
     * specify more than one property, descending() sorts the results in descending order by each property in the order
     * they are listed.
     *
     * You can sort the following types:
     *
     * Number: Sorts numerically.
     * - Date: Sorts by date and time.
     * - String: Sorts lexicographically, so `"abc"` comes before `"XYZ"`.
     * - Reference: Compares by the ID of the referenced item as a String.
     *
     * If a property contains a number as a String, that value will be sorted alphabetically and not numerically. Items
     * that do not have a value for the specified sort property are ranked lowest.
     * @public
     * @documentationMaturity preview
     * @param fields - The properties used in the sort.
     * @requiredField fields
     * @returns An object representing the refined query.
     */
    descending(...fields: string[]): Self;
    descending(fields: string[]): Self;
}
//# sourceMappingURL=QueryBase.d.ts.map