/**
 * @builder
 */
export interface WixDataFilter {
    /**
     * Refines a filter to match items whose specified field value equals the specified value.
     *
     * The `eq()` method refines this filter to only
     * match items where the value of the specified field equals the specified `value`.
     *
     * It only matches values of the same type. For example, a number value stored
     * as a String type does not match the same number stored as a Number type.
     *
     * Matching strings with `eq()` is case sensitive, so `"text"` is not equal to `"Text"`.
     *
     * If `field` points to a collection field of type array, `eq()` includes the item as long as at least one array element matches the specified `value`.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param value - Value to compare with.
     * @requiredField value
     * @returns Refined filter.
     */
    eq(field: string, value: any): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value does not equal the specified value.
     *
     * The `ne()` method refines this filter to only
     * match items where the value of the specified field does not equal the specified `value`.
     *
     * It only matches values of the same type. For example, a number value stored
     * as a String type is considered not equal to the same number stored as a Number type.
     *
     * Matching strings with `ne()` is case sensitive, so `"text"` is not equal to `"Text"`.
     *
     * If the value of `field` is an array, `ne()` includes items
     * in which none of the elements of the array match the specified `value`.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param value - Value to match.
     * @requiredField value
     * @returns Refined filter.
     */
    ne(field: string, value: any): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value is greater than or equal to the specified
     * value.
     *
     * The `ge()` method refines this filter to only
     * match items where the value of the specified field is greater than or
     * equal to the specified `value`.
     *
     * It only matches values of the same type. For example, a number value stored
     * as a String type does not match the same number stored as a Number type.
     *
     * If a field contains a number as a String, that value is compared
     * alphabetically and not numerically. Items that do not have a value for the
     * specified field are ranked lowest.
     *
     * The following field types can be compared:
     * - Number: Compares numerically.
     * - Date: Compares JavaScript Date objects.
     * - String: Compares lexicographically,
     *   so `"abc"` is greater than or equal to `"ABC"` (because of the greater than),
     *   but `"ABC"` is not greater than or equal to `"abc"`.
     * - Reference: Compares by the ID of the referenced item as a String.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param value - Value to match.
     * @requiredField value
     * @returns Refined filter.
     */
    ge(field: string, value: string | number | Date): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value is greater than the specified value.
     *
     * The `gt()` method refines this filter to only match
     * items where the value of the specified field is greater than the specified `value`.
     *
     * It only matches values of the same type. For example, a number value stored
     * as a String type does not match the same number stored as a Number type.
     *
     * If a field contains a number as a String, that value is compared
     * alphabetically and not numerically. Items that do not have a value for the
     * specified field are ranked lowest.
     *
     * The following field types can be compared:
     * - Number: Compares numerically.
     * - Date: Compares JavaScript Date objects.
     * - String: Compares lexicographically, so `"text"` is greater than `"Text"`.
     * - Reference: Compares by the ID of the referenced item as a String.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param value - Value to match.
     * @requiredField value
     * @returns An object with the filter definition, based on the supplied parameters.
     */
    gt(field: string, value: string | number | Date): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value is less than or equal to the specified
     * value.
     *
     * The `le()` method refines this filter to only match
     * items where the value of the specified field is less than or equal to the
     * specified `value`.
     *
     * It only matches values of the same type. For example, a number value stored
     * as a String type does not match the same number stored as a Number type.
     *
     * If a field contains a number as a String, that value is compared
     * alphabetically and not numerically. Items that do not have a value for the
     * specified field are ranked lowest.
     *
     * The following field types can be compared:
     * - Number: Compares numerically.
     * - Date: Compares JavaScript Date objects.
     * - String: Compares lexicographically,
     *   so `"ABC"` is less than or equal to `"abc"` (because of the less than),
     *   but `"abc"` is not less than or equal to `"ABC"`.
     * - Reference: Compares by the ID of the referenced item as a String.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param value - Value to match.
     * @requiredField value
     * @returns Refined filter.
     */
    le(field: string, value: string | number | Date): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value is less than the specified value.
     *
     * The `lt()` method refines this filter to only match
     * items where the value of the specified field is less than the specified `value`.
     *
     * It only matches values of the same type. For example, a number value stored
     * as a String type does not match the same number stored as a Number type.
     *
     * If a field contains a number as a String, that value is compared
     * alphabetically and not numerically. Items that do not have a value for the
     * specified field are ranked lowest.
     *
     * The following field types can be compared:
     * - Number: Compares numerically.
     * - Date: Compares JavaScript Date objects.
     * - String: Compares lexicographically, so `"Text"` is less than `"text"`.
     * - Reference: Compares by the ID of the referenced item as a String.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param value - Value to match.
     * @requiredField value
     * @returns An object with the filter definition, based on the supplied parameters.
     */
    lt(field: string, value: string | number | Date): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field has any value.
     *
     * The `isNotEmpty()` method refines this filter to only match items where the
     * value of the specified field is not `null` or `undefined`.
     *
     * If the field contains any value at all for a given item, including the
     * empty string or an invalid value, that item will match the filter.
     * @public
     * @documentationMaturity preview
     * @param field - Field in which to check for a value.
     * @requiredField field
     * @returns Refined filter.
     */
    isNotEmpty(field: string): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field does not exist or does not have any value.
     *
     * The `isEmpty()` method refines this filter to only match items where the
     * value of the specified field is `null` or `undefined` or the field does
     * not exist.
     *
     * If the field contains any value at all for a given item, including the
     * empty string or an invalid value, that item will match the filter.
     * @public
     * @documentationMaturity preview
     * @param field - Field in which to check for a value.
     * @requiredField field
     * @returns An object representing the refined filter.
     */
    isEmpty(field: string): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value starts with a specified string.
     *
     * The `startsWith()` method refines this filter to
     * only match items where the value of the specified field starts with the
     * defined `string`. Matching with `startsWith()` is not case sensitive, so `"TEXT"` starts
     * with `"tex"`.
     *
     * You can only use `startsWith()` with a field whose value is a String or Reference.
     * When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with the `value` parameter.
     * @requiredField field
     * @param value - Value to look for at the beginning of the specified field value.
     * @requiredField value
     * @returns Refined filter.
     */
    startsWith(field: string, value: string): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value ends with a specified string.
     *
     * The `endsWith()` method refines this filter to only
     * match items where the value of the specified field ends with the specified
     * `string`. Matching with `endsWith()` is not case sensitive, so `"TEXT"` ends
     * with `"ext"`.
     *
     * You can only use `endsWith()` with a field whose value is a String or Reference.
     * When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with the string.
     * @requiredField field
     * @param value - Value to look for at the end of the specified field value.
     * @requiredField value
     * @returns Refined filter.
     */
    endsWith(field: string, value: string): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value contains the specified value.
     *
     * The `contains()` method refines the filter to only match items for which the value of the specified field contains the specified value. `contains()` is not case-sensitive, so the value `sunday` is considered to contain the value `Sun`.
     *
     * You can use `contains()` with a field whose type is a string or a reference. However, for fields whose type is reference, `contains()` matches by the ID of the referenced item as a string. Instead, use the [`eq()`](https://dev.wix.com/docs/sdk/backend-modules/data/wix-data-items-sdk-1-0-0/wix-data-filter/eq) method.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with the provided value.
     * @requiredField field
     * @param value - Value to locate in the specified field value.
     * @requiredField value
     * @returns Refined filter.
     */
    contains(field: string, value: string): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value equals any of the specified `values`
     * parameters.
     *
     * The `hasSome()` method refines this filter to
     * only match items where the value of the specified field equals any of
     * the specified values.
     *
     * Matching strings with `hasSome()` is case sensitive, so `"text"` is not equal to `"Text"`.
     *
     * If the value of the specified field is an array, `hasSome()` will match
     * if any of the elements of that array match any of the specified values.
     *
     * If the specified field contains multiple references, pass item IDs in the
     * `value` field. In such a case, `hasSome()` will match if any of the
     * multiple references match any of the specified ID values.
     *
     * You can specify a list of values to match by providing an array of
     * String, Number, or Date types as the `value` parameters.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `value`.
     * @requiredField field
     * @param values - Values to match.
     * @requiredField values
     * @returns An object representing the refined filter.
     */
    hasSome(field: string, ...values: string[] | number[] | Date[]): WixDataFilter;
    /**
     * Overload for `hasSome()`
     * @public
     * @documentationMaturity preview
     */
    hasSome(field: string, values: string[] | number[] | Date[]): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field values equals all of the specified `value`
     * parameters.
     *
     * The `hasAll()` method refines this filter to
     * only match items where the value of the specified field equals all of
     * the specified values.
     *
     * Matching strings with `hasAll()` is case sensitive, so `"text"` is not equal to `"Text"`.
     *
     * If the value of the specified field is an array, `hasAll()` will match
     * if there is a match in the elements of that array for all of the specified
     * values.
     *
     * You can specify a list of values to match by providing an array of
     * String, Number, or Date types as the `value` parameters.
     * @public
     * @documentationMaturity preview
     * @param field - Field whose value is compared with `values`.
     * @requiredField field
     * @param values - Values to match.
     * @requiredField values
     * @returns An object representing the refined filter.
     */
    hasAll(field: string, ...values: string[] | number[] | Date[]): WixDataFilter;
    /**
     * Overload for `hasAll()`
     * @public
     * @documentationMaturity preview
     */
    hasAll(field: string, values: string[] | number[] | Date[]): WixDataFilter;
    /**
     * Adds an `or` condition to the filter.
     *
     * The `or()` method adds an inclusive `or` condition to this filter. A filter
     * with an `or` returns all the items that match the filter as defined up to
     * the `or` method, the items that match the filter passed to the `or`
     * method, and the items that match both.
     *
     * The `or()` method is designed to work with 2 or more queries or filters.
     * If you use it on its own, it will return all the items in a collection.
     * @public
     * @documentationMaturity preview
     * @param filter - Filter to add to the initial filter as an `or` condition.
     * @requiredField filter
     * @returns Object representing the refined filter.
     */
    or(filter: WixDataFilter): WixDataFilter;
    /**
     * Adds an `and` condition to the filter.
     *
     * A filter with an `and` condition returns all items that meet the conditions defined on both sides of the condition.
     *
     * Use the `and()` method when performing compound queries. For example, the final filter in this set of
     * queries returns results where status is either pending or rejected **and** age is either less than 25 or greater
     * than 65.
     *
     * ```js
     * let statusFilter = items.filter()
     *   .eq("status", "pending")
     *   .or(items.filter().eq("status", "rejected"));
     *
     * let ageFilter = items.filter()
     *   .lt("age", 25)
     *   .or(items.filter().gt("age", 65));
     *
     * let statusAndAgeFilter = statusFilter.and(ageFilter);
     * ```
     *
     * > **Notes**:
     * > - The `and()` method is designed to work with 2 or more queries or filters. If used with a single query or filter, it returns all items in a collection.
     * > - When chaining multiple `WixDataFilter` methods to a filter, an `and` condition is implied. In such cases, you do not need to call the `and()` method explicitly. For example, this filter returns results where an item `status` is `active` and `age` is greater than 25:
     *
     * ```js
     * items.filter().eq("status", "active").gt("age", 25);
     * ```
     *
     * @public
     * @documentationMaturity preview
     * @param filter - `WixDataFilter` used with an `and` condition.
     * @requiredField filter
     * @returns The compound filter.
     */
    and(filter: WixDataFilter): WixDataFilter;
    /**
     * Adds a `not` condition to the filter.
     *
     * The `not()` method adds a `not` condition to this filter. A filter with a `not`
     * returns all the items that match the filter as defined up to the `not`
     * method, but don't match the filter passed to the `not` method.
     *
     * If the filter only contains a `not()` method, it returns all the items
     * that don't match the filter defined by the `not` method.
     *
     * @public
     * @documentationMaturity preview
     * @param filter - Filter to add to the initial filter as a `not` condition.
     * @requiredField filter
     * @returns Object representing the refined filter.
     */
    not(filter: WixDataFilter): WixDataFilter;
    /**
     * Refines a filter to match items whose specified field value is within the defined range.
     *
     * The `between()` method refines this filter to match items for which the value of the specified field is greater than or equal to `rangeStart` and less than `rangeEnd`. The method only matches values of [the same type](https://support.wix.com/en/article/cms-formerly-content-manager-about-your-collection-fields#field-type).
     *
     * The following types can be compared:
     * - Number: Compared numerically.
     * - Date: Compared as JavaScript Date objects.
     * - String: Compared lexicographically:
     *   - `"A"` and `"M"` are considered between `"A"` and `"Z"`, but `"a"`, `"m"`, `"z"` and `"Z"` are not.
     *   - `"A"`, `"M"`, `"Z"`, and `"a"` are considered between `"A"` and `"z"`, but `"z"` is not.
     *
     * > **Note**: Items that do not have a value for the specified field are considered as the lowest comparable value and are ranked last.
     *
     * @public
     * @documentationMaturity preview
     * @param field - Field to compare with `rangeStart` and `rangeEnd`.
     * @requiredField field
     * @param rangeStart - Starting value of the range to match.
     * @requiredField rangeStart
     * @param rangeEnd - Ending value of the range to match.
     * @requiredField rangeEnd
     * @returns Refined filter.
     */
    between(field: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): WixDataFilter;
}
//# sourceMappingURL=WixDataFilter.d.ts.map