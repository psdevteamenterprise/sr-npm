import { PlatformizedFilterBuilder } from '../../filter';
import { ReferencedItemOptions } from '../../types';
import { Sort } from '../../sort/sortMixin';
import { WixDataResult } from '../WixDataResult';
import { WixDataQueryOptions, WixDataReadOptions } from '../types';
import { QueryBase } from '../QueryBase';
import { WixDataQuery } from '../WixDataQuery';
type OnFind = (args: IArguments, params: QueryParams, options?: WixDataQueryOptions) => Promise<WixDataResult>;
type OnDistinct = (args: IArguments, params: QueryParams, field: string, options?: WixDataQueryOptions) => Promise<WixDataResult<any>>;
type OnCount = (args: IArguments, params: QueryParams, options?: WixDataReadOptions) => Promise<number>;
export type QueryParams = {
    collectionName: string;
    invalidArguments: string[];
    filterTree?: Record<string, any>;
    projectedFields: string[];
    limitNumber?: number;
    skipNumber: number;
    included: ReferencedItemOptions[];
    orderBy: {
        [field: string]: 'asc' | 'desc';
    }[];
};
export declare class WixDataQueryImpl extends QueryBase<WixDataQueryImpl> implements WixDataQuery {
    readonly projectedFields: string[];
    readonly limitNumber?: number;
    readonly skipNumber: number;
    readonly included: ReferencedItemOptions[];
    private readonly onFind;
    private readonly onDistinct;
    private readonly onCount;
    private readonly ownInvalidArguments;
    constructor(origin: {
        collectionName: string;
        filterBuilder?: PlatformizedFilterBuilder;
        invalidArguments?: string[];
        projectedFields?: string[];
        limitNumber?: number;
        skipNumber?: number;
        included?: ReferencedItemOptions[];
        sort?: Sort;
        onFind: OnFind;
        onDistinct: OnDistinct;
        onCount: OnCount;
    });
    protected copy(params: {
        filterBuilder?: PlatformizedFilterBuilder;
        projectedFields?: string[];
        limitNumber?: number;
        skipNumber?: number;
        included?: ReferencedItemOptions[];
        sort?: Sort;
        invalidArguments?: string[];
    }): WixDataQueryImpl;
    count(options?: WixDataReadOptions): Promise<number>;
    distinct(field: string, options?: WixDataQueryOptions): Promise<WixDataResult<any>>;
    find(options?: WixDataQueryOptions): Promise<WixDataResult>;
    get invalidArguments(): string[];
    private toQueryParams;
    fields(...fields: string[]): WixDataQuery;
    limit(limitNumber: number): WixDataQueryImpl;
    skip(skipNumber: number): WixDataQueryImpl;
    include(...fieldNames: string[]): WixDataQuery;
    include(fieldName: string, limit?: number): WixDataQuery;
    include(fieldName1: string, fieldName2: string, limit?: number): WixDataQuery;
    include(fieldName1: string, fieldName2: string, fieldName3: string, limit?: number): WixDataQuery;
    include(fieldName1: string, fieldName2: string, fieldName3: string, fieldName4: string, limit?: number): WixDataQuery;
    include(fieldName1: string, fieldName2: string, fieldName3: string, fieldName4: string, fieldName5: string, limit?: number): WixDataQuery;
    include(...fieldNamesAndLimit: [...string[], number]): WixDataQuery;
    private queryValidator;
}
export {};
//# sourceMappingURL=WixDataQueryImpl.d.ts.map