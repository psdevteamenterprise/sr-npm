import { PagingMetadataV2, ReferencedItemOptions } from '../../types';
import { WixDataItem } from '../types';
import { WixDataResult } from '../WixDataResult';
export type PageFetcher<Item = WixDataItem> = (cursorOrOffset: string | number, returnTotalCount?: boolean) => Promise<[Item[], PagingMetadataV2]>;
export declare class WixDataResultImpl<Item = WixDataItem> implements WixDataResult<Item> {
    private readonly paging;
    private readonly fetch;
    readonly items: Item[];
    readonly totalCount: number | undefined;
    readonly pageSize: number | undefined;
    readonly currentPage: number | undefined;
    readonly collectionName: string;
    private readonly skipNumber;
    private readonly allowOffsetBackwards;
    constructor(items: Item[], paging: PagingMetadataV2, fetch: PageFetcher<Item>, context: {
        limitNumber?: number;
        skipNumber?: number;
        collectionName: string;
        referencedItemOptions?: ReferencedItemOptions[];
    }, origin?: WixDataResultImpl<Item>, currentPage?: number);
    get length(): number;
    /**
     * Can be iterated as array of items
     */
    [Symbol.iterator](): IterableIterator<Item>;
    get totalPages(): number | undefined;
    next(): Promise<WixDataResult<Item>>;
    prev(): Promise<WixDataResult<Item>>;
    get nextCursor(): string | undefined;
    get prevCursor(): string | undefined;
    hasNext(): boolean;
    hasPrev(): boolean;
    toJSON(): {
        items: Item[];
        totalCount: number | undefined;
        pageSize: number | undefined;
        currentPage: number | undefined;
        length: number;
        totalPages: number | undefined;
    };
}
//# sourceMappingURL=WixDataResultImpl.d.ts.map