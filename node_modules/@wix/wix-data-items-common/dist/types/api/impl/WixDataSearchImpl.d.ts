import { PlatformizedFilterBuilder } from '../../filter';
import { ReferencedItemOptions, Mode } from '../../types';
import { Sort } from '../../sort/sortMixin';
import { WixDataResult } from '../WixDataResult';
import { WixDataReadOptions } from '../types';
import { QueryBase } from '../QueryBase';
import { WixDataSearch } from '../WixDataSearch';
type OnRun = (params: SearchParams, options?: WixDataReadOptions) => Promise<WixDataResult>;
export type SearchParams = {
    collectionName: string;
    invalidArguments: string[];
    filterTree?: Record<string, any>;
    projectedFields: string[];
    limitNumber?: number;
    skipNumber: number;
    included: ReferencedItemOptions[];
    orderBy: {
        [field: string]: 'asc' | 'desc';
    }[];
    queryText?: string;
    searchMode?: Mode;
    isFuzzy?: boolean;
};
export declare class WixDataSearchImpl extends QueryBase<WixDataSearchImpl> implements WixDataSearch {
    readonly projectedFields: string[];
    readonly limitNumber?: number;
    readonly skipNumber: number;
    readonly included: ReferencedItemOptions[];
    private readonly queryText?;
    private readonly searchMode?;
    private readonly isFuzzy?;
    private readonly onRun;
    private readonly ownInvalidArguments;
    constructor(origin: {
        collectionName: string;
        filterBuilder?: PlatformizedFilterBuilder;
        invalidArguments?: string[];
        projectedFields?: string[];
        limitNumber?: number;
        skipNumber?: number;
        included?: ReferencedItemOptions[];
        sort?: Sort;
        queryText?: string;
        searchMode?: Mode;
        isFuzzy?: boolean;
        onRun: OnRun;
    });
    protected copy(params: {
        filterBuilder?: PlatformizedFilterBuilder;
        projectedFields?: string[];
        limitNumber?: number;
        skipNumber?: number;
        included?: ReferencedItemOptions[];
        sort?: Sort;
        invalidArguments?: string[];
        queryText?: string;
        searchMode?: Mode;
        isFuzzy?: boolean;
    }): WixDataSearchImpl;
    expression(queryText: string): WixDataSearch;
    andMode(): WixDataSearch;
    orMode(): WixDataSearch;
    fuzzy(): WixDataSearch;
    run(options?: WixDataReadOptions): Promise<WixDataResult>;
    get invalidArguments(): string[];
    private toSearchParams;
    fields(...fields: string[]): WixDataSearch;
    limit(limitNumber: number): WixDataSearchImpl;
    skip(skipNumber: number): WixDataSearchImpl;
    include(...fieldNames: string[]): WixDataSearch;
    include(fieldName: string, limit?: number): WixDataSearch;
    include(fieldName1: string, fieldName2: string, limit?: number): WixDataSearch;
    include(fieldName1: string, fieldName2: string, fieldName3: string, limit?: number): WixDataSearch;
    include(fieldName1: string, fieldName2: string, fieldName3: string, fieldName4: string, limit?: number): WixDataSearch;
    include(fieldName1: string, fieldName2: string, fieldName3: string, fieldName4: string, fieldName5: string, limit?: number): WixDataSearch;
    include(...fieldNamesAndLimit: [...string[], number]): WixDataSearch;
    private queryValidator;
}
export {};
//# sourceMappingURL=WixDataSearchImpl.d.ts.map