interface Validation {
    predicateFn: () => boolean;
    messageFn: () => string;
}
declare class BaseValidator {
    _validations: Validation[];
    operatorName?: string;
    constructor();
    arityIsZero(args: IArguments): this;
    arityIsOne(args: IArguments): this;
    arityIsTwo(args: IArguments): this;
    arityIsThree(args: IArguments): this;
    arityIsAtLeastTwo(args: IArguments): this;
    arityIsAtLeastOne(args: IArguments | any[]): this;
    addValidation(predicateFn: Validation['predicateFn'], messageFn: Validation['messageFn']): this;
}
export declare class AggregatingValidator extends BaseValidator {
    private _invalidArguments;
    constructor(previousInvalidArguments?: string[]);
    validateAndAggregate(): [string[], boolean];
    _appendIfInvalid(valid: boolean, message: string): boolean;
}
export declare class DistinctingValidator extends BaseValidator {
    private _invalidArguments;
    constructor(previousInvalidArguments?: string[]);
    validateAndAggregate(): [string[], boolean];
    _appendIfInvalid(valid: boolean, message: string): boolean;
}
export declare class RejectingValidator extends BaseValidator {
    private buildError;
    constructor(buildError?: (s: string) => Error);
    validateAndReject(): Promise<void>;
    validateAndReturn(): string[];
}
export {};
//# sourceMappingURL=base-validator.d.ts.map