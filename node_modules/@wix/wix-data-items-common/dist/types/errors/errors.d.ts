export declare const messages: {
    collectionNameMustBeAString: () => string;
    itemIdMustBeAString: () => string;
    itemIdsMustBeArrayOfStrings: () => string;
    removeItemsMustBeLessThanThousand: (collectionName: string) => string;
    fieldNameMustBeAString: () => string;
    itemMustBeAnObject: (item: any, collectionName: string) => string;
    itemsMustBeArrayOfObjects: (collectionName: string) => string;
    itemsMustBeLessThanThousand: (collectionName: string) => string;
    updateItemInvalid: () => string;
    invalidArgumentLength: (method: string, from: number, to: number, actual: number) => string;
    aggregateValidations: {
        aggregateInvalid: (collectionName: string, invalidArguments: string[]) => string;
        filterMustBeBuilder: (operatorName: string) => string;
        filterIsAlreadySet: (operatorName: string) => string;
        groupIsAlreadySet: (operatorName: string) => string;
    };
    filterBuilderInvalid: (invalidArguments: string[]) => string;
    groupBuilderInvalid: (invalidArguments: string[]) => string;
    filterMustBeAnObject: () => string;
    sortBuilderInvalid: (invalidArguments: string[]) => string;
    optionsInvalid: (properties: string[]) => string;
    referenceOperationParameterError: () => string;
    referenceOperationFieldError: (fieldName: string) => string;
    invalidReferenceError: () => string;
    queryValidations: {
        queryInvalid: (collectionName: string, invalidArguments: string[]) => string;
        isNumber: (operatorName: string, specifier: string, operand: any) => string;
        isPositiveNumber: (operatorName: string, operand: number) => string;
        isNonNegativeNumber: (operatorName: string, operand: number) => string;
        isInteger: (operatorName: string, operand: number) => string;
        isNonEmptyString: (operatorName: string) => string;
        notGreaterThan: (operatorName: string, operand: number, value: number) => string;
        invalidSkipParameter: (collectionName: string, skipParameter: number) => string;
        noPrevPage: (collectionName: string) => string;
        noNextPage: (collectionName: string) => string;
    };
    arityValidations: {
        arityIsZero: (operatorName: string) => string;
        arityIsOne: (operatorName: string) => string;
        arityIsTwo: (operatorName: string) => string;
        arityIsThree: (operatorName: string) => string;
        arityIsAtLeastTwo: (operatorName: string) => string;
        arityIsAtLeastOne: (operatorName: string) => string;
    };
    filterValidations: {
        typeIsString: (operatorName: string, value: any) => string;
        typeIsStringNumberOrDate: (operatorName: string, value: any) => string;
        sameType: (operatorName: string, first: any, second: any) => string;
        typeIsStringNumberOrDateForAll: (operatorName: string) => string;
        validFieldName: (operatorName: string, field: string) => string;
        isInstanceOfSameClass: (operatorName: string, constructorName: string, obj: any) => string;
        isForCollection: (operatorName: string, constructorName: string, collectionName: string) => string;
    };
    filterTreeValidations: {
        objectType: (operatorName: string, value: any) => string;
        arrayType: (operatorName: string, value: any) => string;
        arrayLength: (operatorName: string, expectedLength: number, value: any[]) => string;
        comparisonOperatorType: (operatorName: string, value: any) => string;
        stringOperatorType: (operatorName: string, value: any) => string;
        setOperatorItems: (operatorName: string, value: any) => string;
        inOperatorItems: (value: any) => string;
        matchesOperatorRequiredProperty: (propertyName: string, value: any) => string;
        matchesOperatorIgnoreCase: (value: any) => string;
        matchesOperatorSpecItems: (value: any) => string;
        regexNotAllowed: () => string;
    };
    sortValidations: {
        typeIsStringOrArrayOfStrings: (operatorName: string, effectiveArgs: any[]) => string;
    };
    orderByValidations: {
        sortModelType: (value: any) => string;
        sortModelItemType: (value: any) => string;
        sortModelItem: (value: any) => string;
    };
    internalError: (message: string) => string;
    serverInvalidResponse: (message: string) => string;
    itemDoesNotExist: (id: string, collectionName: string) => string;
    cursorPagingDoesNotSupportSkip: () => string;
    payloadIsTooLarge: () => string;
};
export declare const codes: {
    ItemDoesNotExist: string;
    ItemAlreadyExists: string;
    SiteInTemplateMode: string;
    UnknownError: string;
    ValidationError: string;
    CollectionDeleted: string;
    SchemaDoesNotExist: string;
    PermissionDenied: string;
    BadRequest: string;
    Unauthorized: string;
    TooManyRequests: string;
    RequestTimedOut: string;
    QuotaExceeded: string;
    QueryExecutionError: string;
};
export declare function wixDataError(message: string, code?: string, details?: any): Error;
export declare function validationError(message: string): Error;
export declare function wdeValidationError(message: string): Error;
export declare class BulkError extends Error {
    message: string;
    code: string;
    item: any;
    name: string;
    originalIndex: number;
    constructor(message: string, code: string, item: any, name: string, originalIndex: number);
}
//# sourceMappingURL=errors.d.ts.map