import { AggregatingValidator, messages } from '../../errors';
import { isNumber } from '../../utils';
class WixDataPatchBase {
    constructor(origin) {
        this.ownInvalidArguments = origin.invalidArguments ?? [];
        this.fieldModifications = origin.fieldModifications ?? [];
        this.collectionName = origin.collectionName;
    }
    incrementField(fieldName, by) {
        const [invalidArguments] = this.patchValidator('.incrementField')
            .arityIsTwo(arguments)
            .isNumber(fieldName, by)
            .validateAndAggregate();
        return this.copy({
            invalidArguments,
            addFieldModification: {
                fieldPath: fieldName,
                action: 'INCREMENT_FIELD',
                actionOptions: by,
            },
        });
    }
    setField(fieldName, value) {
        const [invalidArguments] = this.patchValidator('.setField')
            .arityIsTwo(arguments)
            .validateAndAggregate();
        return this.copy({
            invalidArguments,
            addFieldModification: {
                fieldPath: fieldName,
                action: 'SET_FIELD',
                actionOptions: value,
            },
        });
    }
    appendToArray(fieldName, value) {
        const [invalidArguments] = this.patchValidator('.appendToArray')
            .arityIsTwo(arguments)
            .validateAndAggregate();
        return this.copy({
            invalidArguments,
            addFieldModification: {
                fieldPath: fieldName,
                action: 'APPEND_TO_ARRAY',
                actionOptions: value,
            },
        });
    }
    removeFromArray(fieldName, value) {
        const [invalidArguments] = this.patchValidator('.removeFromArray')
            .arityIsTwo(arguments)
            .validateAndAggregate();
        return this.copy({
            invalidArguments,
            addFieldModification: {
                fieldPath: fieldName,
                action: 'REMOVE_FROM_ARRAY',
                actionOptions: value,
            },
        });
    }
    removeField(fieldName) {
        const [invalidArguments] = this.patchValidator('.removeField')
            .arityIsTwo(arguments)
            .validateAndAggregate();
        return this.copy({
            invalidArguments,
            addFieldModification: {
                fieldPath: fieldName,
                action: 'REMOVE_FIELD',
            },
        });
    }
    patchValidator(operatorName) {
        return new PatchValidator(operatorName, this.ownInvalidArguments);
    }
}
export class WixDataBulkPatchImpl extends WixDataPatchBase {
    constructor(origin) {
        super(origin);
        this.onRun = origin.onRun;
        this.itemIds = origin.itemIds;
    }
    copy(params) {
        return new WixDataBulkPatchImpl({
            ...this,
            invalidArguments: params.invalidArguments ?? this.ownInvalidArguments,
            fieldModifications: [
                ...this.fieldModifications,
                ...[params.addFieldModification],
            ],
            onRun: this.onRun,
        });
    }
    run(options) {
        return this.onRun(arguments, {
            collectionName: this.collectionName,
            itemIds: this.itemIds,
            invalidArguments: this.ownInvalidArguments,
            fieldModifications: this.fieldModifications,
        }, options);
    }
}
export class WixDataPatchImpl extends WixDataPatchBase {
    constructor(origin) {
        super(origin);
        this.onRun = origin.onRun;
        this.itemId = origin.itemId;
    }
    copy(params) {
        return new WixDataPatchImpl({
            ...this,
            invalidArguments: params.invalidArguments ?? this.ownInvalidArguments,
            fieldModifications: [
                ...this.fieldModifications,
                ...[params.addFieldModification],
            ],
            onRun: this.onRun,
        });
    }
    run(options) {
        return this.onRun(arguments, {
            collectionName: this.collectionName,
            itemId: this.itemId,
            invalidArguments: this.ownInvalidArguments,
            fieldModifications: this.fieldModifications,
        }, options);
    }
}
class PatchValidator extends AggregatingValidator {
    constructor(operatorName, previousInvalidArguments) {
        super(previousInvalidArguments);
        this.operatorName = operatorName;
        this.operatorName = operatorName;
    }
    isNumber(specifier, operand) {
        return this.addValidation(() => isNumber(operand), () => messages.queryValidations.isNumber(this.operatorName, specifier, operand));
    }
}
//# sourceMappingURL=WixDataPatchImpl.js.map