import { decode as parseDates, encode as serializeDates, base64url, } from '../utils';
import { messages, wixDataError, codes } from '../errors';
import { isHttpError, parseError } from './errors';
const SUPPORTS_GET_METHOD = {
    'com.wixpress.cloud.data.api.data.DataItemService.QueryDataItems': true,
};
export function apiRequestInterceptor(allowGet) {
    return (request) => {
        const preferGet = allowGet && SUPPORTS_GET_METHOD[request.methodFqn ?? ''];
        const data = serializeDates(request.data);
        if (preferGet) {
            // https://github.com/wix-private/server-infra/tree/master/framework/grpc/rest#complex-requests-messages-with-get-mappings
            const url = `${request.url}?.r=${base64url(data)}`;
            if (url.length <= 2048) {
                return {
                    ...request,
                    method: 'GET',
                    url,
                    data: undefined,
                };
            }
        }
        return { ...request, data };
    };
}
export class ApiClient {
    constructor(clientFactory, allowGet) {
        this.httpApiClient = clientFactory(apiRequestInterceptor(allowGet));
    }
    async getDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.getDataItem(r);
            return parseDates(response.data);
        });
    }
    async insertDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.insertDataItem(r);
            return parseDates(response.data);
        });
    }
    async saveDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.saveDataItem(r);
            return parseDates(response.data);
        });
    }
    async updateDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.updateDataItem(r);
            return parseDates(response.data);
        });
    }
    async patchDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.patchDataItem(r);
            return parseDates(response.data);
        });
    }
    async bulkPatchDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkPatchDataItems(r);
            return parseDates(response.data);
        });
    }
    async removeDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.removeDataItem(r);
            return parseDates(response.data);
        });
    }
    async countDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.countDataItems(r);
            return parseDates(response.data);
        });
    }
    async queryDistinctValues(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.queryDistinctValues(r);
            return parseDates(response.data);
        });
    }
    async queryDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.queryDataItems(r);
            return parseDates(response.data);
        });
    }
    async aggregateDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.aggregateDataItems(r);
            return parseDates(response.data);
        });
    }
    async bulkInsertDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkInsertDataItems(r);
            return parseDates(response.data);
        });
    }
    async bulkUpdateDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkUpdateDataItems(r);
            return parseDates(response.data);
        });
    }
    async bulkSaveDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkSaveDataItems(r);
            return parseDates(response.data);
        });
    }
    async bulkRemoveDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkRemoveDataItems(r);
            return parseDates(response.data);
        });
    }
    async queryReferencedDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.queryReferencedDataItems(r);
            return parseDates(response.data);
        });
    }
    async bulkInsertDataItemReferences(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkInsertDataItemReferences(r);
            return parseDates(response.data);
        });
    }
    async replaceDataItemReferences(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.replaceDataItemReferences(r);
            return parseDates(response.data);
        });
    }
    async bulkRemoveDataItemReferences(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.bulkRemoveDataItemReferences(r);
            return parseDates(response.data);
        });
    }
    async isReferencedDataItem(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.isReferencedDataItem(r);
            return parseDates(response.data);
        });
    }
    async truncateDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.truncateDataItems(r);
            return parseDates(response.data);
        });
    }
    async searchDataItems(r) {
        return this.withErrorHandling(async () => {
            const response = await this.httpApiClient.searchDataItems(r);
            return parseDates(response.data);
        });
    }
    async withErrorHandling(call) {
        try {
            return await call();
        }
        catch (error) {
            if (isHttpError(error)) {
                if (error.response?.status === 413) {
                    throw wixDataError(messages.payloadIsTooLarge(), 'WDE0109');
                }
                const parsedError = parseError(error.response?.data);
                if (parsedError) {
                    throw parsedError;
                }
            }
            throw wixDataError(messages.internalError('Unknown error.'), codes.UnknownError);
        }
    }
}
//# sourceMappingURL=ApiClient.js.map