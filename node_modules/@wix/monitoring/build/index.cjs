"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  createFallbackMonitoringClient: () => createFallbackMonitoringClient,
  generateTagsAndContext: () => generateTagsAndContext
});
module.exports = __toCommonJS(index_exports);

// src/context/context-utils.ts
var validValue = (value) => value !== void 0 && value !== null && value !== "";
var pickByValidValues = (obj) => pickBy(obj, validValue);
function pickBy(object, predicate = (value) => !!value) {
  if (!object) {
    return {};
  }
  const result = {};
  for (const key in object) {
    if (predicate(object[key], key)) {
      result[key] = object[key];
    }
  }
  return result;
}
var generateTagsAndContext = (context) => {
  const tags = pickByValidValues({
    "app.id": context.appId,
    "app.version": context.appVersion,
    "app.instanceId": context.appInstanceId,
    "extension.id": context.extensionId,
    "extension.name": context.extensionName,
    "extension.type": context.extensionType,
    platform: context.platform
  });
  const contexts = pickBy(
    {
      "extension.data": pickByValidValues({
        ...context.extensionData
      }),
      site: pickByValidValues({
        url: context.siteUrl,
        id: context.tenantType === "SITE" ? context.tenantId : void 0
      }),
      account: pickByValidValues({
        id: context.tenantType === "ACCOUNT" ? context.tenantId : void 0
      })
    },
    (value) => !!value && Object.keys(value).length > 0
  );
  return {
    tags,
    contexts
  };
};

// src/fallback-client.ts
var FallbackMonitoringClient = class {
  constructor(message) {
    this.message = message;
    this.captureException = () => {
      console.error(this.message);
    };
    this.captureMessage = () => {
      console.error(this.message);
    };
    this.startSpan = (spanOptions, callback) => {
      console.error(this.message);
      return callback(void 0);
    };
    this.startSpanManual = () => {
      console.error(this.message);
      return {
        end: () => {
        },
        fail: () => {
        }
      };
    };
    this.endSpanManual = () => {
      console.error(this.message);
    };
    this.addBreadcrumb = () => {
      console.error(this.message);
    };
  }
};
var createFallbackMonitoringClient = (message) => {
  return new FallbackMonitoringClient(message);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createFallbackMonitoringClient,
  generateTagsAndContext
});
